func_code,assignment_id,func_name,description,test,correct,user,academic_year,normalized,representative,repair,submission_id,repair_correctness
"def reverse(a):
    print(a.reverse())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",16,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",18,True
"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        d = {swap_me[key]: key for key in list(set(swap_me.keys())) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",35,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,,,"def area(r):
    return 3.141 * r ** 2",61,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",71,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",84,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(n + r)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",87,True
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.values.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",92,True
"def circumference(n):
    return pi * n * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def circumference(r):
    return 3.141 * r * 2",104,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",111,True
"def power(m, n):
    if m == m ** n:
        return m
    else:
        m = m ** n
        return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",116,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",150,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",161,True
"def reverse_list(n=[]):
    if len(n) == 1:
        return 0
    else:
        return reverse_list(n)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",164,True
"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",170,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,174,False
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",178,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,200,False
"def overlap(x1, y1, r1, x2, y2, r2):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if A:
        0
    if dist_p < dist_r:
        return True
    return A",205,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",242,True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted[l]]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    elif True:
        0
    return reverse_list(l[1:]) + [l[0]]",245,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,,,"def circumference(r):
    return 2 * 3.141 * r",252,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",253,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",265,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",266,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",271,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",276,True
"def power(m, n):
    while n != 0:
        m = m * m
        n = n - 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    if False:
        0
    if not n:
        return 1
    return m * power(m, n - 1)",288,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",313,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",314,True
"def area(r):
    return 3.14 * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def area(r):
    return 3.141 * r ** 2",332,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,,348,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d31360b5-795b-45df-bd6f-a99df2683eae,2016.0,,,,370,False
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",376,False
"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",403,True
"def append2list(l1, l2):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",408,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",412,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",416,True
"def selectionsort(a):
    i = 0
    p = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",428,True
"def swap_keys_values(d):
    reversed_d = {(v, k) for k, v in d.items()}
    return reversed_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def swap_keys_values(d):
    reversed_d = dict((v, k) for k, v in d.items())
    return reversed_d",447,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[j] < a[p]:
            j = p
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,485,False
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",492,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",495,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9dea5530-0f82-4127-b25f-20c784224a03,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",512,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",516,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",521,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",540,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,,,566,False
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",597,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",598,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",610,True
"def swap_unique_keys_values(d):
    print(lies(list(d.items())))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",623,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",627,True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = int(a.pop())
    if test < minimum or minimum == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",644,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",656,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",665,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    print(distance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",668,True
"def index(str, letter):
    for item in str:
        if item == letter:
            return item
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",685,True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",710,True
"def reverse_list(l):
    if l == []:
        return []
    return l[1:].append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",711,True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []
    else:
        0",740,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def area(r):
    return 3.141 * r ** 2",753,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",776,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",784,True
"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",805,True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",808,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",813,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        m = (low + high) / 2
        if a[m] < q:
            low = m + 1
        else:
            high = m
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",818,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",831,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",833,True
"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",836,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low[i]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",849,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",869,True
"def reverse_list(l):
    if len(l) == 1:
        return list(l)
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",875,True
"def reverse_list(list):
    if not list:
        return list
    else:
        return list[-1] + reverse_list(list)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",877,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",887,True
"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",899,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q:
            return True
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return False",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            if a[mid] < q:
                if True:
                    low = mid + 1
            else:
                high = mid
    return low",901,True
"def sort(a):
    i = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",907,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",918,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",925,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        print(no.count(a))
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",946,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",978,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",982,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",995,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",996,True
"def selectionsort(A, p, r):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",998,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print(sorted(l, key=my_function))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,1002,False
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",1012,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 1 / 2
    return l < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",1015,True
"def reverse_list(l):
    if l == []:
        return []
    new = reverse_list(l[1:]).append(l[0])
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",1017,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
        return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",1058,True
"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",1063,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
        print(i)
        print(z)
        print(x)
    print(str(i))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",1067,True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,,1099,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,,1101,False
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return len(n)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",1109,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",1110,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",1119,True
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * x1 * y1
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(length, width):
    rectper = (length + width) * 2
    return rectper",1131,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1141,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_first_position_of_smallest(a, i)
        swap(a, j, i)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2016.0,,,,1154,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def area(r):
    return 3.141 * r ** 2",1190,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,,"def area(r):
    return 3.141 * r ** 2",1211,True
"def reverse_list(a, b=''):
    if a == []:
        return b.strip().split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",1220,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",1263,True
"def square_perimeter(n):
    sqaure_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",1270,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",1273,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1284,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",1293,True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += tmp
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",1296,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if a[mid] < low:
                high = mid
            else:
                low = mid
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    A = False
    low = 0
    high = len(a)
    if A:
        0
    if A:
        0
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1327,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,1339,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,,1352,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05f63619-1095-4d15-8436-1f0832a593bc,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1360,True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if d.count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",1377,True
"def index(string, letter, count):
    k = len(string)
    if count == k:
        print(-1)
    elif string[count] == letter:
        print(count)
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",1394,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,66e06699-d10a-47f1-a343-55edd72e95d2,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1409,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",1426,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1459,True
"def index(str, letter):
    return str.index(letter)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def index(steve, letter):
    return steve.find(letter)",1468,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    print(distance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",1469,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1482,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",1487,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",1496,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",1499,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",1501,True
"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    else:
        return n - 1 + (n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",1502,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1518,True
"def swap_keys_values(my_dict):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",1524,True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        print(less)
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,1530,False
"def minimum(l):
    a = l[0]
    if len(l) == 1:
        return l[0]
    elif a >= minimum(l):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif False:
        0
    return [s for s in l if all(s <= i for i in l)][0]",1533,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')
    return",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",1557,True
"def swap_unique_keys_values(x):
    new = {}
    for k in x:
        c = x.get(k)
        if c in new:
            del new[v]
        else:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",1563,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",1569,True
"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",1571,True
"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",1584,True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) - 1
    if i >= 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",1586,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",1599,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1611,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1622,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",1624,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(new_d.values()):
            new_d[key] = value
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",1642,True
"def selectionsort(a):
    j = 0
    i = 1
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            else:
                0
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",1651,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    tmp = minimum(l[1:])
    return tmp if tmp > l[0] else l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m < l[0] else l[0]",1670,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,1682,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,,,,1689,False
"def search(str, letter):
    if str[i] == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",1703,True
"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def power(x, n):
    if True:
        0
    if False:
        0
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",1709,True
"def search(string, letter):
    if string == []:
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",1726,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",1727,True
"def sort(a):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",1739,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]].append(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",1768,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,,1808,False
"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in a:
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",1847,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1856,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,1859,False
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d[0:-1]:
        for k in di[1:]:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",1864,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def area(r):
    return 3.141 * r ** 2",1877,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (k) >= 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",1881,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",1908,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",1922,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",1923,True
"def swap_keys_values(d):
    return {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",1925,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return A
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,,1940,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",1958,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] >= q:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        elif False:
            0
        high = mid
    return low",1975,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) != 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",1977,True
"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def quicksort(A, start, end):
    if end - start < 1:
        return
    i = j = start
    while i <= end:
        if True:
            0
        elif True:
            0
        if A[i] <= A[end]:
            A[i], A[j] = A[j], A[i]
            j += 1
        i += 1
    quicksort(A, start, j - 2)
    quicksort(A, j, end)",1979,True
"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",1980,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        a[i] = a[len(a) - i - 1]
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",1988,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",1996,True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",2016,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",2064,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,,,2083,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",2098,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2127,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",2128,True
"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",2145,True
"def bsearch(a, q):
    A = False
    found = A
    newSet = q
    while found != True or newSet > 0:
        midpoint = int(len(newSet) / 2)
        if a < newSet[midpoint]:
            found = A
            newSet = newSet[:midpoint]
        elif a > newSet[midpoint]:
            found = A
            newSet = newSet[midpoint:]
        elif a == newSet[midpoint]:
            found = True
    return found",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,,"def bsearch(a, q):
    low = 0
    if True:
        high = len(a)
        while low < high:
            mid = (low + high) // 2
            if a[mid] < q:
                low = mid + 1
            else:
                high = mid
        return low",2156,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i += 1
    return -1",2161,True
"def power(n):
    if n == 0:
        return 0
    else:
        return n ** power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",2171,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",2186,True
"def rectangle_perimeter(n):
    rp = n + n + m + m
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def rectangle_perimeter(n, a):
    rp = n + n + a + a
    return rp",2189,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",2190,True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()).sorted())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",2191,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",2201,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n >= 2:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def fibonacci(n):
    if True:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",2209,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2219,True
"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,,2229,False
"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",2231,True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",2240,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid + 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2246,True
"def swap_keys_values(d):
    return {(v, k) for k, v in d.items()}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",2250,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",2259,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    if True:
        0
    return low",2261,False
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",2277,True
"def overlap(x1, y1, r1, x2, y2, r2):
    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2
        )",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",2291,True
"def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return true
            test = 2
        i = i + 1
    if test == 1:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return True
            test = 2
        i = i + 1
    if test == 1:
        return False",2327,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",2328,True
"def reverse(a):
    print(a[::-1])",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",2336,True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            k = find_position_of_smallest(a, i)
            swap(a, i, k)
            i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,,2353,False
"def fibonacci(n):
    i = 1
    j = 0
    k = 0
    while i < n - i:
        k = i
        i = j + i
        j = k
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",2357,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        a[i] = a[-i - 1]
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",2358,True
"def reverse(a):
    a = []
    i = 0
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",2391,True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",2395,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",2407,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) < dist < abs(r1 + r2
        ) or x1 == x2 and y1 == y2 and r1 == r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",2408,False
"def swap_unique_keys_values(my_dict):
    d = {}
    for key in my_dict:
        value = my_dict.get(k)
        if value in d:
            del d[v]
        else:
            d[v] = k
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",2419,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",2422,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",2450,True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",2473,True
"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",2475,True
"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",2480,True
"def selection_sort(a):
    i = 0
    j = 1
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",2485,True
"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,,2555,False
"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",2564,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",2566,True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",2583,True
"def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,,2591,False
"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif minimum(l[0:len(l)]) < minimum(l[len(l) + 1:]):
        return minimum(l[0:len(l)])
    else:
        return minimum(l[len(l) + 1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",2611,True
"def power(i, n):
    if i == i ** n:
        print(i)
        return i
    i *= i
    power(i, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",2648,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,2655,False
"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    print(d)
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",2662,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",2685,True
"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",2711,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",2729,True
"def reverse(a):
    a = a[::-1]
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",2731,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
    while i < n:
        sum1 = n1 + n2
        n2 = n1
        n1 = sum1
        i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    fibN_2 = 0
    if False:
        0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",2743,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",2746,True
"def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}
    print([new_dict])
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print(l)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",2754,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2764,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def area(r):
    return 3.141 * r ** 2",2781,True
"def reverse(b):
    print(a[::-1])",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def reverse(a):
    return a[::-1]",2798,True
"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        index(string, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",2807,True
"def swap_keys_values():
    return {v: k for k, v in d.items}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",2820,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2827,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2841,True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,,2852,False
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",2857,False
"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",2861,True
"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",2873,True
"def swap_keys_values(d):
    for k, v in d.items:
        new_v, new_k = k, v
        return new_v, new_k",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",2898,True
"def count_letters(string_):
    counter = 0
    for i in string:
        counter += 1
    return counter",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",2907,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,422fe752-ca84-4537-b250-7de556e6ee94,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",2928,True
"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop)
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",2931,True
"def minimum(a):
    lowest = sum(a)
    for e in a:
        if e < lowest:
            lowest = e
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",2954,True
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,,,"def circle_circumference(r):
    return 2 * 3.14 * r",2959,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except KeyError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",2974,True
"def double(n):
    m = n * 2
    print(m)",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,,,"def double(n):
    n = n * 2
    return n",3006,True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        return power(base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",3011,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",3023,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def area(r):
    return 3.141 * r ** 2",3029,True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] > q:
            high = mid - 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if not low < high:
            break
        mid = (low + high) // 2
        if a[mid] < q:
            if False:
                0
            low = mid + 1
        else:
            high = mid
    return low",3050,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",3051,True
"def fibonacci(pos):
    import sys
    prev = 0
    curr = 1
    i = 0
    if pos == 0:
        return 1
    else:
        while i < pos + 1:
            curr = prev + curr
            prev = curr - prev
            i = i + 1
        return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    else:
        if s in (1, 2):
            return 1
        elif True:
            0
        return fibonacci(s - 1) + fibonacci(s - 2)",3055,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",3076,True
"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",3080,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3120,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3128,True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",3139,True
"def swap_keys_values():
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",3140,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",3153,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",3165,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",3167,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",3172,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        m = (low + high) / 2
        if a[m] < q:
            low = m + 1
        else:
            high = m
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3173,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",3182,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,,3191,False
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",3199,True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",3200,True
"def swapi(a, i, j):
    if a[j] < a[i]:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            swapi(a, i, j)
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015.0,,,,3205,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3209,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",3214,True
"def swap_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",3227,True
"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",3233,True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",3244,True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def minimum(a):
    quicksort(a, 0, len(a) - 1)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,3249,False
"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def reverse(a):
    return a[::-1]",3251,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3275,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 1 / 2
    return l <= r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",3303,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",3314,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        while i < len(a):
            if a[i] < a[j]:
                tmp = a[i]
                a[i] = a[j]
                a[j] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",3318,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,,3331,False
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while fib[n]:
        num = fib[n - 1] + fib[n - 2]
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",3335,True
"def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        i = i + 1",3336,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3355,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",3365,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3393,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",3394,True
"def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:] + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:]) + 1",3403,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,,3411,False
"def append2list(l1, l2=[]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def append2list(l1, l2=[]):
    return l2 + l1",3476,True
"def selectionsort(a):
    a = a[:]
    out = []
    while a:
        smallest = min(a)
        a.remove(smallest)
        out.append(smallest)
    return out",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            else:
                0
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",3491,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",3492,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x1, y1, r1, x2, y2, r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",3519,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,,,3530,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return len[:i]
        i += 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9b929794-1500-4125-bf6c-79d74c111918,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",3552,True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",3560,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) <= abs(
        r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",3581,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,,,3593,False
"def swap_unique_keys_values(d):
    new_d = {}
    print(list(d.values()))
    for key, value in list(d.items()):
        print(value)
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",3594,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = len(a) / 2
    while low < high:
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
        mid = (low + high) / 2
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,41c113b8-6f57-4003-bed3-3587b2376170,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3600,True
"def square_perimeter(r):
    sqaure_perimeter = r * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",3605,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,,3637,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",3675,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",3677,True
"def selection_sort(a):
    for i in range(0, len(a)):
        p = i
        curr_low = p
        while p < len(a):
            if a[p] < a[curr_low]:
                curr_low = p
            p += 1
        tmp = a[i]
        a[i] = a[curr_low]
        a[curr_low] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p] and True:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",3695,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",3698,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",3720,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def area(r):
    return 3.141 * r ** 2",3724,True
"def minimum(l):
    return l.sort()[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(l):
    return sorted(l)[0]",3728,True
"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016.0,,,,3774,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",3776,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",3802,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3824,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",3827,True
"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return maximum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",3832,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",3853,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3861,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3886,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f15a871d-61c5-494f-8886-91e213b59201,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",3893,True
"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,3900,False
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,,,3907,False
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if str(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",3915,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,,3930,False
"def quicksort(cabbages):
    if len(l) < 2:
        return l
    pivot = l[0]
    left_side = []
    right_side = []
    for n in cabbages[1:]:
        if n < pivot:
            left_side.append(n)
        else:
            right_side.append(n)
    return quicksort(left_side) + [pivot] + quicksort(right_side)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",3943,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",3951,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=sorter))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",3955,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = abs((x2 - x1) ** 2)
    y = abs((y2 - y1) ** 2)
    distance = (x + y) // 2
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",3962,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",3969,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",3980,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",3984,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",3994,True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",3997,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",4007,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",4018,True
"def append2list(l1, l2=[][:]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def append2list(l1, l2=[][:]):
    return l2 + l1",4028,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",4038,True
"def bsearch(a, q):
    lo = 0
    hi = len(a)
    while lo < hi:
        mid = (lo + hi) / 2
        if a[mid] < q:
            lo = mid + 1
        else:
            hi = mid
    return lo",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a8d7ba55-2066-48ff-a791-991413f703dc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4064,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in set.intersection(list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",4070,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    elif len(l) == 1:
        return l[0]
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",4072,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",4075,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",4080,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",4108,True
"def fibonacci(N):
    if N == 0 or N == 1:
        return 1
    return fibonacci(N - 1) + fibonacci(N - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",4110,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",4119,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,,4120,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",4144,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",4145,True
"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if a.count(i) == 1:
            a.pop(i)
    e = {}
    for k, v in list(d.items()):
        if v not in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",4150,True
"def circumference(r):
    return 2 * PI * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",4155,True
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def sort(a):
    i = 0",4158,True
"def count_letters(word):
    if not word:
        return 0
    return 1 + word[:-1]",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def count_letters(word):
    if not word:
        return 0
    return 1 + count_letters(word[:-1])",4192,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,86f3bfd9-abca-4a94-ac95-d257d354e3e5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4193,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",4215,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",4239,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",4270,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",4330,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",4351,True
"def fibonacci(n):
    if n == (0 or 1):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",4353,True
"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ').strip()
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",4358,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6fb1b046-1d89-4162-8437-722d44e22f50,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4363,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,,,4376,False
"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[1]
    return reverse_list(l[1:]).append(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",4384,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4391,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,,,"def area(r):
    return 3.141 * r ** 2",4440,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(n)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",4448,True
"def swap_unique_keys_values(d):
    new_dict = {}
    seen = []
    for z, q in list(d.items()):
        if q not in seen:
            new_dict[q] = z
        seen.append(q)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",4459,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",4460,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if d[k] not in new_d:
            new_d[d[k]] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",4465,True
"def circumference(r):
    return r * 2 * pi",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,,,"def circumference(r):
    return r * 2 * 3.141",4482,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",4497,True
"def swap_keys_values(a):
    for k, v in list(a.items()):
        tmp = k
        k = v
        v = tmp
    print(a)
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",4498,True
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",4529,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",4534,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",4567,True
"def append2list(l1, l2=[]):
    if l2 != None:
        if len(l2) > 1:
            l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def append2list(l1, l2=None):
    if l2 is None:
        if True:
            0
        l2 = []
    l2 = l2
    for i in l1:
        l2.append(i)
    return l2",4577,True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
        if True:
            0
    return new_dict
    return new_dict",4580,True
"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",4581,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",4589,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",4599,True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",4622,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",4626,True
"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, j, end)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",4653,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",4656,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4673,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4681,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def area(r):
    return 3.141 * r ** 2",4713,True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        if list(d.items()).count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",4730,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",4732,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",4758,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print((type(x1), type(y1), type(r1), type(x2), type(y2), type(r2)))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",4794,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",4803,True
"def reverse(a):
    print(reverse(a[i]))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",4809,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",4828,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,4830,False
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",4844,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,4860,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = abs(r1 - r2)
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",4874,True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",4890,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,4899,False
"def swap_unique_keys_values(d):
    a = []
    for k, v in d.items:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",4902,True
"def append2list(l1, l2=[]):
    l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def append2list(l1, l2=[]):
    return l2 + l1",4919,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1].extend(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",4921,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",4939,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4944,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",4953,True
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = (2)(x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",4954,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def area(r):
    return 3.141 * r ** 2",4967,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4974,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",4984,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{:>2s}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,5011,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,,5012,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",5019,True
"def swap_keys_values(x):
    for a in d:
        e[d[value]] = e[d[key]]",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",5024,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5026,True
"def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fin[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,,,"def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",5039,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",5040,True
"def power(m, n):
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    return m ** n",5043,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for key in d:
        for value in list(d.values()):
            a.append(value)
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    if len(d) > 0:
        for key in d:
            if list(d.values()).count(d[key]) == 1:
                new_d[d[key]] = key
    return new_d",5048,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5054,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",5060,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",5082,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5086,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5090,True
"def circle_area(radius1):
    return 3.14 * radius1 * radius1",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,b69e2427-8f89-4880-8245-6f14d4d2354a,2015.0,,,"def circle_area(r):
    return r * r * 3.14",5114,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[key] = value
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",5117,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    list(d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",5124,True
"def find_smallest(a, i):
    p = i
    q = i + 1
    while q < len(a):
        if a[q] < a[p]:
            p = q
        q += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,,5132,False
"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        greater = [i for i in array if i == piv]
        array = greater + equal + less",5143,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,5159,False
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2016.0,,,"def sort(a):
    i = 0",5160,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",5169,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5174,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,5181,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, a[i], a[len(a) - i - 1])
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,,,5185,False
"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    print((keys, values))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",5191,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(new_d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",5226,True
"def power(n, mult):
    if mult == 0:
        return 0
    n * n
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",5228,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if True:
        0
    if distance < total_radius:
        return True
    else:
        return False",5238,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,,"def area(r):
    return 3.141 * r ** 2",5270,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",5277,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    if A:
        0
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if A:
        0
    if dist_p < dist_r:
        return True
    else:
        return A",5279,True
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,,,"def circle_circumference(r):
    return 2 * 3.14 * r",5280,True
"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",5304,False
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",5322,True
"def minimum(s):
    if len(s) == 0:
        return 0
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",5346,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",5354,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",5362,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5395,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",5400,False
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if int(value) not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",5407,True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif True:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",5427,True
"def power(x, n):
    if x == 0:
        return 1
    return n * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",5456,True
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(uniqueness):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",5461,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",5463,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",5472,True
"def fibonacci(n):
    i = 0
    while i < len(n):
        if n + 1 == n + 2:
            return i
        i += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",5490,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,,5494,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",5519,True
"def sort(a):
    a.sort(a)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0",5534,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",5588,True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5603,True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5615,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        print(False)
    else:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = (x2 - x1) ** 2 + (y2 - y1) ** 2
    dist2 = dist ** 0.5
    if dist2 < r1 + r2:
        return True
    else:
        return False",5621,True
"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",5638,True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return r == d",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",5644,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,,5647,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",5654,True
"def swap_unique_keys_values(d):
    items = set(d.itmes())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",5657,True
"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",5658,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",5669,True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",5685,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return z
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        fib = [0, 1]
        i = 2
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]
    else:
        0",5697,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",5698,True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",5699,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",5709,True
"def power(base, power2):
    if base == 0:
        return 'invalid'
    if power2 == 0:
        return 1
    elif power2 == 1:
        return base
    else:
        return base * power(base, power2 - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def power(base, exp, mult=None):
    if mult is None:
        mult = base
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * mult
        new_exp = exp - 1
        return power(new_base, new_exp, mult)",5720,True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",5721,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5734,True
"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        if True:
            return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",5760,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",5765,True
"def minimum(s):
    if len(s) == 1:
        return 0
    else:
        max = maxElement(L[1:])
        if L[0] > max:
            return L[0]
        else:
            return max",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",5792,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",5811,True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if len(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",5813,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return i",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",5845,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",5903,True
"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,,5911,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",5914,True
"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",5922,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",5933,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",5955,True
"def swap_keys_values(swap_me):
    print(list({swap_me[key]: key for key in list(swap_me.keys())}.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",5958,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",5963,True
"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [v for k, v in d]
    print(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",5983,True
"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2",6012,True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
        if True:
            0
    return new_dict
    return new_dict",6017,True
"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop())
    new_list.append(l.pop())
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",6021,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",6053,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",6060,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",6078,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,,6085,False
"def sort(a):
    b = a
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",6108,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",6112,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",6143,True
"def swap_keys_values(d):
    new_dict = dict((k, v) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",6172,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,36685ead-53f8-40af-a908-4c048278dc6b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6227,True
"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",6232,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",6237,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def area(r):
    return 3.141 * r ** 2",6239,True
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * (x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",6253,True
"def rectangle_perimeter(n):
    rp = n + n + m + m",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def rectangle_perimeter(n, a):
    rp = n + n + a + a
    return rp",6264,True
"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",6271,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",6284,True
"def index(str, letter):
    if letter in str:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",6307,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",6316,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6317,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",6344,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance and abs(r1 - r2) <= distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance:
        return True
    else:
        return False",6348,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,6352,False
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",6354,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6355,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([(k, v) for k, v in sorted(list(d.items()), key=lambda x: x[1])])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",6366,True
"def search(str, letter):
    for item in str:
        if item == letter:
            return False
        return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter and True:
            return True
        i += 1
    return False",6387,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum(l[0] + l[2:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum([l[0]] + l[2:])",6397,True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",6400,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6407,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",6414,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",6455,True
"def fibonacci(i):
    if i <= 1:
        return 1
    else:
        return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",6456,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",6458,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",6460,True
"def bsearch(a, q):
    lo = 0
    hi = len(a)
    while lo < hi:
        mid = (lo + hi) / 2
        if a[mid] < q:
            lo = mid + 1
        else:
            hi = mid
    return lo",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a8d7ba55-2066-48ff-a791-991413f703dc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6481,True
"def minimum(numbers):
    count = 0
    for i in numbers:
        if i > count:
            count = i
    return count",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",6488,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",6498,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,,6516,False
"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def reverse(a):
    return a[::-1]",6530,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",6536,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",6539,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",6546,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",6548,True
"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",6553,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (v) == 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",6554,True
"def search(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        return pos
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",6569,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",6583,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",6589,True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",6596,True
"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[0])
    else:
        lst.remove(lst[0])
    return maximum(lst)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",6664,True
"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.items()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",6665,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",6667,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",6669,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6683,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6685,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",6704,True
"def area(r):
    a = pi * r * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",6713,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",6720,True
"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",6721,True
"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",6773,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",6794,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",6797,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",6803,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, i - 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",6826,True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted(l)]
    for i in range(len(l)):
        new_l.append(sortedl[len(l) - i - 1])
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    elif True:
        0
    return reverse_list(l[1:]) + [l[0]]",6857,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    print(total)
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",6873,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",6880,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 and ((
        x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",6883,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",6888,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        temp = a[i]
        a[i] = a[p]
        a[p] = temp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",6912,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6914,True
"def reverse_list(l):
    if l == []:
        return []
    return l[1:] + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",6915,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6963,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",6975,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,,6993,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    if True:
        0
    return low",7016,False
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",7019,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,,,7021,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7046,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,7068,False
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",7081,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,,7085,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",7087,True
"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def power(x, n):
    if True:
        0
    if False:
        0
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",7094,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",7102,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",7105,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7118,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",7136,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",7161,True
"def fibonacci(n):
    count = 0
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return count
        a = b
        b = c
    count += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        print(a)
        temp = a
        a = b
        b = temp + b
    return a",7168,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,,7184,False
"def circle_circumference(n):
    cc = 2 * 3.14 * n",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def circle_circumference(n):
    cc = 2 * 3.14 * n
    return cc",7189,True
"def count_letters(s):
    if s == '':
        return total
    total += 1
    s = s[:-1]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",7192,True
"def minimum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis, p)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",7207,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l.append(i)
    return l",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",7220,True
"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if v not in newdick:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",7230,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=sorter))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",7236,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7270,True
"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",7272,True
"def power(m, n):
    while n != 0:
        m *= m
        n -= 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    if False:
        0
    if not n:
        return 1
    return m * power(m, n - 1)",7281,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",7297,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",7304,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,,,7307,False
"def index(str, letter):
    if letter in str:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",7326,True
"def fibonacci(n):
    i = 0
    while i < len(n):
        if n[i] == 0:
            return i
        i += 1
    return c
    c = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",7334,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",7339,True
"def minimum(l):
    min = sum(l)
    for i in l:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",7341,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,,7342,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def area(r):
    return 3.141 * r ** 2",7354,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    while i < len(a):
        if find_position_of_smallest(a, i).swap(a):
            swap(a, i, j).sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,,,7360,False
"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
    return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",7362,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",7423,True
"def reverse_list(l):
    if len(l) == 2:
        return ' '.join(l[1], l[0]).split(' ')
    else:
        return ''.join(reverse_list(l[1]), l[0]).split()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",7445,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7457,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",7461,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p, j = i, i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",7463,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7465,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",7474,True
"def selectionsort(a):
    start = time.time()
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",7494,True
"def reverse_list(l):
    if not l:
        return []
    return reverse_list[0].append(reverse_list[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",7496,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",7498,True
"def selectionsort(a):
    return 'fuck my life and everything in between'",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def selectionsort(A):
    for i in range(len(A)):
        min_j = i
        for j in range(i, len(A)):
            if A[j] < A[min_j]:
                min_j = j
            else:
                0
            A[i], A[min_j] = A[min_j], A[i]",7501,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = set(d.values()) & set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",7509,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",7515,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7558,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7580,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[p] < a[j]:
            j = p
            i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,7591,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",7594,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7626,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",7650,True
"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",7655,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7657,True
"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",7671,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    if len(l) > 0:
        for i in l:
            if l.count(i) > 1:
                del new_dict[i]
                break
    elif False:
        0
    return new_dict
    return new_dict",7688,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(c)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",7696,True
"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,,7716,False
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return c
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",7786,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    r = r1 + r2
    if d < r:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",7809,True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,,7826,False
"def reverse_list(l):
    if len(l) == 2:
        return ''.join(l[1], l[0]).split()
    else:
        return ''.join(reverse_list(l[1]), l[0]).split()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",7850,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",7855,True
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",7857,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9d69cd84-adaa-42a8-9530-416762b34c13,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7867,True
"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            else:
                0
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",7872,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7897,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",7932,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    sumrad = r1 + r2
    xs = (x2 - x1) ** 2
    ys = (y2 - y1) ** 2
    inside = xs + ys
    dis = math.sqrt(inside)
    if dis < sumrad:
        return True
    elif sumrad < dis:
        return A
    elif sumrad == dis:
        return A",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    if True:
        0
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    return False",7945,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,,,7957,False
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in list(d.items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",7978,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",7995,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return b
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",8025,True
"def append2list(l1, l2=[]):
    for i in l1:
        if len(l2) <= 2:
            l2.append(i)
        else:
            l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def append2list(l1, l2=None):
    for i in l1:
        if l2 is None:
            l2 = []
        else:
            0
        l2.append(i)
    return l2",8034,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",8036,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",8049,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8057,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",8088,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",8106,True
"def maximum(s):
    if len(s) == 1:
        return s[0]
    else:
        maxi = maximum(s[1:])
        return l[0] if l[0] > maxi else maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",8130,True
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",8132,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            break
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",8133,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,,,8141,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",8145,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,,8146,False
"def sort(p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,,"def sort(a):
    i = 0",8168,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",8179,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def area(r):
    return 3.141 * r ** 2",8192,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",8206,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",8212,True
"def power():
    if x == 0:
        return 1
    return 2 * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",8221,True
"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",8228,True
"def reverse(b):
    a = b[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def reverse(a):
    return a[::-1]",8239,True
"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        d = {swap_me[key]: key for key in list(set(swap_me.keys)) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",8245,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,8246,False
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",8270,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",8284,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8308,True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",8309,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",8338,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",8348,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",8355,True
"def swap_keys_values(a):
    l = []
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",8377,True
"def quicksort(cabbages):
    if len(l) < 2:
        return l
    pivot = l[0]
    left_side = []
    right_side = []
    for n in cabbages[1:]:
        if n < pivot:
            left_side.append(n)
        else:
            right_side.append(n)
    return quicksort(left_side) + [pivot] + quicksort(right_side)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",8379,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    return sorted(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",8384,True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",8409,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,8418,False
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",8458,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,,,,8466,False
"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        return index(string, letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",8468,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8492,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8502,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",8528,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8531,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8544,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8545,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",8559,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",8569,True
"def square_area(x, y):
    area = x * y
    if 0 <= area:
        return area
    else:
        return -area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def square_area(l):
    if True:
        return l * l
    else:
        0",8609,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 <= (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",8617,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",8622,True
"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,,8631,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",8634,True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",8654,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",8669,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8678,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",8690,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8696,True
"def swap_keys_values(a):
    for i in a:
        tmp = i
        i = a[i]
        a[i] = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",8714,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",8722,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,8732,False
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",8733,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    if len(l) > 0:
        for i in l:
            if l.count(i) > 1:
                del new_dict[i]
                break
    elif False:
        0
    return new_dict
    return new_dict",8752,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,45fe5d71-35bd-4b87-b28c-71b204939543,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8781,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8797,True
"def maximum(list_1):
    i = 0
    total = 0
    while i < len(list_1):
        if int(list_1[i]) >= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        else:
            0
        i += 1
    return a",8798,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",8808,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,,,8809,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8812,True
"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",8835,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,,,8842,False
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif True:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",8858,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def area(r):
    return 3.141 * r ** 2",8863,True
"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",8868,True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",8870,True
"def swap_unique_keys_values(d):
    l = [(k, v) for k, v in d]
    z = []
    for c in l:
        if l.count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",8895,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",8897,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",8900,True
"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",8905,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    print(q)
    print(a, len(a))
    print(low, high)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            0
        else:
            0
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
        low = high
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8926,True
"def count_letters(s):
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    b = s.index(s[-1])
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(item, length=0):
    try:
        if True:
            item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)",8937,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if str(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",8938,True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        print(less)
        greater = [i for i in array if i >= piv]
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,8940,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",8942,True
"def rectangle_perimeter(x1, y1, x2, y2):
    perimeter = x1 + y1 + x2 + y2
    return perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015.0,,,"def rectangle_perimeter(n, m):
    result4 = n + m + n + m
    return result4",8950,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
        else:
            high = middle
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",8964,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",8977,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",8986,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9008,True
"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(vaules)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",9022,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    return D",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",9041,True
"def count_letters(s):
    if s == '':
        return total
    total += 1
    print(total)
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",9045,True
"def selection_sort(a):
    i = 0",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def selection_sort(a):
    return sorted(a)",9061,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",9081,True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",9094,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, a[i], a[len(a) - i - 1])
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,,,9095,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",9132,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9169,True
"def swap_unique_keys_values(d):
    l = [v for k, v in d]
    z = []
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",9178,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9179,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",9187,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",9201,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",9215,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",9216,True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",9263,True
"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",9264,True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",9277,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",9278,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(list(d.items()), key=lambda t: t[0])
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",9299,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",9313,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",9315,True
"def reverse(a):
    i = 0
    while i < len(a):
        return a[::-1]
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",9321,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9352,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9407,True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",9408,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9413,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3d19e1db-d496-420c-b077-41631364e4f7,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9414,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9446,True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",9477,True
"def reverse_list(l):
    if l == []:
        return none
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",9500,True
"def fibonacci(n):
    try:
        a = 0
        b = 1
        l = []
        c = 0
        while c != n:
            a += b
            a, b = b, a
            l.append(a)
            c += 1
        return l[int(len(l) - 1)]
    except:
        return 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if n == 0:
        if True:
            0
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",9504,True
"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return maximum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",9518,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",9576,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9609,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",9627,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",9634,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9635,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {:>2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,9675,False
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        print(d.count(v))
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",9680,True
"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",9694,True
"def area(r):
    x = (pi * r) ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def area(a):
    x = 3.141 * a ** 2
    return x",9698,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9715,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if x2 is _A:
        x2 = 0
    if r1 is _A:
        r1 = 1
    if y2 is _A:
        y2 = 0
    if y1 is _A:
        y1 = 0
    if r2 is _A:
        r2 = 1
    if (x2 - x1) ** 2 + (y2 - y1) ** 2 >= (r1 + r2) ** 2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",9740,False
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,,,9756,False
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def circle_circumference(r):
    return 2 * 3.14 * r",9765,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = (x2 - x1) ** 2 + (y2 - y1) ** 2
    dist2 = dist ** 0.5
    if dist2 < r1 + r2:
        return True
    else:
        return False",9767,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9783,True
"def circumference(r):
    a = 2 * pi * r
    return a",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",9784,True
"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
        print(tmp)
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",9796,True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",9806,True
"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",9814,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(tmp)
        i += 1
        return tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",9816,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9853,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = r1 + r2
    print((x1, x2, y1, y2, r1, r2))
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",9855,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high - low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9872,True
"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return maximum(a[:-1], tmp)",9895,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,"def area(r):
    return 3.141 * r ** 2",9927,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",9966,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 < distance:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 <= distance:
        return False
    else:
        return True",9970,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",9988,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",10004,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10005,True
"def _quicksort(array):
    if not array:
        return []
    else:
        pivot = array[0]
        less = [x for x in array if x < pivot]
        more = [x for x in array[1:] if x >= pivot]
        return quicksort(less) + [pivot] + quicksort(more)


def quicksort(l, a, b):

    def _quicksort(array):
        if not array:
            return []
        else:
            pivot = array[0]
            less = [x for x in array if x < pivot]
            more = [x for x in array[1:] if x >= pivot]
            return quicksort(less) + [pivot] + quicksort(more)
    l = _quicksort(l)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,10019,False
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        i = i + 1
        search(string[i + 1], letter)
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",10022,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10061,True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",10063,True
"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(len(a) - 1)
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,,,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",10085,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",10088,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,,,,10096,False
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",10098,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",10110,True
"def bsearch(a, q):
    start = 0
    end = len(a)
    while end > start:
        m = (start + end) / 2
        if a[m] < q:
            start = m + 1
        else:
            end = m
    return start",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10111,True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 1
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",10122,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fac2ee37-8224-43e0-9c23-7cc249889343,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10126,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",10129,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",10147,True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",10206,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,,10214,False
"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",10218,True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",10222,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",10237,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",10257,True
"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        less = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",10273,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[p] < a[j]:
                j = p
            j = j + 1
        i = i + 1
    swap(a, i, p)",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,10282,False
"def swap_unique_keys_values(d):
    a = [v for k, v in d.items]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",10284,True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",10303,True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",10319,True
"def search(string, letter):
    if string[0] == letter:
        return True
        test = 1
    else:
        search(string[1:], letter)
    if test != 1:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        if True:
            return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",10321,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,10324,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        search = (high + low) / 2
        assert low <= search < high
        if a[search] < q:
            low = search + 1
            assert a[low - 1] < q
        else:
            high = search
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10331,True
"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",10346,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,,,,10354,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = j + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",10359,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,,,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    if True:
        return a
    else:
        0",10374,True
"def walkback(a, q, i):
    while i > 1 and a[i - 1] == q:
        i -= 1
    return i


def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) / 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess - 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,,,10375,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    find_position_of_smallest(a, i)
    swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,,10393,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10397,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",10415,True
"def area(r):
    r = r ** 2
    a = 2 * 3.141 * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",10497,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",10518,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')
    print(type(l[1]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,10524,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",10551,True
"def fibonacci(a):
    if a == 0:
        return 0
    return 1 + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",10554,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(n)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",10581,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10588,True
"def fibonacci(N):
    if N == 0 or N == 1:
        return 1
    return fibonacci(N - 1) + fibonacci(N - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",10611,True
"def reverse_list(m):
    if len(m) == 1:
        return m
    else:
        return [m.pop()] + reverse_list(m)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",10622,True
"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    i = 0
    while i < len(keys):
        new_d[values[i]] = keys[i]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",10623,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",10700,True
"def fibonacci(a):
    if a == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",10701,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",10707,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",10737,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",10739,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",10749,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",10776,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 > (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",10787,True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",10792,True
"def area(r):
    r = r ** 2
    a = pi * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",10796,True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",10804,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        search = (high + low) / 2
        assert low <= search < high
        if a[search] < q:
            low = search + 1
            assert a[low - 1] < q
        else:
            high = search
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10810,True
"def selection_sort(a):
    for i in range(0, len(a)):
        p = i
        curr_low = p
        while p < len(a):
            if a[p] < a[curr_low]:
                curr_low = p
            p += 1
        tmp = a[i]
        a[i] = a[curr_low]
        a[curr_low] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p] and True:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",10833,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",10855,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",10856,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",10867,True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",10873,True
"def maximum(l):
    max = -1 * sum(l)
    for i in l:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",10884,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10888,True
"def reverse(a):
    i = 1
    while i < len(a):
        print(len(a) - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",10894,True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",10895,True
"def reverse(n):
    i = 0
    while i < len(a):
        print(n[len(n) - (i + 1)])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",10921,True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) // 2
    if i >= 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",10936,True
"def distance(x1, y1, x2, y2):
    disx = (x2 - x1) ** 2
    disy = (y2 - y1) ** 2
    dist = disx + disy
    return math.sqrt(dist)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if distance(x1, y1, x2, y2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,,10941,False
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",10945,True
"def double(n):
    print(2 * n)",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,"def double(n):
    return 2 * n",10962,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75fca52d-a61c-4d91-946c-d376c5569767,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",10998,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",11006,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2 + 1
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",11008,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",11027,True
"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    return a",11029,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    elif y1 is _A:
        y1 = 0
    elif r1 is _A:
        r1 = 1
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = True
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        if A:
            if A:
                0
            return A
    else:
        return False",11030,True
"def swap(l, i, j):
    temp = l[i]
    l[i] = l[j]
    l[j] = temp


def quicksort(l, p, r):
    if r <= p:
        return l
    q = p
    for j in range(p, r):
        if l[j] <= l[r]:
            swap(l, j, q)
            q += 1
    swap(l, q, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,,11031,False
"def power(x, n):
    if x == 0:
        return 1
    return x * power(x, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",11050,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",11055,True
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(uniqueness):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",11066,True
"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",11076,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 < (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",11102,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11114,True
"def minimum(l):
    l = sorted(minimum(l))
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def minimum(l):
    l.sort()
    return l[0]",11120,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",11156,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11204,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",11230,True
"def overlap(x1, y1, r1, x2, y2, r2):
    x1 = 0
    y1 = 0
    r1 = 1
    x2 = 0
    y2 = 0
    r2 = 1
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",11249,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",11255,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,,11264,False
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",11266,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",11269,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,,,11275,False
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",11312,True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(str(a[no]).count(lis))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",11323,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",11337,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",11347,True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",11348,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",11369,True
"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(len(a) - i)
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,,,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",11384,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a48376ed-7138-4481-a4da-74490838ea3e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11391,True
"def swap_unique_keys_values(d):
    a, b = [v for k, v in list(d.items())], [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",11392,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",11393,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11405,True
"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def circumference(r):
    return r * 2 * 3.141",11406,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11410,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",11437,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low == 0 and a[low - 1] < q
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11450,True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if v.count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",11468,True
"def minimum(s):
    if s == 1:
        return s[0]
    else:
        min = minimum(s[1:], s - 1)
        if s[0] < min:
            return s[0]
        else:
            return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",11515,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",11533,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",11539,True
"def index(string, letter, count):
    if count == len(string) - 1:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",11560,True
"def search(str, letter):
    list(map(split, str))
    if letter in str:
        return True
    else:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,9b929794-1500-4125-bf6c-79d74c111918,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",11572,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,,11591,False
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",11596,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",11603,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",11614,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",11618,True
"def rectangle_perimeter(r, n):
    rectancle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",11636,True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
        if True:
            0
    return new_dict
    return new_dict",11677,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11679,True
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",11687,True
"def count_letters(s):
    if s == ' ':
        return 0
    return 1 + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",11691,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",11712,True
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d31360b5-795b-45df-bd6f-a99df2683eae,2016.0,,,"def sort(a):
    i = 0",11719,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",11727,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",11736,True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    list = set()
    for k, v in in_dict.items:
        if v in out_dict():
            list.update([v])
            del out_dict[v]
        elif v not in list:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",11746,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",11755,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",11757,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,,11762,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",11771,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",11782,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",11802,True
"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016.0,,,,11827,False
"def index(s, letter, num):
    if num == len(s):
        print(-1)
        return
    if s[num] == letter:
        print(num)
        return
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",11849,True
"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",11863,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return bool(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",11871,True
"def minimum(s):
    if len(s) == 0:
        return 0
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",11894,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if list(d.items()).count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",11914,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",11915,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",11931,True
"def quicksort(l, start=0, end=None):
    if len(l) < 2:
        return l
    pivot = l[1]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",11938,True
"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",11941,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i != j:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,,11945,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i += 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,,11958,False
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",11976,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",11981,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if int(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",12010,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    else:
        0
    return -1",12029,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12032,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",12034,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12077,True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    print(a)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",12087,True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return letter",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",12090,True
"def overlap(x1, y1, r1, x2, y2, r2):
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",12094,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12105,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,,12119,False
"def reverse(n):
    a = []
    i = 0
    j = len(n) - 1
    while i < len(n) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(list):
    reversed = []
    i = len(list) - 1
    while i >= 0:
        reversed.append(list[i])
        i = i - 1
    return reversed",12141,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",12167,True
"def swap_unique_keys_values(d):
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",12169,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",12191,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,652b3384-e559-46c5-81db-1bf2117db63b,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12196,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12235,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12236,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n[i]
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",12243,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12256,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,,12257,False
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def circle_area(r):
    return r * r * 3.14",12273,True
"def search(string, letter):
    test = 0
    if string[0] == letter:
        test = 1
    else:
        search(string[1:], letter)
    if test == 0:
        return False
    else:
        return True",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    else:
        0
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",12275,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,,12290,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,12291,False
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",12299,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12314,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",12316,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",12322,True
"def minimum(lis, p=0):
    if lis == []:
        return p
    n = pop(lis)
    if n > p:
        p = n
    return minimum(lis)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",12333,True
"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",12334,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",12337,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 <= sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2):
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",12354,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a0677365-0929-4e2e-8719-3729105927cd,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12361,True
"def swap_unique_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    new_dictionary.pop(7)
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",12379,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",12381,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",12395,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016.0,,,,12424,False
"def selectionsort(a):
    start = time.time()
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",12434,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",12436,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12485,True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",12495,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",12496,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,,,"def fibonacci(n):
    if True:
        fib = [0, 1]
        i = 2
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]
    else:
        0",12509,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 or c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",12517,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12519,True
"def fibonacci(n):
    a = 0
    b = 1
    l = []
    while a < n:
        a += b
        a, b = b, a
        l.append(a)
    return l(len.l() - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",12527,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",12531,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",12539,True
"def circumference(r):
    ans = 2 * pi * r
    return ans",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",12555,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",12563,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,36685ead-53f8-40af-a908-4c048278dc6b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",12572,True
"def reverse_list(l):
    if len(l) == 2:
        return l[1].append(l[0])
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",12588,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(no.count(a))
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",12615,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 >= (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",12655,True
"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",12663,True
"def reverse(a):
    i = 0
    a = a[a:-i - 1]
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",12670,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",12713,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",12724,True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",12736,True
"def overlap(x1, y1, r1, x2, y2, r2):
    dist = math.sqrt(x2 - x1) ** 2 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",12776,True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        print(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",12777,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,,,12805,False
"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",12830,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",12871,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,,,12879,False
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    else:
        0
    return -1",12889,True
"def area(n):
    return pi * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",12897,True
"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def circumference(r):
    return r * 2 * 3.141",12899,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",12920,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[j] < a[p]:
            p = j
            i = i + 1
        return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,12930,False
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",12962,True
"def reverse(a):
    p = i
    j = i + 1
    while j < len(a):
        if int(a[j]) > int(a[p]):
            p = j
        j = j + 1
    return p",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        if True:
            b.append(a[len(a) - 1 - i])
            i = i + 1
    return b",12963,True
"def swap_keys_values(d):
    return {v: k for v, k in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",12972,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,,13004,False
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",13026,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13031,True
"def fibonacci(n):
    if n == 0:
        return 0
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",13038,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",13041,True
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        print('HEYA')
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",13056,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13072,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
            i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",13081,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",13090,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - (list(set(d.values())) - list(d.values()))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",13118,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,,13138,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",13166,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13167,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(str(no).count(list(a.values())))
        if str(no).count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",13179,True
"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",13183,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,,13209,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",13229,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",13234,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",13241,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13244,True
"def power(m, n):
    if n == 0:
        return 0
    return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",13255,True
"def circumference(r):
    c = 2 * pi * r
    return c",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",13261,True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",13268,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < low:
            high = mid
        else:
            low = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13280,True
"def index(str, letter):
    for item in ls:
        return str - 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",13295,True
"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print([new_dict])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",13309,True
"def fibonacci(n):
    a = 0
    b = 1
    while a < n:
        a += b
        a, b = b, a
        print(a)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",13323,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",13329,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",13335,True
"def swap_unique_keys_values(d):
    seen = []
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",13341,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",13346,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    if True:
        0
    return low",13349,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13364,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,,,13369,False
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if len(v) > 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",13376,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13392,True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) // 2
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",13396,True
"def swap_keys_values(d):
    list(zip(list(d.values()), list(d.keys())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",13411,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",13413,True
"def square_area(n):
    result = n * n
    return sq",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def square_area(n):
    sq = n * n
    return sq",13422,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",13438,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",13441,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n - 1 + (n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",13443,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    print((distance, radii))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",13447,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = r1 - r2
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",13455,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",13468,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",13478,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    sumrad = r1 + r2
    xs = (x2 - x1) ** 2
    ys = (y2 - y1) ** 2
    inside = xs + ys
    dis = math.sqrt(inside)
    if dis < sumrad:
        return True
    elif sumrad < dis:
        return A
    elif sumrad == dis:
        return A",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    if True:
        0
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    return False",13485,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",13498,True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if False:
            0
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",13505,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",13506,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,,13511,False
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a4f49b67-25e5-43c2-a48c-827c1919659f,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",13518,True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def maximum(a):
    quicksort(a, 0, len(a) - 1)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,13521,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,,,"def area(r):
    return 3.141 * r ** 2",13522,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13532,True
"def power(i, power):
    if i == i ** power:
        print(i)
        return i
    power(i * i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",13538,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13540,True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if i[1] not in m:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",13577,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13588,True
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n[-1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",13589,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",13601,True
"def area(x):
    return pi * x ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def area(r):
    return 3.141 * r ** 2",13616,True
"def sort(a):
    i = 1
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",13622,True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",13626,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",13635,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def area(r):
    return 3.141 * r ** 2",13651,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print('[' + ', '.join(sorted(l, key=my_function)) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,13654,False
"def distance(x1, y1, x2, y2):
    disx = (x2 - x1) ** 2
    disy = (y2 - y1) ** 2
    dist = disx + disy
    return math.sqrt(dist)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if distance(x1, y1, x2, y2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,,13697,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=lambda x: x[1]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",13698,True
"def power(i, power):
    if i == i ** power:
        return i
    power(i * i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",13702,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",13703,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",13725,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",13730,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
            for s in list(d.items()):
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    if len(l) > 0:
        for i in l:
            if l.count(i) > 1:
                del new_dict[i]
                break
    elif False:
        0
    return new_dict
    return new_dict",13758,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",13774,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def area(r):
    return 3.141 * r ** 2",13785,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,13789,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,,13842,False
"def reverse(test):
    n = len(test)
    x = ''
    for i in range(n - 1, -1, -1):
        x += test[i]
    return x",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,"def reverse(a):
    if True:
        0
    else:
        0
    b = a[::-1]
    return b",13862,True
"def minimum(l):
    l = l.sort()
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(l):
    l.sort()
    return l[0]",13863,True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",13866,True
"def power(m, n):
    if n == 0:
        return 0
    else:
        return n ** power(m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",13887,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance and distance <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",13914,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",13915,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",13945,True
"def circle_area(n):
    ca = 3.14 * n",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def circle_area(r):
    return r * r * 3.14",13951,True
"def reverse(a):
    a = a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",13955,True
"def overlap(x1, y1, r1, x2, y2, r2):
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",13966,True
"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for k in list(d.keys()):
        if k in d1:
            d1[k] += 1
        else:
            d1[k] = 1
    for k, v in list(d.items()):
        if d1[k] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2",13972,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",13982,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1])])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",13987,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",13997,True
"def append2list(l1, l2=''):
    if l2 == '':
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",13998,True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",14054,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d[0:len(d) - 1]:
        for k in di[1:]:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",14086,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",14096,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14097,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,,14103,False
"def selection_sort(a):
    for i in range(len(a)):
        j = 1
        if a[j] > a[i]:
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def selection_sort(a):
    for i in range(len(a)):
        if True:
            mini = min(a[i:])
            min_index = a[i:].index(mini)
            a[i + min_index] = a[i]
            a[i] = mini
    return a",14105,True
"def fibonacci(n, last=0, curr=1):
    if not n:
        return curr
    return fibonacci(n - 1, curr, last + curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14110,True
"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",14121,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def area(r):
    return 3.141 * r ** 2",14132,True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",14133,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(distance)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",14146,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",14165,True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",14170,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",14173,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",14183,True
"def power(n, mult):
    if mult == 0:
        return 0
    return n ** mult
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",14185,True
"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",14187,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",14191,True
"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    print(d)
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",14202,True
"def square_area(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area
    else:
        return -area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,,,"def square_area(l):
    if True:
        return l * l
    else:
        0",14239,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,,,14248,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14254,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",14271,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",14276,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",14277,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14283,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14291,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",14304,False
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",14321,True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",14322,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",14328,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",14331,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14333,True
"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",14366,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14375,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    if True:
        0
    if True:
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]",14377,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,,14386,False
"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",14395,True
"def swap_keys_values(d):
    tmp = ''
    for c in d:
        tmp = d[key]
        d[key] = value
        value = tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",14411,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",14413,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",14424,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14432,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14459,True
"def selectionsort(a):
    a = a[:]
    sortedlist = []
    while a:
        smallest = min(a)
        a.remove(smallest)
        sortedlist.append(smallest)
    return sortedlist",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            else:
                0
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",14487,True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",14498,True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    if len(l) > 0:
        for i in l:
            if l.count(i) > 1:
                del new_dict[i]
                break
    elif False:
        0
    return new_dict
    return new_dict",14534,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",14551,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",14569,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
        q += 1
    j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,,14592,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,,14614,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",14632,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap(a, i, p)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,,14646,False
"def reverse_list(l):
    if l == []:
        return []
    new = l[1:]
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",14650,True
"def swap_keys_values():
    {v: k for k, v in list(sys.argv[1].items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",14667,True
"def square_perimeter(n):
    sqaure_perimeter = (4)(n)
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    square_perimeter = 4 * n
    return square_perimeter",14684,True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",14710,True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    while i < n:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",14749,True
"def fibonacci(n, l=0, c=1):
    if not n:
        return c
    return fibonacci(n - 1, c, l + c)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",14752,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",14753,True
"def search(s, letter):
    if letter in s:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",14757,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",14782,True
"def maximum(l, old_max=None):
    item = l[0]
    if item != None:
        new_l = l[1:]
        maximum(new_l, item if old_max == None or item > old_max else old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",14802,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = (x2 - x1) ** 2 + (y2 - y1) ** 2
    dist2 = dist ** 0.5
    if dist2 < r1 + r2:
        return True
    else:
        return False",14822,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14829,True
"def reverse(a):
    return [i for i in range(len(a), 0, -1)]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def reverse(a):
    return a[::-1]",14842,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,,14859,False
"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
        return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict",14871,True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if len(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",14872,True
"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",14905,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",14912,True
"def swap_keys_values(s):
    for k, v in list(my_dict.items()):
        del my_dict[k]
        my_dict[v] = k
    print(my_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",14972,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14977,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",14979,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",15005,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",15019,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",15042,True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",15050,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",15080,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",15092,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fobonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",15098,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(v, k) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",15103,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    while i < len(a):
        find_position_of_smallest(a, i).swap(a)
    swap(a, i, j).sort(a)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,,,15119,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",15179,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",15189,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) or x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",15200,True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []
    else:
        0",15203,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,15207,False
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",15213,True
"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",15224,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if no.count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",15240,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,,15253,False
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",15259,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",15273,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",15319,True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",15330,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",15352,True
"def index(string, letter, count):
    print(count)
    if count == len(string) - 1:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",15371,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,,,"def area(r):
    return 3.141 * r ** 2",15389,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i += 1
    return -1",15394,True
"def reverse_list(a, b=''):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",15410,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if False:
            0
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",15429,True
"def maximum(l):
    max = -1 * sum(l)
    for i in l:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",15440,True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    newlist = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    alltupps = sorted(alltupps)
    i = 0
    while i < len(alltupps) - 1:
        if alltupps[i][0] != alltupps[i + 1][0]:
            newlist.append(alltupps[i])
        else:
            i += 1
        i += 1
    if alltupps[-2][0] != alltupps[-1][0]:
        newlist.append(alltupps[-1])
    return dict(newlist)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        if True:
            0
        i = i + 1
    return d",15443,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,,15448,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,15450,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",15453,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",15464,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",15473,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return l[-1].append(reverse_list(s[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",15496,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15504,True
"def fibonacci(s):
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",15519,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15533,True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if i[1].count(d) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",15562,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,,15574,False
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",15580,True
"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",15609,True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        print(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",15618,True
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",15653,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",15666,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",15679,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 > (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",15693,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",15717,True
"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",15723,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    else:
        0
    return -1",15732,True
"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if maximum == A:
            maximum = c
        elif c > maximum:
            maximum = c
    return maximum",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",15763,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",15769,True
"def swap_keys_values():
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",15801,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15821,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",15836,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=lambda t: t[0]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",15842,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15850,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",15884,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",15923,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",15930,True
"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,,15931,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",15942,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",15943,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    print(unique)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",15951,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    if A:
        0
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if A:
        0
    if dist_p < dist_r:
        return True
    else:
        return A",15954,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,,,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",15958,True
"def search(x, letter):
    if type(x) == str and letter.isalpha():
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",16003,True
"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return quicksort(greater) + equal + quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,16028,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16050,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",16053,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",16069,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16074,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",16084,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",16089,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",16134,True
"def minimum(s):
    if n == 1:
        return s[0]
    else:
        min = minimum(s[1:], n - 1)
        if s[0] < min:
            return s[0]
        else:
            return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",16142,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",16169,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(str(a[no]))
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",16177,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,,16187,False
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * (x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",16207,True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(d1)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",16215,True
"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",16231,True
"def count_letters(s):
    if len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",16236,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        print(True)
    else:
        print(False)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",16243,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    print(i)
    print(z)
    print(x)
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",16251,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",16255,True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (lo + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16256,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",16258,False
"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,,16263,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",16267,True
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def circle_circumference(r):
    return 2 * 3.14 * r",16269,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",16296,True
"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    print(swapped_d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",16299,True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,17658437-97b1-4a8a-ac6f-a63a54536e33,2016.0,,,"def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",16314,True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)
    else:
        return False
    i = i + 1",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",16328,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",16335,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",16337,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6fb1b046-1d89-4162-8437-722d44e22f50,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16345,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",16352,True
"def sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",16379,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - list(set(d.values()))
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",16406,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16407,True
"def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}
    new_dict1 = new_dict.copy()
    for k in new_dict1:
        l.append(""({}, '{}')"".format(int(k), new_dict1[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",16438,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,,16439,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def area(r):
    return 3.141 * r ** 2",16466,True
"def minimum(l):
    a = l[len(l) - 1]
    if len(a) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",16495,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",16505,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",16508,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",16524,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,,,,16534,False
"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",16540,True
"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",16554,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return True
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",16574,True
"def swap_keys_values(a):
    for k, v in a.items:
        tmp = k
        k = v
        v = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",16575,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance_centre = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = r1 + r2
    return distance_radius > distance_centre",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",16625,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",16643,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) and str[i] != letter:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,0b0c54f1-c900-465f-a33a-5c22b0497dc4,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1",16648,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",16655,True
"def area(r):
    y = pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",16658,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)
    return str, letter",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",16664,True
"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",16728,True
"def append2list(l1, l2=[]):
    if l2 != None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def append2list(l1, l2=[]):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",16729,True
"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",16731,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16756,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    for t in s:
        total += 1
    print(total)
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    count = 0
    for c in s:
        count += 1
    return count",16784,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",16794,True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",16795,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",16804,True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = str(a.pop())
    if int(test) < int(minimum) or int(minimum) == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",16831,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",16836,True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",16838,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(values)
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",16858,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16900,True
"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",16905,True
"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        if True:
            return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",16911,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",16926,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]].append(reverse_list(s[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",16959,True
"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",16961,True
"def search(s, letter):
    print(letter in s)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter and True:
            0
        i += 1
    return False",16982,False
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique in values:
        swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",16992,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",16994,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) <= R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",17004,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",17026,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17037,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def area(r):
    return 3.141 * r ** 2",17041,True
"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016.0,,,,17059,False
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",17060,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(k, v) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",17074,True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo != hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) // 2 + 1 if arr[-1] == tgt else (lo + hi) // 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17085,True
"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",17088,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(str(a[no]))
    dir = {}
    for i in a:
        if lis.count(str(a[no])) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",17106,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if False:
            0
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",17136,True
"def maximum(a):
    highest = 0
    for e in a:
        if e > highest:
            highest = e
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",17143,True
"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",17151,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",17160,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",17163,True
"def search(string, letter):
    if not i:
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",17180,True
"def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,,17185,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,,17190,False
"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,,17191,False
"def quicksort(l, start=0, end=None):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",17210,True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.sorted().items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",17211,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17222,True
"def index(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",17227,True
"def maximum(list_1):
    i = 0
    total = 0
    while i < len(list_1):
        if int(list_1[i]) >= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        else:
            0
        i += 1
    return a",17233,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17235,True
"def rectangle_perimeter(c):
    return (c + c) * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def rectangle_perimeter(l, w):
    return 2 * (l + w)",17247,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",17248,True
"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",17265,True
"def reverse_list(l):
    if l == []:
        return []
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",17286,True
"def minimum(a, minimum=None):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == None:
        return minimum(a, test)
    else:
        return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",17288,True
"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
        c += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",17294,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",17296,True
"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    print(sorted(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",17325,True
"def minimum(a):
    if a.pop() < a[-1]:
        tmp = a.pop()
    if a == []:
        return tmp
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",17326,True
"def swap_unique_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",17341,True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",17349,True
"def reverse_list(l):
    return l.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def reverse_list(l):
    return l[::-1]",17404,True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",17424,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for k, v in sorted(items)}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",17425,True
"def circumference(radius):
    return 2 * pi * radius",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",17434,True
"def swap_unique_keys_values(d):
    items = set(d.items())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    print(items)
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",17439,True
"def selection_sort(a):
    for i in range(len(a)):
        least = i
        for k in range(i + 1, len(a)):
            if a[k] < a[least]:
                least = k
        tmp = a[i]
        a[i] = a[k]
        a[k] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p] and True:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",17465,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",17509,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def area(r):
    return 3.141 * r ** 2",17530,True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17542,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",17554,True
"def reverse_list(l):
    if not l:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",17560,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",17565,False
"def minimum(l):
    a = l[0]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l[:-1]):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",17575,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",17581,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",17591,True
"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return quicksort(greater, b, c) + equal + quicksort(less, b, c)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,17609,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",17623,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17648,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",17649,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,"def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",17651,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17661,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        print(a)
        temp = a
        a = b
        b = temp + b
    return a",17674,True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",17675,True
"def swap_unique_keys_values(d):
    new_dict = dict()
    for k in d:
        v = d.get[k]
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",17682,True
"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",17690,True
"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",17712,True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",17713,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17735,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9d69cd84-adaa-42a8-9530-416762b34c13,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17737,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = i",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,,17766,False
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",17769,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",17802,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low, high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17821,True
"def partition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]
    return q


def quicksort(a, q, r):
    if r <= q:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,,17831,False
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if no.count(lis) > 1:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",17874,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return index",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",17903,True
"def circumference(r):
    y = 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",17906,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17911,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j += 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",17914,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",17925,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",17941,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",17943,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(no.count(list(a.values())))
        if no.count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",17953,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",17978,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(tmp)
        i += 1
        return tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",17995,True
"def power(m, n):
    if n == 0:
        return 0
    return n ** m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",18022,True
"def reverse(a, i, j):
    a = []
    i = 0
    j = 0
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",18033,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    for i in range(len(a) / 2):
        swap(a, i, len(a) - i - 1)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,,18050,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18062,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,,,18108,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    print(diatance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",18113,True
"def swap_unique_keys_values(d):
    store = {}
    for key in d:
        for k in d:
            if d[key] == d[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        if False:
            0
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict",18140,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",18156,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",18160,True
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",18164,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",18176,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",18178,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",18185,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18192,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",18206,True
"def reverse(a):
    a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",18221,True
"def reverse(a):
    i = 0
    j = len(a)
    while i < len(a):
        tmp = a[i]
        a[i] = a[j - i]
        a[j - i] = tmp
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    b = []
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i += 1
    return b",18225,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,,18235,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",18237,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18240,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,,,18263,False
"def reverse(a):
    import sys
    a = sys.stdin.readlines()
    i = 0
    b = []
    while i < len(a):
        f = a[len(a) - i - 1]
        i = i + 1
        b.append(f.rstrip())
    print(b)
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,,,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",18264,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(str(no).count(a))
        if str(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",18278,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",18282,True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",18286,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",18297,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",18309,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return x",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",18310,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18313,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18328,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    search = (high + low) / 2
    while high != low and a[search] != q:
        search = (high + low) / 2
        if a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        if True:
            mid = (high + low) // 2
            if a[mid] < q:
                low = mid + 1
            high = mid
    return low",18329,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18354,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18358,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",18398,True
"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    print(new_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",18413,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",18428,True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",18431,True
"def sort(a):
    p = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",18448,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18449,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",18469,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f42085d-bb24-498f-9d99-42137e03966f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18490,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            swap(a, i, j)
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,18492,False
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += a[no]
    dir = {}
    for i in a:
        if lis.count(str(a[no])) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",18511,True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",18535,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def area(r):
    return 3.141 * r ** 2",18541,True
"def area(r):
    x = pi * r ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def area(a):
    x = 3.141 * a ** 2
    return x",18555,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",18577,True
"def index(steve, letter):
    return steve.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def index(str, letter, n):
    return str.find(letter)",18578,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",18622,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",18626,True
"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",18656,True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if not low < high:
            break
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18665,True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + i
            else:
                greater = greater + i
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,18668,False
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",18677,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,,18690,False
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",18694,True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",18749,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18754,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = low
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18758,True
"def area(r):
    x = pi * r ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def area(a):
    x = 3.141 * a ** 2
    return x",18763,True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",18777,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",18783,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,539a3d07-c706-42ed-bbbe-db66980d170f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",18810,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",18814,False
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = (r1 + r2) ** 2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",18853,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",18856,True
"def rectangle_perimeter(n):
    rp = n + n + m + m
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def rectangle_perimeter(n, a):
    rp = n + n + a + a
    return rp",18871,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",18880,True
"def area(r):
    return 3.141 * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,,,"def area(r):
    return 3.141 * r ** 2",18897,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = set(d.values())
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",18926,True
"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def append2list(l1, l2=[]):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",18931,True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",18932,True
"def minimum(a):
    if a == []:
        return 1
    tmp = a.pop()
    if tmp < minimun(a):
        return tmp",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",18959,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,,18965,False
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {:2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,18971,False
"def circumference(radius):
    return 2 * pi * radius",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",19005,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",19015,True
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",19021,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",19036,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a42703e-da42-4824-8b83-b6f291ad71be,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19042,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19057,True
"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",19058,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,"def area(r):
    return 3.141 * r ** 2",19059,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",19072,True
"def fibonacci(h):
    if h == 0 or h == 1:
        return 1
    return fibonacci(h - 1) + fibonacci(h - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",19074,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] < l[1]:
        l.remove(l[0])
    else:
        l.remove(l[1])
    return minimum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",19086,True
"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def reverse(a):
    return a[::-1]",19087,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,,,"def area(r):
    return 3.141 * r ** 2",19092,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - list(set(d.values))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",19093,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
    d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",19112,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",19156,True
"def search(string, letter, count):
    i = 0
    if string[i] == letter:
        return True
    else:
        count = i + 1
        search(string[count], letter, count)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",19179,True
"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",19180,True
"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,19191,False
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",19196,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",19209,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,,,,19250,False
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 and ((
        x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",19255,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",19261,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        fib = [0, 1]
        i = 2
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]
    else:
        0",19270,True
"def search(str, letter):
    if letter in str:
        print('True')
    elif letter not in str:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    A = False
    i = 0
    if letter in string:
        return True
    elif A:
        0
    return A",19306,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,,19319,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a0677365-0929-4e2e-8719-3729105927cd,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19331,True
"def reverse_list(a, b=[]):
    if a == []:
        tmp = b
        b = []
        return tmp
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",19334,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l <= r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",19346,True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",19349,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if a >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",19354,True
"def reverse_list(n):
    if len(n) == 1:
        return n
    else:
        return [n[-1]] + reverse_list(n[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",19369,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    if A:
        0
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if A:
        0
    if dist_p < dist_r:
        return True
    else:
        return A",19391,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,ccb230ef-8610-4130-8882-d0643817d9b4,2016.0,,,,19396,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",19402,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 <= (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",19410,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",19413,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",19423,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def area(r):
    return 3.141 * r ** 2",19450,True
"def swap(a, x, y):
    tmp = a[x]
    a[x] = a[y]
    a[y] = tmp
    return a


def selection_sort(a):
    k = 0
    while k < len(a):
        j = k + 1
        p = k
        tmp = 0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        swap(a, k, p)
        k += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,,,,19451,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",19463,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19465,True
"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",19469,True
"def selection_sort(a):
    p = 0
    j = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",19471,True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * base
        new_exp = exp - 1
        return power(new_base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",19500,True
"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",19511,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,415d4431-1b98-4241-a978-02dc16bf556e,2016.0,,,,19552,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",19574,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",19581,True
"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a.remove(i)
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",19587,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return z",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",19599,True
"def minimum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",19613,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",19620,True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",19624,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",19627,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",19633,True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",19674,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1],
        reverse=True)])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",19677,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",19683,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",19693,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19696,True
"def reverse(a):
    a = []
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",19741,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",19748,True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    i = tmp
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,,,19786,False
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",19804,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",19805,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",19812,True
"def swap_keys_values(d):
    d2
    for key in d:
        d2[d[key]] = key
    return d2",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",19820,True
"def append2list(l1, l2=[]):
    for i in l1:
        if len(l2) <= 2:
            l2.append(i)
        else:
            l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def append2list(l1, l2=None):
    for i in l1:
        if l2 is None:
            l2 = []
        else:
            0
        l2.append(i)
    return l2",19827,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",19860,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2015.0,,,"def circumference(r):
    return 2 * 3.141 * r",19874,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0])))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",19880,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = 0
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if q[mid] < low:
                high = mid
            else:
                low = mid
            print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    A = False
    low = 0
    high = len(a)
    if A:
        0
    if A:
        0
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19882,True
"def swap_unique_keys_values(d):
    a = [v for k, v in d.items]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",19893,True
"def swap_keys_values(k, v):
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",19895,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19906,True
"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
    return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",19911,True
"def bsearch(a, q):
    low = 0
    high = 0
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",19912,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",19917,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",19921,True
"def _quicksort(array):
    if array <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,19961,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",19976,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def area(r):
    return 3.141 * r ** 2",19989,True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",20011,True
"def area(n):
    return pi * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def area(r):
    return 3.141 * r ** 2",20016,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20052,True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",20060,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",20079,True
"def minimum(a):
    m = a[0]
    for n in a:
        if n < m:
            n == m
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",20082,True
"def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def selection_sort(a):
    if True:
        0
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        a[i] = mini
    return a",20110,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fa7e9f17-de07-4868-ab69-667438d7becd,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20112,True
"def swap_unique_keys_values(dict):
    return {v: k for k, v in list(dict.items()) if dict.values.count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",20137,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",20138,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def area(r):
    return 3.141 * r ** 2",20188,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",20210,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",20212,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20233,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",20235,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, tmp)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,20240,False
"def fibonacci(n):
    i = 0
    c = i + 1
    while i < n:
        if n[i] == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",20253,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    print(lis)
    for i in a:
        if no.count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",20258,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,,20268,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",20288,False
"def count_letters(line=''):
    print(len(line))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def count_letters(line=''):
    return len(line)",20335,True
"def power(m, n):
    if m == 0:
        return 1
    else:
        m = m ** n
        return n * power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",20343,True
"def parition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]


def quicksort(a, p, r):
    if r <= p:
        return
    else:
        q = parition(a, p, r)
        quicksort(a, p, q - 1)
        quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,,20344,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",20345,True
"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",20348,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum()",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",20350,True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,,,20357,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if not low < high:
            break
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",20369,False
"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    print(list(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",20370,True
"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,20378,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20434,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    inside = r1 > dist + r2 or r2 > dist + r1
    return abs(r1 - r2) <= dist <= abs(r1 + r2) and inside != True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    return dist < r1 + r2",20442,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(set(d.values()) & set(d.values()))
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",20446,True
"def power(m, n):
    if n == 0:
        return 0
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",20480,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",20489,True
"def fibonacci(h):
    if h == 0 or h == 1:
        return 1
    return fibonacci(h - 1) + fibonacci(h - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",20499,True
"def swap_keys_values(swap_me):
    o = list({swap_me[key]: key for key in list(swap_me.keys())}.items())
    o.sort(key=lambda x: x[0])
    print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",20502,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",20508,True
"def fibonacci(n):
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[int(len(l) - 1)]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",20523,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",20531,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",20534,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",20562,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20563,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",20593,True
"def reverse_list(a):
    b = []
    for s in a:
        b.append(-1)
    return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",20633,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",20637,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",20644,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20665,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20667,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",20744,True
"def double(n):
    return n * n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def double(n):
    return n * 2",20758,True
"def reverse_list(l):
    if l == []:
        return []
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def reverse_list(l, s=None):
    if s == None:
        s = []
    if l == []:
        return s
    else:
        s.append(l[-1])
        l.remove(l[-1])
        return reverse_list(l, s)",20773,True
"def index(str, letter):
    return str.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def index(str, letter, n):
    return str.find(letter)",20786,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",20816,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",20818,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance == r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",20823,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    else:
        0
    return -1",20827,True
"def fibonacci(s):
    if s <= 1:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",20869,True
"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",20881,True
"def swap_keys_values(d):
    return {v: k for k, in v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",20894,True
"def swap_unique_keys_values(d):
    swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",20903,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",20939,True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",20978,True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",20982,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",21001,True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",21025,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",21026,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",21029,True
"def fibonacci(s):
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",21047,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",21049,True
"def index(str, letter):
    if pos == len(str):
        return 0
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",21057,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",21061,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",21066,True
"def reverse_list(n):
    if len(n) == 1:
        return n
    else:
        return [n[0]] + reverse_list(n[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",21071,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if a.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",21073,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",21086,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",21101,True
"def count_letters(s):
    b = s.index(s[-1]) + 1
    s = ''
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(item, length=0):
    try:
        if True:
            item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)",21110,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",21121,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",21168,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",21171,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",21186,True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([t])
            del out_dict[t]
        elif t not in blist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",21192,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",21213,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",21226,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",21251,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21262,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",21266,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def area(r):
    return 3.141 * r ** 2",21280,True
"def double(n):
    n = a * 2
    return n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,,"def double(n):
    n = n * 2
    return n",21305,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",21334,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",21352,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,,21366,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",21374,True
"def swap_unique_keys_values(d):
    items = set(d.items())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",21397,True
"def fibonacci(i):
    if i <= 1:
        return 1
    else:
        return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21431,True
"def maximum(l):
    return l.sort()
    l[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def maximum(n):
    n.sort()
    return n[-1]",21446,True
"def reverse_list(l):
    if not l:
        return []
    return reverse_list[0].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",21463,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",21464,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",21466,True
"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def quicksort(A, start, end):
    if end - start < 1:
        return
    if False:
        0
    i = j = start
    if True:
        while i <= end:
            if A[i] <= A[end]:
                A[i], A[j] = A[j], A[i]
                j += 1
            i += 1
        quicksort(A, start, j - 2)
        quicksort(A, j, end)",21469,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",21473,True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21477,True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        for i in l:
            if i >= minimum(l[1:]):
                return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(m):
    if len(m) == 1:
        return m[0]
    if True:
        a = m.pop()
        b = m.pop()
        if a < b:
            m.append(a)
        else:
            m.append(b)
        return minimum(m)",21491,True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('True')
    else:
        print('False')
    return",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",21503,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        m = ''
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
        d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",21523,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d != rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",21534,True
"def swap_keys_values(d):
    print(dict((v, k) for k, v in list(d.items())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",21560,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",21563,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21564,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            if False:
                0
            dir[a[i]] = i
    return dir",21567,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        ans = fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21587,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",21588,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21598,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return A
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,,21608,False
"def find_smallest(a, i):
    p = i
    q = i + 1
    while q < len(a):
        if a[q] < a[p]:
            p = q
        q += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,,21648,False
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    sort = sorted(d.items())
    d2 = [(v, k) for k, v in sort if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",21750,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",21778,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",21783,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",21787,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print('{} {} {} {} {} {}'.format(x1, y1, r1, x2, y2, r2))
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",21830,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x1 * x2) ** 2 + (y1 * y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",21838,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def area(r):
    return 3.141 * r ** 2",21843,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",21850,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",21871,True
"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",21895,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",21898,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",21899,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (v) == 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",21943,True
"def sort(a):
    p = i + 1
    i = i + 2
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",21944,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",21960,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,,22005,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",22039,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",22073,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",22079,True
"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def search(str, letter):
    if letter in str:
        if True:
            return True
    else:
        return False",22091,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    if True:
        0
    return low",22098,False
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    while i < n:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        num = num3 + num2
        num2 = num3
        num3 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",22121,True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        count = i + 1
        search(string[count], letter, count)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",22122,True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = (r1 + r2) * (r1 + r2)
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",22191,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,,22199,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,,,22204,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",22209,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",22217,True
"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",22240,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 >= (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",22246,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22267,True
"def count_letters(l):
    letter_sum = 0
    for k in l:
        letter_sum += 1
    return count_letters(l)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",22274,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",22277,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2 + 1) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",22285,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",22286,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22311,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",22324,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",22363,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = circle.Radius + Radius
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",22367,True
"def square_perimeter(n):
    sa = n * 4
    return sp",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",22375,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22392,True
"def square_perimeter(r):
    sqaure_perimeter = r * r * r * r
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    result1 = n + n + n + n
    return result1",22414,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n + 2
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",22422,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,,22429,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",22432,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",22433,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[0]
    return reverse_list(l[1:]).append(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",22442,True
"def sort(a):
    i = i + 1
    n = i
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",22445,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22449,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",22466,True
"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in a:
        if values.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",22474,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q or low == 0
        else:
            high = mid
            assert q <= a[high] or high == len(a)
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22475,True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) - 1
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",22482,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22507,True
"def minimum(l):
    a = l[len(l)]
    if len(a) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",22520,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a4f49b67-25e5-43c2-a48c-827c1919659f,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",22575,True
"def append2list(w, alist=[]):
    alist.append(w)
    return alist",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def append2list(l1, l2=[]):
    return l2 + l1",22578,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",22581,True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22590,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high - mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22596,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22610,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22622,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",22628,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",22648,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22713,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or r2 - r1 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",22724,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22764,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",22768,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,,,22776,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",22783,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",22787,True
"def circumference(n):
    return 2 * pi * n",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",22791,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",22793,True
"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",22801,True
"def swap_unique_keys_values(d):
    for w in list(d.keys()):
        if list(d.keys()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",22806,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,,,22809,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",22848,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items()) if v not in set.intersection(
        list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",22857,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",22860,True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
        d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",22906,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4733f087-f7f5-4b28-b898-9a23b2f59251,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",22913,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",22924,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",22925,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",22933,True
"def minimum(n):
    if len(n) == 1:
        return l[0]
    else:
        minr = minimum(n[1:])
        return n[0] if n[0] < minr else minr",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",22936,True
"def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = temp
        i = +1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = tmp
        i = +1",22963,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",22968,True
"def reverse(n):
    i = 0
    while i < len(n):
        print(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",22970,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",22986,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance == r1 + r2 - 1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",23015,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
    if (r1 + r2) ** 2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",23042,True
"def minimum(a):
    if a == []:
        return b[0]
    if a[-1] < a[-2]:
        b.append(a[-1])
        if len(b) > 1:
            if b[0] > b[1]:
                b.remove(b[0])
            else:
                b.remove(b[1])
    return minimum(a[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if True:
        if True:
            if l == []:
                return c
            if l[0] < c:
                return minimum(l[1:], l[0])
            else:
                return minimum(l[1:], c)",23053,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",23066,True
"def search(string, letter):
    if i not in search():
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",23077,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23081,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,,23084,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",23102,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return inddex(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",23116,True
"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(l, w):
    if True:
        return 2 * (l + w)",23117,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance_centre = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = r1 + r2
    return distance_radius > distance_centre",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",23118,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",23173,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",23185,True
"def fibonacci(n):
    return n * fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",23199,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",23204,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,,,23208,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",23215,True
"def quicksort(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        if True:
            array = greater + equal + less",23222,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter in string:
            return 'True'
        else:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",23223,True
"def swap(a, i, j):
    for k in a:
        a[i], a[j] = a[j], a[i]
    return a


def reverse(a):
    return swap(a)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,,23230,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23239,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",23266,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",23272,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",23304,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23314,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] > q:
            high = mid - 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if not low < high:
            break
        mid = (low + high) // 2
        if a[mid] < q:
            if False:
                0
            low = mid + 1
        else:
            high = mid
    return low",23322,True
"def swap_keys_values():
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",23328,True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",23336,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        return A
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",23352,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23371,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",23373,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",23379,True
"def square_area(n):
    results = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016.0,,,"def square_area(n):
    square_area = n * n
    return square_area",23389,True
"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        index(string, letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",23394,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",23407,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,23408,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23424,True
"def reverse(a):
    i = 0
    j = len(a)
    while i < len(a):
        tmp = a[i]
        a[i] = a[j - i]
        a[j - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",23454,True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        i = i + 1
        search(string[i], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",23471,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",23479,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,,,"def area(r):
    return 3.141 * r ** 2",23480,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return True
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",23485,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",23499,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(d1)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",23517,True
"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    else:
        0
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",23520,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23542,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",23553,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[mid + 1 - 1] < q
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23559,True
"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",23593,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",23605,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",23614,True
"def swapi(a, i, j):
    if a[j] < a[i]:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            swapi(a, i, j)
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015.0,,,,23622,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23632,True
"def area(x):
    y = pi * x * x
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,54b87e3d-5711-4a83-a6d1-ed14ae588835,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",23647,True
"def power(m, n):
    if n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",23659,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",23669,True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",23670,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",23680,True
"def selectionsort(l):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return l",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",23693,True
"def area(x):
    return pie * (x * x)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fac2ee37-8224-43e0-9c23-7cc249889343,2015.0,,,"def area(r):
    return 3.141 * r ** 2",23704,True
"def count_letters(s):
    if s == ' ':
        return 0
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",23727,True
"def selection_sort(a):
    i = 0
    j = 1
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",23743,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",23745,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",23777,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",23778,True
"def area(r):
    ans = pi * r ** 2
    return ans",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",23779,True
"def reverse_list(l, n=None):
    if l == []:
        return n
    if n == None:
        return reverse_list(l[:-1], [l[-1]])
    return reverse_list(l[:-1], n + [l[-1]])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def reverse_list(a, b=[], flag=True):
    if flag == True:
        b = []
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b, flag=False)",23784,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",23787,True
"def reverse_list(l):
    for i in reversed(l):
        return reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",23794,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",23795,True
"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def power(x, n):
    if True:
        0
    if False:
        0
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",23807,True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",23823,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h <= r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3a14771a-b55c-44f8-97ab-0376389e494c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h < r1 + r2",23871,True
"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop())
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",23890,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,,,"def area(r):
    return 3.141 * r ** 2",23895,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def area(r):
    return 3.141 * r ** 2",23898,True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",23903,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",23914,True
"def partition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]
    return q


def quicksort(a, p, r):
    if r <= q:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,,23929,False
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",23933,True
"def count_letters(s):
    b = s.index(s[-1])
    s = ''
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(item, length=0):
    try:
        if True:
            item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)",23935,True
"def swap_keys_values(swap_me):
    print(list({swap_me[key]: key for key in list(swap_me.keys())}.items())
        .sort(key=lambda x: x[0]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",23944,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,,,23953,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return float((x2 - x1 + (y2 - y1)) ** 0.5) < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",23974,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",23979,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,23995,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,,24013,False
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",24037,True
"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    A = False
    if A:
        0
    if str == '':
        return A
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",24062,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",24069,False
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",24079,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,,24082,False
"def reverse_list(l):
    if not l:
        return []
    return l[0].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",24090,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,,24099,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        find_position_of_smallest",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,24101,False
"def rectangle_perimeter(c):
    return (c + c) * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def rectangle_perimeter(l, w):
    return 2 * (l + w)",24102,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24103,True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",24121,True
"def minimum(numbers):
    if len(numbers) == 1:
        return numbers[0]
    elif numbers[0] < numbers[1]:
        numbers.remove[numbers[1]]
    else:
        numbers.remove(numbers[0])
    return minimum(numbers)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",24125,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",24145,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",24147,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a49f3af8-fb92-43d5-945c-abc11916e319,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24170,True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def maximum(a):
    quicksort(a, 0, len(a) - 1)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,24175,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24190,True
"def fibonacci(n, l=0, c=1):
    if not n:
        return c
    return fibonacci(n - 1, c, l + c)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24197,True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += tmp
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24206,True
"def power(m, n):
    if m == 0:
        return 1
    else:
        m = m ** n
        return power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",24216,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,"def area(r):
    return 3.141 * r ** 2",24254,True
"def fibonacci(s):
    if s == 0:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s + 5)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",24268,True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",24280,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24307,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24312,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",24323,True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24326,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",24327,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,539a3d07-c706-42ed-bbbe-db66980d170f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24344,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
    while i <= n:
        sum1 = n1 + n2
        n2 = n1
        n1 = sum1
        i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    fibN_2 = 0
    if False:
        0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",24390,True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",24403,True
"def index(str, letter, pos):
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        if True:
            return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",24404,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return c + 1
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",24414,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",24455,True
"def rectangle_perimeter(x1, y1, x2, y2):
    perimeter = x1 + y1 + x2 + y2
    return perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015.0,,,"def rectangle_perimeter(n, m):
    result4 = n + m + n + m
    return result4",24487,True
"def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a - 1, count)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a[:-1], count)",24492,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",24532,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",24546,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",24593,True
"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def area(r):
    return 3.141 * r ** 2",24598,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",24599,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24604,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,,24651,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def area(r):
    return 3.141 * r ** 2",24654,True
"def swap_unique_keys_values(d):
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",24662,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",24672,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    if True:
        0
    return low",24696,False
"def index(str, letter):
    i = 0
    if letter in str:
        letter = letter[0]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    return -1",24718,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,,,,24752,False
"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",24817,True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",24820,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",24836,True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",24843,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24873,True
"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",24882,True
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",24883,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",24887,True
"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if v.count(str(v)) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",24892,True
"def swap_unique_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    new_dictionary.pop(7)
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",24919,True
"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return maximum(mylist)
    else:
        mylist.remove(mylist[1])
        return maximum(mylist)",24920,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((int(x1) - int(x0)) ** 2 + (int(y1) - int(y0)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",24964,True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,,24965,False
"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",24972,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[k]
        a[k] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",24975,True
"def fibonacci(n, last=0, curr=1):
    if not n:
        return curr
    return fibonacci(n - 1, curr, last + curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",24994,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25012,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",25026,True
"def sort(a):
    i = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",25051,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",25053,True
"def area(radius):
    return pi * radius ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def area(r):
    return 3.141 * r ** 2",25057,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        print(0)
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, p + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,,25061,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",25062,True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    print(l)
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif True:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",25088,True
"def swap_unique_keys_values(d):
    d = list(d.items())
    for c in d:
        print(c)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",25089,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,,,25094,False
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,,25097,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",25145,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",25155,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",25162,True
"def sort(a):
    while i < len(a):
        find_position_of_smallest.sort(a)
        swap.sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",25164,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",25166,True
"def fibonacci(aaliyah, supercalifragilisticespialidotious=0, koppaberg=1):
    if not aaliyah:
        return koppaberg
    return fibonacci(aaliyah - 1, koppaberg, 
        supercalifragilisticespialidotious + koppaberg)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",25167,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25172,True
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    print(temp)
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",25173,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[low - i] < q
            low = mid + 1
        else:
            assert q <= a[high]
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25179,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75fca52d-a61c-4d91-946c-d376c5569767,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25192,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",25205,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25216,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",25260,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25273,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,,"def area(r):
    return 3.141 * r ** 2",25298,True
"def minimum(a):
    return sorted(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def minimum(l):
    return min(l)",25336,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",25340,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",25341,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",25367,False
"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",25370,True
"def circumference(r):
    a = 2 * pi * r
    return a",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",25376,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",25391,True
"def fibonacci(a):
    prev = 1
    curr = 1
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",25437,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",25451,True
"def append2list(w, alist=[]):
    alist.append(w)
    return alist",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def append2list(l1, l2=[]):
    return l2 + l1",25472,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    else:
        0
    return -1",25477,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25482,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    print((x1, y1, r1, x2, y2, r2))
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",25502,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",25504,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",25507,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",25534,True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    tmp = i
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,,,25547,False
"def swap_keys_values(d):
    return {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,ccb230ef-8610-4130-8882-d0643817d9b4,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",25566,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",25583,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(set(d.values()) & set(d.values()))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",25599,True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",25600,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return len(a)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25603,True
"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + a[-1]
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",25607,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
    i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",25619,True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25654,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",25676,True
"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",25716,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,,25733,False
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",25754,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",25758,False
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less += i
            else:
                greater += i
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,25763,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 >= dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",25771,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",25778,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",25800,True
"def fibonacci(a):
    if a == 0:
        return 1
    return 1 + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",25853,True
"def swap_unique_keys_values(d):
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",25878,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",25896,True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        power(base, exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",25907,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return int((x2 - x1 + (y2 - y1)) ** 0.5) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",25933,True
"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",25954,True
"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",25978,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",25983,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",25992,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - 1 - i
        t = a[i]
        a[i] = a[j]
        a[j] = t
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",26006,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",26018,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,,26032,False
"def swap_keys_values(a):
    dir = {}
    for i in a:
        dir[a[i]] = i
    return sorted(dir)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",26041,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,,26045,False
"def power(m, n):
    if n == 0:
        return 0
    else:
        return m ** power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",26047,True
"def reverse_list(a):
    if a == []:
        return a
    else:
        return reverse_list(a[1:]).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",26061,True
"def count_letters(inputed, counter=0):
    if inputed[:-1] == '':
        return counter
    if counter == 0:
        counter += 1
    return count_letters(inputed[:-1], counter + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",26074,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",26083,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            swap(a, i, j)
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,26098,False
"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        less = _quicksort(less)
        more = _quicksort(more)
        return less + more


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,26108,False
"def fibonacci(n):
    if n == 1 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",26111,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",26115,True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",26123,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,26129,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26133,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            high = mid
        else:
            low = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26146,True
"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a.rstrip()",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",26150,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26158,True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid - 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26180,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < p:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26187,True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return 0
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",26196,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,"def area(r):
    return 3.141 * r ** 2",26224,True
"def circumference(r):
    return 3.14 * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def circumference(r):
    return 3.141 * r * 2",26249,True
"def reverse_list(l):
    if l == []:
        return []
    return l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",26250,True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",26276,True
"def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[keys[i]] = vals[i]
    return dd",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[vals[i]] = keys[i]
    return dd",26298,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26307,True
"def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",26313,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-2]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",26326,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",26347,True
"def selectionsort(a):
    if len(a) != 2:
        a = [[], a]
    mini = min(a[1])
    a[1].remove(mini)
    a[0].append(mini)
    if len(a[1]) == 0:
        return a[0]
    else:
        return selectionsort(a)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            if True:
                j += 1
        i += 1",26356,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",26358,True
"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",26360,True
"def selectionsort(l, o=None):
    if not o:
        o = []
        l = l[:]
    if not len(l):
        return o
    small = min(l)
    l.remove(small)
    o.append(small)
    return selectionsort(l, o)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def selectionsort(array):
    for i in range(len(array)):
        if True:
            0
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",26406,True
"def swap_unique_keys_values(d):
    seen = list(d.keys())
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    for v, k in swapped_dict:
        if k in seen:
            break
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",26413,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26424,True
"def overlap(x1=0, x2=0, r1=1, y1=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",26445,True
"def reverse_list(l):
    if len(l) == 2:
        return list(''.join(l[1], l[0]))
    else:
        return list(''.join(reverse_list(l[1:]), l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",26465,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4733f087-f7f5-4b28-b898-9a23b2f59251,2016.0,,,,26476,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",26488,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",26535,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",26536,True
"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [(v, k) for k, v in d if d.count(c[1]) == 1]
    print(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",26592,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",26597,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26626,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,,"def area(r):
    return 3.141 * r ** 2",26632,True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",26638,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",26646,True
"def minimum(l):
    min = sum(l)
    for i in l:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",26663,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",26679,True
"def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        d[d_0[key]] = key
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",26690,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        k = dir[a[i]]
        if k not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",26699,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,,26708,False
"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)


def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def minimum(l):

    def quicksort(A, p, r):
        if r <= p:
            return
        q = partition(A, p, r)
        quicksort(A, p, q - 1)
        quicksort(A, q + 1, r)

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    return quicksort(l, 0, len(l) - 1)[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,,26741,False
"def double(n):
    n = n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def double(n):
    return n * 2",26776,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif a[mid] == q:
            return mid
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            if True:
                low = mid + 1
            elif False:
                0
        else:
            high = mid
    return low",26777,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    radii = r1 + r2
    return radii > dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",26779,True
"def selectionsort(a):
    a = a[:]
    out = []
    if a:
        smallest = min(a)
        a.remove(smallest)
        out.append(smallest)
    return out",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            elif False:
                0
            j += 1
        i += 1",26827,True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    for k, v in list(d.items()):
        if values.count(v) == 1:
            d2[v] = k
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",26833,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,,,26843,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            if True:
                0
            low = mid + 1
        high = mid
    return low",26857,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",26870,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def area(r):
    return 3.141 * r ** 2",26874,True
"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return list(listt[-1]) + reverse_list(listt[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",26877,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q and a[search - 1] != q:
            return search
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            if a[mid] < q:
                if True:
                    low = mid + 1
            else:
                high = mid
    return low",26881,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",26882,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",26898,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def area(r):
    return 3.141 * r ** 2",26901,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",26911,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",26927,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if (k, v) not in set.
        intersection(list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if [v for v in list(d.values()
        )].count(v) == 1}",26942,True
"def count_letters(s):
    try:
        b = s.index(s[-1]) + 1
    except IndexError:
        return 0
    s = ''
    if s == '':
        return b
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(item, length=0):
    try:
        item[0]
    except IndexError:
        return length
    if True:
        item = item[1:]
        length += 1
        return count_letters(item, length)",26953,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9dea5530-0f82-4127-b25f-20c784224a03,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",26955,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",26957,True
"def swap_unique_keys_values(d):
    new = {}
    for k in d:
        v = d.get(k)
        if v in new:
            del ne[v]
        else:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",26976,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",26995,True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",27012,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",27033,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    deli = []
    for k, v in list(d.items()):
        unique.append(v)
    for v in unique:
        if unique.count(v) > 1:
            deli.append(v)
    for v in unique:
        try:
            if v in deli:
                del unique[v]
        except:
            continue
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        if True:
            0
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        else:
            0
        j += 1
    return swapped_unique_d",27040,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,17658437-97b1-4a8a-ac6f-a63a54536e33,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27041,True
"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * (n, m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,,"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * power(n, m - 1)",27055,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",27057,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",27063,True
"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maximum(n[1:])
    return n[0] if n[0] > maxr else minr",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",27080,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    p = i
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,,27109,False
"def swap_keys_values(d):
    e = {}
    for k, v in d:
        e[v] = k
    return e",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",27131,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f42085d-bb24-498f-9d99-42137e03966f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27141,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",27167,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",27178,True
"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",27201,True
"def count_letters(string_):
    len(string_)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def count_letters(s):
    return len(s)",27211,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,794362b7-cbcd-4bea-bafb-7967c266e248,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27213,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        fib = [0, 1]
        i = 2
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]
    else:
        0",27229,True
"def reverse(a):
    print(a[::-1])",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def reverse(a):
    return a[::-1]",27245,True
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",27255,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    if A:
        0
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if A:
        0
    if dist_p < dist_r:
        return True
    else:
        return A",27268,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",27275,True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        power(base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",27282,True
"def minimum(l):
    min = inf
    for item in l:
        min = item if item < min else min
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min",27292,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print((x1, y1, r1, x2, y2, r2))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",27323,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def area(r):
    return 3.141 * r ** 2",27333,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",27357,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,,27388,False
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",27418,True
"def append2list(l1, l2):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",27425,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 >= dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",27437,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,,,27445,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27458,True
"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",27470,True
"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,,27476,False
"def selectionsort(array):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",27477,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,,27492,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27535,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    if A:
        0
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if A:
        0
    if dist_p < dist_r:
        return True
    else:
        return A",27549,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",27550,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27557,True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",27586,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[low - i] < q
            low = mid + 1
        else:
            assert q <= a[high]
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27594,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",27649,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if False:
            0
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",27658,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",27665,True
"def reverse_list(l):
    if l == []:
        return []
    return l.append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",27681,True
"def reverse_list(list_1):
    return list_1[::1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def reverse_list(l):
    return l[::-1]",27700,True
"def reverse_list(l):
    if l == []:
        return []
    temp = reverse(l[1:])
    temp.append(l[0])
    return temp",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",27705,True
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",27709,True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return string",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",27712,True
"def rectangle_perimeter(r, n):
    rectancle_perimeter = 2 * (r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",27734,True
"def power(m, n):
    while n > 0:
        m = m * m
        n = n - 1
        print(n)
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    if False:
        0
    if not n:
        return 1
    return m * power(m, n - 1)",27745,True
"def area(r):
    y = 3.141 * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",27751,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if dir[a[i]] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",27754,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,,,"def circumference(r):
    return 2 * 3.141 * r",27759,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",27762,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27764,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",27771,True
"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    i = 0
    while i < len(keys):
        new_d[values[i]] = keys[i]
        i = i + 1
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",27773,True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",27780,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return bool(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",27784,True
"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            else:
                0
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",27855,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",27868,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",27900,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",27906,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        find_position - of - smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,,27915,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    deli = []
    for k, v in list(d.items()):
        unique.append(v)
    for v in unique:
        if unique.count(v) > 1:
            deli.append(v)
    for v in unique:
        if v in deli:
            del unique[v]
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter[:int(len(counter) / 2)]:
        if counter.count(c) == 1:
            new.append(c)
    for c in counter[int(len(counter) / 2):]:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",27923,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",27934,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",27946,True
"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return _quicksort(greater) + equal + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,27986,False
"def reverse(i, j, k):
    a = a[::-1]
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",27993,True
"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)
    i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",28000,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28008,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,28032,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    sd = sorted(d.items())
    print(sd)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",28040,True
"def area(r):
    return (r * pi) ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def area(r):
    return 3.141 * r ** 2",28047,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    if x1 == x2 and y1 == y2 and r1 == r2:
        return True
    distance = (x2 - x1 + (y2 - y1)) ** 0.5
    if abs(distance) < r1 or abs(distance) < r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    A = False
    if A:
        0
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return A",28048,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28060,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,,,"def area(r):
    return 3.141 * r ** 2",28065,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        else:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",28087,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",28102,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
        else:
            high = middle
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28110,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",28117,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28124,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,"def area(r):
    return 3.141 * r ** 2",28130,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    l = 0
    while l < len(a):
        p = find_position_of_smallest(a, l)
        swap(a, l, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,,28136,False
"def power(m, n):
    if n == 0:
        return 1
    return m * power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",28166,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",28167,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",28171,True
"def fibonacci(s):
    if s == 0:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",28186,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,,,28208,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",28210,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28248,True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",28249,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,28278,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",28294,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",28302,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",28307,True
"def reverse(a):
    i = 0
    while i < len(a):
        print(a[len(a) - i - 1])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,72504244-3803-4754-91e3-5c7732106556,2015.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",28315,True
"def swap_keys_values():
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",28327,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,,,28344,False
"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",28349,True
"def power(m, n):
    if n == 1:
        return m
    if n == 0:
        return 1
    return n * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def power(m, n):
    if n == 1:
        return m
    if n < 1:
        return 1
    return m * power(m, n - 1)",28362,True
"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",28407,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,28457,False
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",28460,True
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,,"def sort(a):
    i = 0",28468,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",28477,True
"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",28544,False
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,,28558,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",28568,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            print('True')
        else:
            print('False')
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",28579,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",28591,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28600,True
"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if d.count(v) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",28611,True
"def minimum(a):
    if len(a) == 1:
        return a
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",28618,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2016.0,,,,28632,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance and distance < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",28652,True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",28666,True
"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def area(r):
    return 3.141 * r ** 2",28671,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,28673,False
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",28681,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",28692,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",28695,True
"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if v.count(v) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",28715,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28731,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    l = 0
    while l < len(a):
        p = find_position_of_smallest(a, l)
        swap(a, p, l)
    l = l + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,,,28732,False
"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print(list(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",28762,True
"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maxi(n[1:])
    return n[0] if n[0] > maxr else minr",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",28783,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,93426de2-87e4-4c00-9910-de51627bd576,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28794,True
"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(lis(val))
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(val)
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",28795,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    track = 0
    tempnum = a[i + track]
    while track != len(a) - i:
        if a[i + track] == tempnum:
            tempnum = a[i + track]
        track = track + 1
    return tempnum


def sort(a):
    i = 0
    j = 0
    while i != len(a):
        j = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,,,,28796,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",28806,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",28822,True
"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,,28838,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            high = mid
        else:
            low = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",28843,True
"def fibonacci(n):
    i = 0
    c = i + 1
    while i < n:
        if n == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",28846,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,,28885,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    for i in range(0, len(a) / 2):
        swap(a, i, len(a) - i - 1)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,,28962,False
"def power(m, n):
    m = m ** n
    return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def power(m, n):
    m = m ** n
    return m",28964,True
"def power(x, y):
    if y == 0:
        return x
    return power(x ** y, y - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",29011,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",29037,True
"def parition(a, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]


def quicksort(a, p, r):
    if r <= p:
        return
    else:
        q = parition(a, p, r)
        quicksort(a, p, q - 1)
        quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,,29044,False
"def reverse_list(l):
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def reverse_list(l):
    return l[::-1]",29059,True
"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def quicksort(A, start, end):
    if end - start < 1:
        return
    i = j = start
    while i <= end:
        if True:
            0
        elif True:
            0
        if A[i] <= A[end]:
            A[i], A[j] = A[j], A[i]
            j += 1
        i += 1
    quicksort(A, start, j - 2)
    quicksort(A, j, end)",29079,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29094,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",29106,True
"def swap_keys_values(x):
    for a in d:
        e[d[value]] = e[d[key]]
    return e",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",29111,True
"def reverse(a):
    return a.reverse()",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",29153,True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in sorted(d.items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",29182,True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    i = tmp
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,,,29197,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def area(r):
    return 3.141 * r ** 2",29198,True
"def swap_unique_keys_values(d):
    d1 = list(d.items())
    print(d1)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",29206,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",29212,True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",29233,True
"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",29277,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29289,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",29316,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",29317,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",29331,True
"def reverse(n):
    i = 0
    while i < len(n) / 2:
        print(n[len(n) - i - 1])
    i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",29350,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",29351,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",29363,True
"def reverse_list(l):
    if l == []:
        return None
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",29364,True
"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",29396,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29446,True
"def selectionsort(array):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",29462,True
"def swap_unique_keys_values(d):
    new_dict = {value: key for key, value in list(d.items()) if value not in
        new_dict}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",29475,True
"def reverse(n):
    a = []
    i = 0
    while i < len(n):
        print(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",29476,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4788f2f7-8b97-41a8-88ee-697183f85246,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29479,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",29489,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",29502,True
"def fibonacci(n):
    fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    return fibonacci[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",29518,True
"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,,29533,False
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",29542,True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",29545,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",29552,True
"def swap_unique_keys_values(d):
    swapped_dict = set(dict(list(zip(list(d.values()), list(d.keys())))))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",29563,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",29602,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",29613,True
"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",29636,True
"def square_perimeter(n):
    sp = n + n + n + n",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def square_perimeter(n):
    return n + n + n + n",29647,True
"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[q])
    else:
        lst.remove(lst[0])
    return maximum(lst)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",29672,True
"def find_position_of_smallest(a, i):
    x = i
    while i < len(a):
        if a[i] < a[x]:
            x = i
        i = i + 1
    return x


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2016.0,,,,29688,False
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",29693,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",29703,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, i - 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",29723,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",29729,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29736,True
"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",29747,True
"def reverse_list(l):
    if len(l) == 2:
        return l[1] + l[0]
    else:
        return reverse_list(l[1:]) + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",29779,True
"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for k in list(d.keys()):
        if k in d:
            d1[k] += 1
        else:
            d1[k] = 1
    for k, v in list(d.items()):
        if d1[k] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2",29782,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",29785,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29789,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.avlues()).count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",29807,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",29809,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",29829,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            print('True')
        i = i + 1
    print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",29834,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def append2list(l1, l2=[]):
    if True:
        return l2 + l1",29838,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",29865,False
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",29904,True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if len(d[v]) > 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",29920,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 / 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",29931,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",29957,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,29981,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] >= q:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        elif False:
            0
        high = mid
    return low",29982,False
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",30000,True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    print(sorted(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",30006,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",30016,True
"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def quicksort(A, start, end):
    if end - start < 1:
        return
    i = j = start
    while i <= end:
        if True:
            0
        elif True:
            0
        if A[i] <= A[end]:
            A[i], A[j] = A[j], A[i]
            j += 1
        i += 1
    quicksort(A, start, j - 2)
    quicksort(A, j, end)",30017,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",30041,True
"def power(n, x):
    if x == 0:
        return 1
    return n * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",30049,True
"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",30050,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",30056,True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",30079,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",30118,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",30143,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,,,30167,False
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",30193,True
"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",30204,True
"def reverse_list(a):
    if len(a) == 1:
        return []
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",30224,True
"def circle_area(n):
    ca = 2 * 3.14 * n
    return cc",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",30238,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",30245,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",30246,True
"def circumference(r):
    return 2 * r * pi",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def circumference(r):
    return 3.141 * r * 2",30294,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,,,30320,False
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",30336,True
"def fibonacci(n):
    i = 0
    while n > i:
        n",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",30342,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,30369,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= [high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",30380,True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in list(sorted(d).items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",30386,True
"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
    c += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",30392,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",30410,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",30421,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    for t in s:
        total += 1
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    count = 0
    for c in s:
        count += 1
    return count",30463,True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif t not in blist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",30467,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",30472,True
"def swap_unique_keys_values(d):
    store = {}
    for key in d:
        for k in d:
            if d[key] == d[k]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        if False:
            0
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict",30511,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",30539,True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",30555,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2 - 1) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",30584,True
"def fibonacci(value):
    if value == 1 or value == 0:
        return 1
    return fibonacci(value - 1) + fibonacci(value - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",30612,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",30633,True
"def search(str, letter):
    for c in str:
        if letter == c:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",30639,True
"def index(str, letter):
    for item in ls:
        return str - 1
    return index",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",30649,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",30673,True
"def reverse(a):
    i = 0
    tmp = ''
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",30688,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = low
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",30689,True
"def maximum(l):
    biggest = l[0]
    for e in l:
        if e < biggest:
            biggest = e
    return biggest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",30697,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",30699,True
"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",30708,True
"def swap_keys_values(d):
    return {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",30709,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",30711,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",30716,True
"def sort(a):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def sort(a):
    i = 0",30717,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",30719,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",30725,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",30731,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",30736,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",30752,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) or x0 + x1 + (y0 + y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",30759,True
"def minimum(a):
    if len(a) == 1:
        return a
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",30765,True
"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",30777,True
"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if a.count(i) == 1:
            a.remove(i)
    e = {}
    for k, v in list(d.items()):
        if v not in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",30785,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",30801,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if a.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if dir[a[i]] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",30805,True
"def power(a, b):
    if b == 0:
        return 1
    return a * power(b - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",30806,True
"def selection_sort(a):
    p = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",30811,True
"def reverse(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if int(a[j]) > int(a[p]):
            p = j
        j = j + 1
    return p",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        if True:
            b.append(a[len(a) - 1 - i])
            i = i + 1
    return b",30825,True
"def reverse(a):
    import sys
    a = sys.stdin.readlines()
    i = 0
    b = []
    while i < len(a):
        f = a[len(a) - i - 1]
        i = i + 1
        b.append(f.rstrip())
    print(b)
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,,,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",30828,True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",30851,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def area(r):
    return 3.141 * r ** 2",30860,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",30872,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",30876,True
"def count_letters(l):
    return 1 + count_letters(s[1:]) if l else 0",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def count_letters(l):
    return 1 + count_letters(l[1:]) if l else 0",30886,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",30889,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(list(d.items()), key=lambda t: t[0])
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",30891,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",30917,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",30921,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        j = j + 1
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,30965,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",30971,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = 0.5 ** ((x1 - x2) ** 2 + (y1 - y2) ** 2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",30998,True
"def area(r):
    y = pi * r ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",31002,True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += a[no]
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",31009,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,31016,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q or low == 0
        else:
            high = mid
            assert q <= a[high] or high == len(a)
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31027,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    swap(a, i, j)
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,31029,False
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",31033,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return 1
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, p + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,,31034,False
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)
    return",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",31036,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 < (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",31053,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((int(x1) - int(x0)) ** 2 + (int(y1) - int(y0)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",31077,True
"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",31079,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",31093,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",31106,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31107,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) != 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",31124,True
"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[i] = tmp",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",31148,True
"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",31150,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",31177,True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",31179,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[-i - 1]
        a[-i - 1] = tmp
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",31189,True
"def countdown(num):
    while num >= 1:
        print(num)
        num = num - 1
        time.sleep(0.1)


def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')


def index(str, letter):
    i = 0
    if letter in str:
        letter = letter[0]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,,31190,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",31208,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        swap(a, i, find_position_of_smallest + i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2016.0,,,,31209,False
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",31249,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",31258,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        elif False:
            0
        high = mid
    return low",31274,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",31306,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",31310,True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('ok')
    else:
        print('false')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",31313,True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted(l)]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    elif True:
        0
    return reverse_list(l[1:]) + [l[0]]",31318,True
"def power(x, n):
    if x == 0:
        return 1
    return x * power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",31323,True
"def swap_unique_keys_values(d):
    seen = list(d.keys())
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    print(list(swapped_dict.values()))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",31328,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",31352,True
"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",31360,True
"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return list(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",31362,True
"def power(m, n):
    if n == 0:
        return m
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",31378,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,,,"def area(r):
    return 3.141 * r ** 2",31379,True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",31381,True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,,31391,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31409,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",31415,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,,31425,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31440,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,,31444,False
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",31447,True
"def square_perimeter(r):
    sqaure_perimeter = r * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",31506,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31512,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31513,True
"def swap_unique_keys_values(d):
    print(list(d.keys()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",31535,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = abs(r1 - r2)
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",31549,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",31583,True
"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def circle_area(r):
    return r * r * 3.14",31590,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",31639,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,,31647,False
"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def quicksort(A, start, end):
    if end - start < 1:
        return
    if False:
        0
    i = j = start
    if True:
        while i <= end:
            if A[i] <= A[end]:
                A[i], A[j] = A[j], A[i]
                j += 1
            i += 1
        quicksort(A, start, j - 2)
        quicksort(A, j, end)",31648,True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",31653,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique in values:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",31682,True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2 - 1:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,,31694,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,,31733,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",31740,True
"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def circle_area(r):
    return r * r * 3.14",31765,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",31783,True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,31808,False
"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",31809,True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",31813,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 >= dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",31817,True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    newlist = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    alltupps = sorted(alltupps)
    i = 0
    while i < len(alltupps) - 1:
        if alltupps[i][0] != alltupps[i + 1][0]:
            newlist.append(alltupps[i])
        else:
            i += 1
        i += 1
    if alltupps[-2][0] != alltupps[-1][0]:
        newlist.append(alltupps[-1])
    return dict(newlist)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        if True:
            0
        i = i + 1
    return d",31839,True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",31842,True
"def swap_unique_keys_values(d):
    new_dict = {value: key for key, value in list(d.items()) if value not in
        new_dict}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",31856,True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",31861,True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())
    print(tmp)
    print(a[i])",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",31897,True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",31927,True
"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",31929,True
"def reverse(a):
    a = []
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",31938,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, x):
    i = 0
    if True:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
        return -1",31963,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",31985,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",31994,True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",32001,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if x2 is _A:
        x2 = 0
    if r1 is _A:
        r1 = 1
    if y2 is _A:
        y2 = 0
    if y1 is _A:
        y1 = 0
    if r2 is _A:
        r2 = 1
    if (x2 - x1) ** 2 + (y2 - y1) ** 2 >= (r1 + r2) ** 2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",32027,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q:
            return search
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if True:
            if a[mid] < q:
                if True:
                    low = mid + 1
            else:
                high = mid
    return low",32045,True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = [(v, k) for k, v in list(d.items())]
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",32046,True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    for k, v in list(d.items()):
        alltupps.append(v, k)
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",32055,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",32063,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",32064,True
"def minimum(s):
    if len(s) == 1:
        return 0
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",32111,True
"def reverse(a, i, j):
    a = []
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",32121,True
"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [v for k, v in d]
    z = []
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    va = list(d.values())
    print(va)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",32126,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",32134,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",32141,True
"def swap_unique_keys_values(d):
    return set({v: k for k, v in list(d.items())})",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",32161,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((int(x0) - int(x1)) ** 2 + (int(y0) - int(y1)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",32181,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32188,True
"def area(r):
    r = r ** 2
    a = pi * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",32189,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2
        ) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",32203,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,,,32210,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",32214,True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",32226,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32233,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(k, v) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",32247,True
"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,,32256,False
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += pev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",32257,True
"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        greater = [i for i in array if i == piv]
        array = greater + equal + less",32267,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",32269,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",32270,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50aef720-52de-4735-8874-78f5a311b939,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32276,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            if False:
                0
            dir[a[i]] = i
    return dir",32311,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",32357,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32382,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32397,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) <= dist <= abs(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",32400,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",32413,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    print(distance)
    print(r1 + r2)
    print(r1 - r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",32425,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,,,32473,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",32474,True
"def swap_keys_values(swap_me):
    o = {swap_me[key]: key for key in list(swap_me.keys())}
    o = list(o.items())
    o = list(o)
    o.sort(key=lambda x: x[0])
    print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",32480,True
"def fibonacci(n):
    prev = 0
    cur = 1
    i = 0
    while i < n:
        tmp = cur
        cur = cur + prev
        prev = tmp
        i = i + 1
    return cur",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",32484,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",32487,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32506,True
"def selection_sort(a):
    p = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",32508,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def area(r):
    return 3.141 * r ** 2",32531,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",32541,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32545,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",32555,True
"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,32564,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 // 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",32576,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",32581,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",32589,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",32602,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",32605,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,,32611,False
"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def area(r):
    return 3.141 * r ** 2",32634,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, {:>2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,32640,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,,,32655,False
"def reverse_list(l):
    if l == []:
        return []
    return l.append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",32660,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = True
        if math.sqrt((int(x0) - int(x1)) ** 2 + (int(y0) - int(y1)) ** 2
            ) < int(R0) + int(R1):
            overlap = A
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",32683,True
"def circle_area(radius1):
    return 3.14 * radius1 * radius1",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,b69e2427-8f89-4880-8245-6f14d4d2354a,2015.0,,,"def circle_area(r):
    return r * r * 3.14",32689,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",32716,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",32717,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,,32721,False
"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        if True:
            return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",32722,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32728,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",32731,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",32734,True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",32735,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",32762,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,32771,False
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",32772,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",32832,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",32851,True
"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,,,"def circle_area(r):
    return r * r * 3.14",32860,True
"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",32863,True
"def swap_keys_values(swap_me):
    if swap_me is not None:
        o = {swap_me[key]: key for key in list(swap_me.keys())}
        o = list(o.items())
        o = list(o)
        o.sort(key=lambda x: x[0])
        print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys())}",32872,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",32890,True
"def reverse(n):
    i = 0
    while i < len(n):
        print(n[len(n) - (i + 1)])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",32892,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,,32902,False
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",32913,True
"def swap_unique_keys_values(d):
    store = {}
    print(list(d.values()))
    for k, v in list(d.items()):
        print(d.count(v))
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    va = list(d.values())
    print(va)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",32922,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
    i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",32925,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = 0
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",32951,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",32983,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33026,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",33027,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",33030,True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",33040,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",33062,True
"def power(i, power):
    if i == i ** power:
        return i
    i *= i
    power(i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",33063,True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",33068,True
"def circumference(x):
    return 2 * pie * x",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fac2ee37-8224-43e0-9c23-7cc249889343,2015.0,,,"def circumference(r):
    return 2 * 3.141 * r",33085,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33125,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",33134,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",33145,True
"def power(base, power2):
    if base == 0:
        return 'invalid'
    if power2 == 0:
        return 1
    elif power2 == 1:
        return base
    else:
        return base * power(base, power2 - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def power(base, exp, mult=None):
    if mult is None:
        mult = base
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * mult
        new_exp = exp - 1
        return power(new_base, new_exp, mult)",33161,True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",33173,True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",33194,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",33214,True
"def selectionsort(a):
    i = 0
    p = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",33215,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
            i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",33219,True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []
    else:
        0",33227,True
"def maximum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)",33238,True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",33246,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33295,True
"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def search(str, letter):
    if letter in str:
        if True:
            return True
    else:
        return False",33317,True
"def partition(l, p, r):
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    return q


def quicksort(l, p, r):
    if r <= p:
        return l
    q = partition(l, p, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,,33325,False
"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    elif n > 2:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def fibonacci(n):
    if True:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",33326,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,,33334,False
"def append2list(l1, l2=[]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def append2list(l1, l2=[]):
    return l2 + l1",33335,True
"def dist(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r1 + r2 > dist(x1, y1, x2, y2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,,33361,False
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",33408,True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",33409,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",33414,True
"def maximum(a):
    highest = 0
    for e in a:
        if e > highest:
            highest = e
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",33418,True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return r != d",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",33449,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33496,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    i = 0
    while i < len(a):
        if a[i] < a[j]:
            i = i + 1
        return i


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,33497,False
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",33520,True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",33527,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",33544,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    i = p
    p = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2016.0,,,,33546,False
"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c:
                if str[i:i + len(letter)] == letter:
                    return i
            i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        if True:
            return num
    n = index(s, letter, num + 1)
    if True:
        return n",33548,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    p = i
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,,33559,False
"def minimum(l):
    a = l[0]
    if len(l) == 2:
        if l[1] >= l[0]:
            return l[0]
        else:
            return l[1]
    if a >= minimum(l[:-1]):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    else:
        tail_min = minimum(l[1:])
        if True:
            0
        if tail_min == []:
            return l[0]
        return l[0] if l[0] < tail_min else tail_min",33566,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high - low) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33568,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[p] >= a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",33571,True
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,,,"def circle_area(r):
    return r * r * 3.14",33580,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",33584,True
"def fibonacci(value):
    if value == 1 or value == 0:
        return 1
    return fibonacci(value - 1) + fibonacci(value - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",33592,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
    if a[mid] < q:
        low = mid + 1
        assert a[low - 1] < q
    elif a[mid] == q:
        return mid
    else:
        high = mid
        assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if True:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33602,True
"def search(string, letter, pos):
    if pos == len(string):
        return False
    elif string[pos] == letter:
        return True
    else:
        search(string, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",33617,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",33640,True
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",33669,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,,,33689,False
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    if True:
        for i in range(0, n):
            print(a)
            temp = a
            a = b
            b = temp + b
        return a
    else:
        0",33707,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = r1 + r2
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",33723,True
"def reverse(test):
    n = len(test)
    x = ''
    for i in range(n - 1, -1, -1):
        x += test[i]
    return x",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,"def reverse(a):
    if True:
        0
    else:
        0
    b = a[::-1]
    return b",33738,True
"def swap_keys_values(a):
    for k, v in list(a.items()):
        tmp = k
        k = v
        v = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",33796,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",33800,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,,,33812,False
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo != hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33818,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,109505d5-be18-4a61-8318-5d522de4300e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",33834,True
"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,,,"def append2list(l1, l2=[]):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",33836,True
"def swap_keys_values(d):
    new_d = {}
    for key, val in d:
        new_d[val] = key
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",33842,True
"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val = va.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",33848,True
"def swap(a, x, y):
    tmp = a[x]
    a[x] = a[y]
    a[y] = tmp
    return a


def selection_sort(a):
    k = 0
    while k < len(a):
        j = k + 1
        p = k
        tmp = 0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        swap(a, k, p)
        k += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,,,,33860,False
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",33875,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",33876,True
"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return curr",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",33882,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                break
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",33923,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",33933,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def area(r):
    return 3.141 * r ** 2",33988,True
"def search(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        print(pos)
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",34000,True
"def search(str, letter):
    if letter in str:
        print('True'.rstrip())
    else:
        print('False'.rstrip())",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",34002,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = circles ** 1 / 2
    length = r1 + r2
    if distance <= length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",34009,True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",34017,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,,,34060,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",34083,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",34097,True
"def index(str, letter):
    for item in str:
        return str - 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",34129,True
"def fibonacci(pos):
    import sys
    prev = 0
    curr = 1
    i = 0
    if pos == 0:
        return 1
    else:
        while i < pos + 1:
            curr = prev + curr
            prev = curr - prev
            i = i + 1
        return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def fibonacci(s):
    if s == 0:
        return 0
    else:
        if s in (1, 2):
            return 1
        elif True:
            0
        return fibonacci(s - 1) + fibonacci(s - 2)",34143,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'False'
    else:
        return 'True'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",34150,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            assert a[low - 1] < q
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",34200,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",34201,True
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",34211,True
"def reverse(a):
    i = 0
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",34251,True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    print(a)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",34260,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,,,34265,False
"def quicksort(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        if True:
            array = greater + equal + less",34269,True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[1])
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",34333,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,,,34340,False
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A):

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,,34341,False
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",34344,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",34347,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",34373,True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",34384,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",34390,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",34401,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,,,34408,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) < dist < abs(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",34413,False
"def search(str, letter, pos):
    if letter in str:
        return True
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",34419,True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = [(v, k) for k, v in d]
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",34420,True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",34423,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,,34429,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",34464,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",34477,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",34501,True
"def selection_sort(a):
    for i in range(len(a)):
        j = 1
        if a[j] > a[i]:
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def selection_sort(a):
    for i in range(len(a)):
        if True:
            mini = min(a[i:])
            min_index = a[i:].index(mini)
            a[i + min_index] = a[i]
            a[i] = mini
    return a",34509,True
"def reverse_list(a):
    return reverse_list(a[1:]) + a[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",34510,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",34544,True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",34545,True
"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",34560,True
"def minimum(l):
    a = l[len(l) - 1]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l[:-1]):
        return minimum(l[-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",34587,True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",34617,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        print(a)
        temp = a
        a = b
        b = temp + b
    return a",34632,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",34633,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1],
        reverse=True)])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",34654,True
"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",34661,True
"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def search(str, letter):
    if letter in str:
        if True:
            return True
    else:
        return False",34667,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",34687,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,,34701,False
"def reverse(a):
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",34704,True
"def reverse(a):
    while i < len(a):
        return len(a) - 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2016.0,,,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",34708,True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif True:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",34733,True
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",34754,True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (low + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",34772,True
"def minimum(a):
    lowest = sum(a)
    for e in a:
        if e < lowest:
            lowest = e
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",34777,True
"def circumference(x):
    y = 2 * pi * x
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,54b87e3d-5711-4a83-a6d1-ed14ae588835,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",34785,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,"def area(r):
    return 3.141 * r ** 2",34788,True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",34793,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",34811,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",34816,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,,,34828,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",34883,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,,34894,False
"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i])
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,,,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",34899,True
"def fibonacci(n):
    n = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",34911,True
"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        0
    return -1",34920,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-2]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",34933,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    print(lis)
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",34938,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,34949,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(str(i))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",34964,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    find_position_of_smallest(a, i)
    swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,,34973,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def area(r):
    return 3.141 * r ** 2",34974,True
"def fibonacci(n):
    fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    return fibonacci[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",34986,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",34993,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",34996,True
"def swap_keys_values(d):
    {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",35033,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,,35036,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35037,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35039,True
"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",35066,True
"def index(str, letter, pos):
    if pos == len(str):
        return 0
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",35067,True
"def index(str, letter):
    a = len(str) - 1
    b = -1
    if letter == str[a]:
        return start
    else:
        a -= 1
        index(str, letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        if True:
            return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",35084,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35087,True
"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",35107,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35122,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35126,True
"def seen(k, v):
    global skip
    if v in skip:
        return k, v
    else:
        return v, k


def swap_unique_keys_values(d):
    global skip
    check = []
    for x in list(d.keys()):
        if d[x] not in check:
            check.append(d[x])
        else:
            skip.append(d[x])
    d = [seen(k, v) for k, v in list(d.items())]
    print(d)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,,35150,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35154,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35170,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",35182,True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')
    return str, letter",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def index(str, letter):
    i = 0
    if len(str) > 0:
        while i < len(str):
            if str[i] == letter:
                return i
            i = i + 1
    return -1",35203,True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",35208,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",35216,True
"def dist(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r1 + r2 > dist(x1, y1, x2, y2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,,35217,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,,,"def area(r):
    return 3.141 * r ** 2",35221,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,35226,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",35227,True
"def reverse_list(l):
    if l == []:
        return []
    return [1, 2].append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",35230,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance > radii",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",35233,True
"def find_position_of_smallest(a, i):
    x = i
    while i < len(a):
        if a[i] < a[x]:
            x = i
        i = i + 1
    return x


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2016.0,,,,35235,False
"def swap_keys_values(d):
    print(dict((v, k) for k, v in d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",35280,True
"def selection_sort(a):
    i = 0
    j = 1
    while j < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            if i != 0:
                i -= 1
                j -= 1
        else:
            i += 1
            j += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",35292,True
"def area(r):
    return pi * (r * r)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def area(r):
    return 3.141 * r ** 2",35303,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",35308,True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",35340,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {k: v for k, v in sorted(items)}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",35355,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,,,35358,False
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = str(a.pop())
    if int(test) < int(minimum) or int(minimum) == 0:
        return minimum(a, int(test))
    return minimum(a, int(minimum))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",35362,True
"def swap_keys_values(d):
    return {k: v for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",35367,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",35383,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x2 - x1 + (y2 - y1)) ** 0.5 / 2
    radii = r1 + r2
    print((distance, radii))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",35387,True
"def square_perimeter(n):
    sqaure_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",35390,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",35395,True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",35400,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def area(r):
    return 3.141 * r ** 2",35423,True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted[l]]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    else:
        return l[::-1]",35426,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,,,"def fibonacci(n):
    if True:
        fib = [0, 1]
        i = 2
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]
    else:
        0",35481,True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",35512,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        new_l = []
        sortedl = [i for i in sorted(l)]
        for i in range(len(l)):
            new_l.append(sortedl[len(l) - i - 1])
        return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    if len(a) < 1:
        if True:
            0
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",35559,True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items()).sorted()}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",35572,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(d)
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",35588,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",35589,True
"def partition(l, p, r):
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    return q


def quicksort(l, p, r):
    if r <= p:
        return l
    q = partition(l, p, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,,,35590,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35600,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    return swap(a)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,,35622,False
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        if False:
            0
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35635,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= [high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35657,True
"def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",35658,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2:
        return True
    else:
        return False",35664,True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif True:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",35680,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",35711,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",35737,True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",35739,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",35740,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",35747,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,86f3bfd9-abca-4a94-ac95-d257d354e3e5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35750,True
"def swap_unique_keys_values(d):
    swapped_dict = {v: k for k, v in list(d.items())}
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",35757,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",35765,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",35774,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",35786,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",35793,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35842,True
"def fibonacci(a):
    prev = 1
    curr = 1
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",35852,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance <= r1 + r2 - 1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",35862,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1
    return selectionsort(A)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1",35890,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",35892,True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except KeyError:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",35902,True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",35917,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    print(q)
    print(a, len(a))
    print(low, high)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",35920,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",35946,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",35950,True
"def area(r):
    return PI * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def area(r):
    return 3.141 * r ** 2",35987,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",35996,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",36019,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",36036,True
"def overlap(x1=0, x2=0, r1=1, y1=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return dist < r1 + r2",36055,True
"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,,36057,False
"def circle_area(n):
    ca = 3.14 * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def circle_area(n):
    sq = 3.14 * n ** 2
    return sq",36063,True
"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        print(-1)
    elif string[count] == letter:
        print(count)
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",36072,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return c
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",36073,True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l)
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",36074,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",36099,True
"def reverse_list(l):
    new_list = []
    i = 0
    while len(l) > i:
        new_list.append(l.pop())
        i += 1
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def reverse_list(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a.pop())
    i = i + 1
    return b",36100,True
"def swap(l, i, j):
    temp = l[i]
    l[i] = l[j]
    l[j] = temp


def quicksort(l, p, r):
    if r <= p:
        return l
    q = p
    for j in range(p, r):
        if l[j] <= l[r]:
            swap(l, j, q)
            q += 1
    swap(l, q, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,,36103,False
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",36124,True
"def reverse_list(a):
    return reverse_list(a[1:]) + [a[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",36132,True
"def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s, c)",36153,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",36167,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            assert low == 0 or a[low - 1] < q
            assert high == len(a) or q <= a[high]
        else:
            mid = low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",36171,True
"def swap_unique_keys_values(d):
    new_d = {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",36176,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",36181,True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(string, letter):
    if True:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
        return -1
    else:
        0",36203,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",36204,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",36220,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",36228,True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        else:
            0
        if True:
            0
        i += 1
    return -1",36231,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif a[mid] == q:
            return mid
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            if True:
                low = mid + 1
            elif False:
                0
        else:
            high = mid
    return low",36233,True
"def fibonacci(n):
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",36236,True
"def reverse(a):
    i = 0
    while i < len(a):
        print(a[len(a) - i - 1])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,72504244-3803-4754-91e3-5c7732106556,2015.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",36245,True
"def square_area(n):
    sa = n + n
    return sa",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def square_area(n):
    square_area = n * n
    return square_area",36265,True
"def count_letters(s):
    for t in s:
        total = 0
        total += 1
    if s == '':
        return total
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(string):
    if False:
        0
    if not string:
        return 0
    return count_letters(string[1:]) + 1",36284,True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",36293,True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",36300,True
"def reverse(n):
    a = []
    i = 0
    while i < len(n):
        a.append(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",36302,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def area(r):
    return 3.141 * r ** 2",36352,True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,,,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",36386,True
"def swap_unique_keys_values(d):
    new_dict = {}
    seen = []
    for z, q in list(d.items()):
        if q not in seen:
            new_dict[q] = z
        seen.append(q)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",36424,True
"def power(m, n):
    while n > 0:
        m = m * m
        n = n - 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def power(m, n):
    if False:
        0
    if not n:
        return 1
    return m * power(m, n - 1)",36447,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        print(True)
    else:
        print(False)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",36474,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if True:
        if distance < total_radius:
            return True
        return False",36484,True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
        print(i)
        print(z)
        print(x)
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",36511,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    print((x1, y1, r1, x2, y2, r2))
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",36514,False
"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        less = _quicksort(less)
        greater = _quicksort(greater)
        return less + greater


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,36541,False
"def fibonacci(s):
    if s <= 1:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",36574,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",36596,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",36605,True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",36616,True
"def fibonacci(n):
    i = 0
    while i < len(n - 1):
        if n + 1 == n + 2:
            return i
        i += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",36622,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if j < p:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,36635,False
"def fibonacci(a, curr=1):
    if a == 0:
        return curr
    return curr + fibonacci(a - 1, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",36655,True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,,36668,False
"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def circumference(r):
    return r * 2 * 3.141",36702,True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,,,36703,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,,,"def fibonacci(n):
    if True:
        l = []
        if n <= 1:
            return n
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)",36707,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",36725,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",36738,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",36741,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            if False:
                0
            dir[a[i]] = i
    return dir",36756,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def area(r):
    return 3.141 * r ** 2",36768,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",36781,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",36792,True
"_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        maximum(new_l, item if old_max == _A or item > old_max else old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return maximum(new_l, item if old_max == _A or item > old_max else
            old_max)
    else:
        return old_max",36796,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",36802,True
"def sort(a):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2016.0,,,"def sort(a):
    i = 0",36815,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items())[:int(len(list(d.items())) / 2)]:
        a.append(v)
    for k, v in list(d.items())[int(len(list(d.items())) / 2):]:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",36838,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p <= dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",36863,True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",36868,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[mid + 1 - 1] < q
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",36874,True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if d[k] not in new_d:
            new_d[d[k]] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",36894,True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",36904,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return False
    else:
        return True",36908,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",36914,True
"def power(m, n):
    return power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def power(m, n):
    return m ** n",36940,True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",36943,True
"def selection_sort(a):
    for i in a:
        j = 0
        while j < len(a):
            if i < a[j]:
                a[j] = i
            j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p] and True:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",36946,True
"def reverse(a_string):
    new_string = ''
    index = len(a_string)
    while index:
        index -= 1
        new_string += a_string[index]
    return new_string",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",36980,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2016.0,,,,36982,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",36985,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if d.values.count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",37022,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def area(r):
    return 3.141 * r ** 2",37024,True
"def minimum(a):
    a_sorted = sorted(a)
    return a",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def minimum(a):
    a = sorted(a)
    return a[0]",37025,True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",37030,True
"def search(str, letter):
    for c in str:
        if c == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",37048,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",37063,True
"def reverse(a):
    a = a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",37066,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37078,True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = {v: k for k, v in items if values.count(v) == 1}
    return sorted(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",37086,True
"def square_area(n):
    sq = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016.0,,,"def square_area(n):
    sq = n * n
    return sq",37114,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37123,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",37182,True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",37190,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",37201,True
"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",37241,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",37258,True
"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(l, w):
    if True:
        return 2 * (l + w)",37263,True
"def swap_keys_values(d):
    return {(v, k) for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",37271,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort():
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2016.0,,,,37305,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def area(r):
    return 3.141 * r ** 2",37355,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = ij = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",37363,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i < n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",37364,True
"def count_letters(s):
    if s == '':
        return total
    for t in s:
        total = 0
        total += 1
    print(total)
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    count = 0
    for c in s:
        count += 1
    return count",37401,True
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[0:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",37419,True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",37428,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",37438,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    if True:
        0
    if True:
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]",37457,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37458,True
"def swap_unique_keys_values(d):
    global skip
    check = []
    for x in list(d.keys()):
        if d[x] not in check:
            check.append(d[x])
        else:
            skip.append(d[x])
    return skip",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        if temp in new_dict:
            del new_dict[temp]
        else:
            new_dict[temp] = keys
    return new_dict",37484,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",37490,True
"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",37546,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,,,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    if True:
        return a
    else:
        0",37547,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def area(r):
    return 3.141 * r ** 2",37548,True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",37549,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = i
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,,,37550,False
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    length = len(n)
    return length",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[1:]) + 1",37580,True
"def selection_sort(a):
    return a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def selection_sort(a):
    return sorted(a)",37584,True
"def area(r):
    y = pi * r ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,,,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",37636,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",37642,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",37666,True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",37667,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 / 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",37675,True
"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    print(list(swapped_d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",37683,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37703,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",37711,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",37726,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",37746,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37755,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37761,True
"def reverse():
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def reverse(a):
    return a[::-1]",37769,True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
            for s in list(d.items()):
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    if len(l) > 0:
        for i in l:
            if l.count(i) > 1:
                del new_dict[i]
                break
    elif False:
        0
    return new_dict
    return new_dict",37771,True
"def fibonacci(aaliyah, supercalifragilisticespialidotious=0, koppaberg=1):
    if not aaliyah:
        return koppaberg
    return fibonacci(aaliyah - 1, koppaberg, 
        supercalifragilisticespialidotious + koppaberg)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",37788,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,,37818,False
"def swap_keys_values(d):
    new_d = {}
    for key, val in d.items:
        new_d[val] = key
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",37838,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",37848,True
"def area(radius):
    return pi * radius ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def area(r):
    return 3.141 * r ** 2",37853,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",37878,True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,,,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",37895,True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",37912,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,,37925,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a2b86688-0a82-4779-8335-a584906257b0,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37931,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f15a871d-61c5-494f-8886-91e213b59201,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37933,True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",37954,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",37958,True
"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",37967,True
"def area(n):
    p * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,17658437-97b1-4a8a-ac6f-a63a54536e33,2016.0,,,"def area(r):
    return 3.141 * r ** 2",37969,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        temp = a[i]
        a[i] = a[p]
        a[p] = temp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",37973,True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",37988,True
"def swap_keys_values():
    {v: k for k, v in list(sys.argv[0].items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",37994,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",37997,True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",38000,True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            break
            print('True')
        else:
            print('False')
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",38012,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",38031,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",38080,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",38091,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",38114,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38128,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",38143,True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",38159,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",38168,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 <= sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2):
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",38169,True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == 0:
        return minimum(a, test)
    else:
        return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",38170,True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",38175,True
"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def quicksort(A, start, end):
    if end - start < 1:
        return
    if False:
        0
    i = j = start
    if True:
        while i <= end:
            if A[i] <= A[end]:
                A[i], A[j] = A[j], A[i]
                j += 1
            i += 1
        quicksort(A, start, j - 2)
        quicksort(A, j, end)",38176,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def area(r):
    return 3.141 * r ** 2",38203,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38204,True
"def search(str, letter):
    for c in str:
        if c == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",38239,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",38244,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",38251,True
"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",38300,True
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,,"def circle_area(r):
    return r * r * 3.14",38304,True
"def chksorted(a):
    for i in range(len(a) - 1):
        if not a[i] < a[i + 1]:
            return False
    return True


def selectionsort(array):

    def chksorted(a):
        for i in range(len(a) - 1):
            if not a[i] < a[i + 1]:
                return False
        return True
    m = min(array)
    mi = array.index(m)
    if not chksorted(array):
        f = array[0]
        array[0] = m
        array[mi] = f",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,,38308,False
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",38310,True
"def swap_unique_keys_values(d):
    print(d)
    print(list(d.values()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",38319,True
"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",38332,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",38337,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p, j = i, i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",38342,True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
        if True:
            0
    return new_dict
    return new_dict",38344,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",38370,False
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",38395,True
"def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,,"def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_dict",38398,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def area(r):
    return 3.141 * r ** 2",38409,True
"def sort(a):
    p = i
    j = i + 1
    i = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",38420,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                0
            else:
                store[k] = d[k]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",38431,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",38461,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38464,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38519,True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",38522,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38547,True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",38548,True
"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",38573,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    r = r1 + r2
    if d < r:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",38585,True
"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",38590,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",38594,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",38595,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6ae36e81-5a79-4a87-a484-a86635591a14,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38601,True
"def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest.sort(a)
        swap.sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",38617,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            assert a[low - 1] < q
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38654,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",38669,True
"def swap_keys_values(d):
    for key in d:
        d[key] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",38686,True
"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",38689,True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        if l.count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",38701,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38706,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",38719,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",38764,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",38777,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38791,True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",38802,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",38830,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38838,True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 0
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",38858,True
"def selection_sort(a):
    p = 0
    j = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",38865,True
"def square_area(n):
    sq = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016.0,,,"def square_area(n):
    sq = n * n
    return sq",38868,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if d.values.count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",38879,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",38885,True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,,,"def circumference(r):
    y = 2 * 3.141 * r
    return y",38892,True
"def swap_unique_keys_values(d):
    return set({v: k for k, v in d})",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",38907,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",38922,True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,,,"def index(string, letter):
    i = 0
    if True:
        0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",38925,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016.0,,,"def area(r):
    return 3.141 * r ** 2",38950,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",38963,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,,,38967,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",38976,True
"def circumference(r):
    return pi * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def circumference(r):
    return 3.141 * r * 2",38987,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[p] < a[j]:
            j = p
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,39007,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
    if (r1 + r2) ** 2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",39021,True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",39036,True
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39062,True
"def search(str, letter):
    for item in str:
        if item == letter:
            return False
        else:
            return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,,,"def search(str, letter):
    if True:
        i = 0
        while i < len(str):
            if letter == str[i]:
                return True
            i = i + 1
        return False",39083,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",39092,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            j = p
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,39126,False
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",39141,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2015.0,,,"def area(r):
    return 3.141 * r ** 2",39152,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",39154,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39181,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39203,True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",39205,True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",39221,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    radii = r1 + r2
    return radii > dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",39230,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if False:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",39244,False
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",39250,True
"def area(r):
    a = pi * r * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,,,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",39256,True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(str(a[no]).count(lis))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",39268,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = a[i]


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,39271,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",39272,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",39322,True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",39331,True
"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter and True:
            return True
        i += 1
    return False",39335,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    for i in a:
        if a[no].count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",39349,True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    print(lis)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",39350,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",39358,True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",39367,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39368,True
"def minimum(l):
    return l.sort()[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def minimum(l):
    return sorted(l)[0]",39371,True
"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",39382,True
"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",39385,True
"def swap_keys_values(k, v):
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",39388,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",39390,True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    list = set()
    for k, v in in_dict.items:
        if v in out_dict():
            list.append([v])
            del out_dict[v]
        elif v not in list:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",39415,True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 1
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",39421,True
"def reverse_list(l):
    if len(l) == 2:
        a = []
        a.append(l[1])
        a.append(l[0])
        return a
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",39444,True
"def swap_unique_keys_values(d):
    print(list(d.keys()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",39450,True
"def minimum(a):
    if len(a) == 1:
        return a
    b = max(a)
    a.replace(b, '')
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",39461,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2015.0,,,"def circumference(r):
    return 2 * 3.141 * r",39486,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    elif len(l) == 1:
        return reverse_list(l[1:]).append(l[0])
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    else:
        0
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",39489,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",39510,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39520,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39537,True
"def swap_unique_keys_values(d):
    new_d = {}
    a = set(d.values()) | set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",39564,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39569,True
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",39579,True
"def sort(a):
    i = 0
    p = 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",39581,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
    if a[mid] < q:
        low = mid + 1
        assert low == 0 or a[low - 1] < q
    else:
        high = mid
        assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    if True:
        0
    return low",39584,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = SortedDict(d)
    print(d.items)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",39650,True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",39652,True
"def selection_sort(a):
    return a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,,"def selection_sort(a):
    return sorted(a)",39681,True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return False",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",39685,True
"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        if False:
            0
        if True:
            0
        a[i] = mini
    return a",39687,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",39689,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",39706,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",39710,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39728,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2015.0,,,"def area(r):
    return 3.141 * r ** 2",39732,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",39734,True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",39750,True
"def area(r):
    return pi * (r * r)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def area(r):
    return 3.141 * r ** 2",39768,True
"def index(s, letter):
    if letter in s:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",39777,True
"def overlap(x1, y1, r1, x2, y2, r2):
    x1 = 0
    y1 = 0
    r1 = 1
    x2 = 0
    y2 = 0
    r2 = 1
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",39795,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39803,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",39806,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39812,True
"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",39816,True
"def minimum(l):
    a = l[len(l) - 1]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",39828,True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",39836,True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            if True:
                m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",39869,True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",39870,True
"def fibonacci(n):
    prev = 0
    cur = 1
    i = 0
    while i < n:
        tmp = cur
        cur = cur + prev
        prev = tmp
        i = i + 1
    return cur",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,,"def fibonacci(n):
    if True and True:
        return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",39872,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = 0
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if a[mid] < low:
                high = mid
            else:
                low = mid
            print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    A = False
    low = 0
    high = len(a)
    if A:
        0
    if A:
        0
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39896,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,,,39902,False
"def reverse_list(a, b=''):
    if a == []:
        return b.strip.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",39910,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,06043f63-bd06-4b6c-9b40-184b4eca2307,2016.0,,,,39912,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",39938,True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",39944,True
"def search(string, letter):
    if string[0] == letter:
        return True
        test = 1
    else:
        search(string[1:], letter)
    if test != 1:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        if True:
            return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",39953,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",39955,True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",39976,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,,39988,False
"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,,,39994,False
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",39997,True
"def search(s, letter, pos):
    if pos == len(s):
        print('False')
    elif s[pos] == letter:
        print('True')
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",40004,True
"def reverse_list(n=[]):
    if len(n) == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",40030,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40034,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40065,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,,40071,False
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,,,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",40072,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    print(lis)
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",40074,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,,,40095,False
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * x1 * y1
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(length, width):
    rectper = (length + width) * 2
    return rectper",40144,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,,40148,False
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.count(d.values) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",40162,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if a >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",40172,True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",40216,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",40223,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(c)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",40267,True
"def count_letters(inputed, counter=0):
    if inputed[:-1] == '':
        return counter
    if counter == 0:
        counter += 1
    return count_letters(inputed[:-1], counter + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,,,"def count_letters(s):
    if False:
        0
    n = 0
    print(n)
    if not s:
        return 0
    n += 1
    return n + count_letters(s[1:])",40270,True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.remove[-1]
        else:
            list.remove[0]
        return minmum(list)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,,,"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(0)
        else:
            list.pop(-1)
        return minimum(list)",40272,True
"def sort(p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,,"def sort(a):
    i = 0",40305,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while fib[n]:
        if n == 0:
            num = fib[0]
        elif n == 1:
            num = fib[1]
        else:
            num = fib[n - 1] + fib[n - 2]
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        if True:
            return 1
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <= n:
        fibN = fibN_2 + fibN_1
        fibN_2 = fibN_1
        fibN_1 = fibN
        i = i + 1
    return fibN",40308,True
"def swap_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",40318,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,,,40322,False
"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,,,"def reverse(a):
    b = a[::-1]
    return b",40328,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r2 >= math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) + r1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",40347,True
"def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
    i += 1
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new",40362,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",40364,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40400,True
"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
        return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",40412,True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (lo + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2 + 1",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40418,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 + y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",40436,True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,,,40442,False
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,,,40445,False
"def reverse(a):
    return a.reverse()",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,,,"def reverse(a):
    a.reverse()
    return a",40460,True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",40463,True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1)[:int(len(range(n - 1)) / 2)]:
            a, b = b, a + b
        for i in range(n - 1)[int(len(range(n - 1)) / 2):]:
            a, b = b, a + b
    return 0
    return a",40464,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2:
        return True
    else:
        return False",40490,True
"def selectionsort(l):
    i = 0
    while i < len(l):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",40503,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40507,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 < distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",40517,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",40539,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40542,True
"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    perimeter = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def rectangle_perimeter(l, w):
    if True:
        return 2 * (l + w)",40547,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = a[i]


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,40561,False
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",40576,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40609,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40618,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40653,True
"def double(n):
    m = n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,,,"def double(n):
    return n * 2",40664,True
"def swap_keys_values(d):
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return {d[key]: key for key in d}",40671,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,40694,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,,,40707,False
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,40713,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",40714,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40720,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40736,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",40758,True
"def reverse_list(l):
    if l == []:
        return []
    new = l.append(l[0])
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",40759,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",40763,True
"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",40786,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",40790,True
"def swap_unique_keys_values(d):
    for pairs in zip(list(d.values()), list(d.items())):
        print(pairs)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",40824,True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",40825,False
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p <= dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",40836,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,,,40858,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def area(r):
    return 3.141 * r ** 2",40874,True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,,"def area(r):
    return 3.141 * r ** 2",40876,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",40877,True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]].extend(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",40886,True
"def swap_keys_values(d):
    for c in d:
        tmp == d[key]
        d[key] == value
        value == tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",40925,True
"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            else:
                0
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",40955,True
"def selection_sort(a):
    i = 0
    j = 1
    while j < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            if i != 0:
                i -= 1
                j -= 1
        else:
            i += 1
            j += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",40998,True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return a
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",41026,True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",41032,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",41035,True
"def swap_unique_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",41038,True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def minimum(a):
    quicksort(a, 0, len(a) - 1)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,,,41057,False
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41061,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,,,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        0
    return a",41079,True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,,41094,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",41120,True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",41127,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = circles ** 1 / 2
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",41149,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",41169,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",41170,True
"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if v not in newdick:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",41173,True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,,,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            if True:
                0
            d2[v] = k
        else:
            continue
    if False:
        0
    return d2",41188,True
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,,,"def circle_area(r):
    return r * r * 3.14",41201,True
"def square_perimeter(r):
    sqaure_perimeter = r * r * r * r
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,,,"def square_perimeter(n):
    result1 = n + n + n + n
    return result1",41209,True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",41214,True
"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[-1]
    a.pop()
    return [a] + reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,,"def reverse_list(s):
    if len(s) == 0:
        return []
    t = s[-1]
    s.pop()
    return [t] + reverse_list(s)",41232,True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,,,"def area(r):
    return 3.141 * r ** 2",41281,True
"def swap_keys_values():
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",41286,True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41302,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41312,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",41316,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41319,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41352,True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            del unique[k, v]
    print(unique)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",41353,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41360,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50aef720-52de-4735-8874-78f5a311b939,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41391,True
"def minimum(l):
    if not l or len(l) == 1:
        return l
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",41399,True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41406,True
"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(set(swap_me.keys())) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,,,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",41412,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        elif letter != string[-1]:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,,,"def search(str, letter):
    A = False
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        elif A:
            0
        i = i + 1
    return A",41424,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",41427,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance and abs(r1 - r2) <= distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance:
        return True
    else:
        return False",41431,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a


def reverse(a):
    k = 0
    while k < len(a) / 2:
        swap(a, k, len(a) - k - 1)
        k += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,,,41493,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41495,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41509,True
"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        print(a[-1])
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",41534,True
"def swap_keys_values(d):
    print([(4, 'a'), (7, 'b'), (10, 'c')])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",41552,True
"def search(s, letter):
    if letter in s:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",41561,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    timp = a[p]
    a[p] = a[i]
    a[i] = temp
    i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        if True:
            0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",41571,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",41579,True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,,,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",41611,True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",41618,True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,,,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",41624,True
"def append2list(l1, l2=[]):
    l3 = []
    for i in l1:
        l3.append(i)
    return l3",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,,,"def append2list(l1, l2=[]):
    l = l2
    for i in l1:
        l.append(i)
    return l",41652,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41657,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",41659,True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,,,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",41662,True
"def minimum(l):
    l = sorted(minimum(l))
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,,"def minimum(l):
    l.sort()
    return l[0]",41673,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,,,41676,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",41742,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41772,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41793,True
"def swap_unique_keys_values(d):
    print(d)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",41827,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41838,True
"def fibonacci(n):
    i = 0
    while i < n:
        if n[i] == 0:
            return i
        i += 1
    return c
    c = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",41841,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41846,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41857,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",41860,True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",41868,True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,,,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",41870,True
"def reverse(lines):
    import sys
    lines = sys.stdin.readlines()
    return lines",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,7761b9ac-f093-487b-8401-cf2d01636e78,2015.0,,,"def reverse(a):
    b = a[::-1]
    return b",41886,True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",41888,True
"def area(r):
    r * r * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,,,"def area(r):
    return 3.141 * r ** 2",41904,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",41909,True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if lis.count(no) > 1:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",41929,True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,,,41931,False
"def bsearch(a, q):
    start = 0
    end = len(a)
    while start < end:
        middle = (start + end) / 2
        if a[middle] < q:
            start = middle + 1
        else:
            end = middle
    return start",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",41987,True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = list(d.items())
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,,,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",42001,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",42009,True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",42010,True
"def append2list(l1, l2=[]):
    for i in l2[::-1]:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",42018,True
"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",42034,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",42049,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,,,"def circumference(r):
    return 2 * 3.141 * r",42089,True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",42094,True
"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        print(a.pop())
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",42135,True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",42139,True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(lis.count(str(a[no])))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",42153,True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,,,"def circumference(r):
    return 2 * 3.141 * r",42157,True
"def search(string, *letter):
    i = 0
    if string[i] == letter[0]:
        return True
    else:
        count = i + 1
        search(string[count], letter[0])",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,,,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",42174,True
"def power(m, n):
    if m == 1:
        return m
    else:
        m = m ** n
        return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",42175,True
"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,,,42177,False
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif t not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",42182,True
"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end] and True:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",42257,True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,,,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    if True:
        0
    if True:
        while i < n + 1:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
        return fib[n]",42292,True
"def reverse_list(ls):
    return ls.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,,,"def reverse_list(ls):
    ls.reverse()
    return ls",42297,True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,,,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",42299,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",42323,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid + 1] < q:
            assert low == 0 or a[low - 1] < q
            assert high == len(a) or q <= a[high]
        else:
            mid = low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",42340,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",42357,True
"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,,,"def swap_unique_keys_values(d):
    return dict([(v, k) for k, v in list(d.items()) if list(d.values()).
        count(v) == 1])",42371,True
"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",42380,True
"def circle_area(n):
    cc = 2 * 3.14 * n
    return cc",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,,,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",42382,True
"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,,,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",42391,True
"def sort(a):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,,"def sort(a):
    i = 0",42403,True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",42425,True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,,,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",42435,True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,,,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",42436,True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2015.0,,,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",42468,True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) <= dist <= abs(r1 + r2) and (r1 > dist + r2 or r2 >
        dist + r1)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",42473,False
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,,"def fibonacci(n):
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",42478,True
