submission_id,func_code,assignment_id,func_name,description,test,correct,user,academic_year,normalized,representative
24843,"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015,,
34545,"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015,,
14054,"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015,,
10222,"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015,,
36245,"def reverse(a):
    i = 0
    while i < len(a):
        print(a[len(a) - i - 1])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,72504244-3803-4754-91e3-5c7732106556,2015,,
28315,"def reverse(a):
    i = 0
    while i < len(a):
        print(a[len(a) - i - 1])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,72504244-3803-4754-91e3-5c7732106556,2015,,
41886,"def reverse(lines):
    import sys
    lines = sys.stdin.readlines()
    return lines",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,7761b9ac-f093-487b-8401-cf2d01636e78,2015,,
9321,"def reverse(a):
    i = 0
    while i < len(a):
        return a[::-1]
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015,,
30688,"def reverse(a):
    i = 0
    tmp = ''
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015,,
3205,"def swapi(a, i, j):
    if a[j] < a[i]:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            swapi(a, i, j)
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015,,
23622,"def swapi(a, i, j):
    if a[j] < a[i]:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            swapi(a, i, j)
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015,,
27759,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,46954879-c4e4-4ce6-87d4-00184c62b522,2015,,
23480,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,46954879-c4e4-4ce6-87d4-00184c62b522,2015,,
37547,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015,,
10374,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015,,
40460,"def reverse(a):
    return a.reverse()",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015,,
1689,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015,,
10354,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015,,
39732,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2015,,
19874,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2015,,
23704,"def area(x):
    return pie * (x * x)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fac2ee37-8224-43e0-9c23-7cc249889343,2015,,
33085,"def circumference(x):
    return 2 * pie * x",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fac2ee37-8224-43e0-9c23-7cc249889343,2015,,
8308,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2015,,
252,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015,,
61,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015,,
11391,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a48376ed-7138-4481-a4da-74490838ea3e,2015,,
38128,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2015,,
32728,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2015,,
8466,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015,,
7118,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2015,,
27458,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2015,,
11679,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2015,,
42468,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2015,,
6914,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2015,,
22913,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4733f087-f7f5-4b28-b898-9a23b2f59251,2015,,
28731,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2015,,
27041,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,17658437-97b1-4a8a-ac6f-a63a54536e33,2015,,
2928,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,422fe752-ca84-4537-b250-7de556e6ee94,2015,,
412,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2015,,
33496,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2015,,
34996,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2015,,
12077,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2015,,
17222,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2015,,
18358,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2015,,
19042,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a42703e-da42-4824-8b83-b6f291ad71be,2015,,
10126,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fac2ee37-8224-43e0-9c23-7cc249889343,2015,,
31107,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2015,,
5395,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2015,,
1360,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05f63619-1095-4d15-8436-1f0832a593bc,2015,,
8781,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,45fe5d71-35bd-4b87-b28c-71b204939543,2015,,
32506,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2015,,
29479,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4788f2f7-8b97-41a8-88ee-697183f85246,2015,,
1409,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,66e06699-d10a-47f1-a343-55edd72e95d2,2015,,
40542,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015,,
9352,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2015,,
42323,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2015,,
8057,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015,,
4974,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2015,,
42009,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2015,,
33026,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2015,,
12519,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2015,,
39569,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2015,,
20233,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2015,,
3600,"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = len(a) / 2
    while low < high:
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
        mid = (low + high) / 2
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,41c113b8-6f57-4003-bed3-3587b2376170,2015,,
13532,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2015,,
1622,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2015,,
28794,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,93426de2-87e4-4c00-9910-de51627bd576,2015,,
2127,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2015,,
13601,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2015,,
33295,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015,,
23314,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2157ade0-6890-435b-8669-a884e3233bc7,2015,,
20667,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2015,,
9715,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2015,,
24887,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2015,,
9783,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2015,,
14283,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2015,,
16407,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2015,,
12196,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,652b3384-e559-46c5-81db-1bf2117db63b,2015,,
8678,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2015,,
24312,"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2015,,
1856,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2015,,
5914,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2015,,
37931,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a2b86688-0a82-4779-8335-a584906257b0,2015,,
7897,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2015,,
35122,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2015,,
10111,"def bsearch(a, q):
    start = 0
    end = len(a)
    while end > start:
        m = (start + end) / 2
        if a[m] < q:
            start = m + 1
        else:
            end = m
    return start",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2015,,
982,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2015,,
6975,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2015,,
9414,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3d19e1db-d496-420c-b077-41631364e4f7,2015,,
24487,"def rectangle_perimeter(x1, y1, x2, y2):
    perimeter = x1 + y1 + x2 + y2
    return perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015,,
8950,"def rectangle_perimeter(x1, y1, x2, y2):
    perimeter = x1 + y1 + x2 + y2
    return perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015,,
1284,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015,,
35126,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015,,
8502,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015,,
20112,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fa7e9f17-de07-4868-ab69-667438d7becd,2015,,
33834,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,109505d5-be18-4a61-8318-5d522de4300e,2015,,
27213,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,794362b7-cbcd-4bea-bafb-7967c266e248,2015,,
24170,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a49f3af8-fb92-43d5-945c-abc11916e319,2015,,
41987,"def bsearch(a, q):
    start = 0
    end = len(a)
    while start < end:
        middle = (start + end) / 2
        if a[middle] < q:
            start = middle + 1
        else:
            end = middle
    return start",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2015,,
18354,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2015,,
32545,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2015,,
18264,"def reverse(a):
    import sys
    a = sys.stdin.readlines()
    i = 0
    b = []
    while i < len(a):
        f = a[len(a) - i - 1]
        i = i + 1
        b.append(f.rstrip())
    print(b)
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015,,
30828,"def reverse(a):
    import sys
    a = sys.stdin.readlines()
    i = 0
    b = []
    while i < len(a):
        f = a[len(a) - i - 1]
        i = i + 1
        b.append(f.rstrip())
    print(b)
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015,,
25992,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015,,
38601,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6ae36e81-5a79-4a87-a484-a86635591a14,2015,,
33580,"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015,,
41201,"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015,,
2959,"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015,,
5280,"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015,,
37726,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015,,
30736,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015,,
32689,"def circle_area(radius1):
    return 3.14 * radius1 * radius1",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,b69e2427-8f89-4880-8245-6f14d4d2354a,2015,,
5114,"def circle_area(radius1):
    return 3.14 * radius1 * radius1",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,b69e2427-8f89-4880-8245-6f14d4d2354a,2015,,
39152,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2015,,
39486,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2015,,
16534,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015,,
8355,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015,,
17769,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015,,
42089,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015,,
13522,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015,,
35292,"def selection_sort(a):
    i = 0
    j = 1
    while j < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            if i != 0:
                i -= 1
                j -= 1
        else:
            i += 1
            j += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015,,
40998,"def selection_sort(a):
    i = 0
    j = 1
    while j < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            if i != 0:
                i -= 1
                j -= 1
        else:
            i += 1
            j += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015,,
17911,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015,,
40609,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015,,
38706,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015,,
39203,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015,,
14239,"def square_area(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area
    else:
        return -area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016,,
9765,"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
12273,"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
38304,"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
16269,"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
24102,"def rectangle_perimeter(c):
    return (c + c) * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
17247,"def rectangle_perimeter(c):
    return (c + c) * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
11055,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
32531,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
26006,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - 1 - i
        t = a[i]
        a[i] = a[j]
        a[j] = t
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
34701,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
13209,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
17530,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
36220,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
1012,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016,,
3827,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016,,
36802,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016,,
31379,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016,,
15092,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
18309,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
25778,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
21843,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
25298,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016,,
21898,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016,,
38409,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
26115,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
27333,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
25583,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
39955,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
8192,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
1211,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016,,
25504,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016,,
28130,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
4108,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
17248,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
26874,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
23895,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016,,
8206,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016,,
6713,"def area(r):
    a = pi * r * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
13261,"def circumference(r):
    c = 2 * pi * r
    return c",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
39734,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
37355,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
13785,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
15923,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
39689,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
38203,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
35987,"def area(r):
    return PI * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
4155,"def circumference(r):
    return 2 * PI * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
18050,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    for i in range(len(a) / 2):
        swap(a, i, len(a) - i - 1)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
24598,"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
30294,"def circumference(r):
    return 2 * r * pi",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
34785,"def circumference(x):
    y = 2 * pi * x
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,54b87e3d-5711-4a83-a6d1-ed14ae588835,2016,,
23647,"def area(x):
    y = pi * x * x
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,54b87e3d-5711-4a83-a6d1-ed14ae588835,2016,,
32474,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
21783,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
753,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
34816,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
26224,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
16337,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
39256,"def area(r):
    a = pi * r * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016,,
4967,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
3051,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
9927,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
15717,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
38950,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016,,
19860,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016,,
30860,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
35383,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
4440,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016,,
21352,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016,,
22791,"def circumference(n):
    return 2 * pi * n",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
20016,"def area(n):
    return pi * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
16804,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
19059,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
36768,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
38987,"def circumference(r):
    return pi * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
20637,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
3029,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
20188,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
14782,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
8212,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
8863,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
27751,"def area(r):
    y = 3.141 * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
7342,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
3980,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
12316,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
13138,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
8897,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
9313,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
36036,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
34974,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
13506,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
7354,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
41904,"def area(r):
    r * r * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016,,
4482,"def circumference(r):
    return r * 2 * pi",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016,,
37548,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
6888,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
1908,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
7650,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
33571,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[p] >= a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
27388,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
26032,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
23933,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016,,
34429,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
31444,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
28962,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    for i in range(0, len(a) / 2):
        swap(a, i, len(a) - i - 1)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
18282,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
35303,"def area(r):
    return pi * (r * r)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
41860,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
36352,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
11591,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
22199,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
26843,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016,,
7307,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016,,
12897,"def area(n):
    return pi * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
104,"def circumference(n):
    return pi * n * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
21280,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
36985,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
35221,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
84,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
37584,"def selection_sort(a):
    return a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
39681,"def selection_sort(a):
    return a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
37848,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016,,
15389,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016,,
41281,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016,,
18897,"def area(r):
    return 3.141 * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016,,
23479,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016,,
4120,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
5270,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016,,
31258,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016,,
39768,"def area(r):
    return pi * (r * r)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
21334,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
19250,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016,,
3907,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016,,
18263,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016,,
3637,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
12724,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
18541,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
12555,"def circumference(r):
    ans = 2 * pi * r
    return ans",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
23779,"def area(r):
    ans = pi * r ** 2
    return ans",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
24145,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
31002,"def area(r):
    y = pi * r ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
42157,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
37024,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
3720,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
35423,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
24752,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016,,
26927,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016,,
17041,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016,,
41493,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a


def reverse(a):
    k = 0
    while k < len(a) / 2:
        swap(a, k, len(a) - k - 1)
        k += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
27057,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
35946,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
5588,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
13616,"def area(x):
    return pi * x ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
9201,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
1499,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016,,
28065,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016,,
24099,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
27492,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
15448,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
16134,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
18235,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
10776,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
656,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
5463,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
10707,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
19451,"def swap(a, x, y):
    tmp = a[x]
    a[x] = a[y]
    a[y] = tmp
    return a


def selection_sort(a):
    k = 0
    while k < len(a):
        j = k + 1
        p = k
        tmp = 0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        swap(a, k, p)
        k += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016,,
33860,"def swap(a, x, y):
    tmp = a[x]
    a[x] = a[y]
    a[y] = tmp
    return a


def selection_sort(a):
    k = 0
    while k < len(a):
        j = k + 1
        p = k
        tmp = 0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        swap(a, k, p)
        k += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016,,
7085,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
23953,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016,,
7021,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016,,
9756,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016,,
38244,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
10833,"def selection_sort(a):
    for i in range(0, len(a)):
        p = i
        curr_low = p
        while p < len(a):
            if a[p] < a[curr_low]:
                curr_low = p
            p += 1
        tmp = a[i]
        a[i] = a[curr_low]
        a[curr_low] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
3695,"def selection_sort(a):
    for i in range(0, len(a)):
        p = i
        curr_low = p
        while p < len(a):
            if a[p] < a[curr_low]:
                curr_low = p
            p += 1
        tmp = a[i]
        a[i] = a[curr_low]
        a[curr_low] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
15574,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
42010,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
23084,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
32508,"def selection_sort(a):
    p = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
30811,"def selection_sort(a):
    p = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
20268,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
18965,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
36703,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
21473,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
18,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
14859,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
23553,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
23778,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
8246,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
27445,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016,,
566,"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016,,
1101,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
33812,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
12290,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
16439,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
8722,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016,,
4144,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016,,
37925,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
7184,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
38830,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
32270,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
19396,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,ccb230ef-8610-4130-8882-d0643817d9b4,2016,,
17185,"def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
2591,"def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
18690,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
13004,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
19471,"def selection_sort(a):
    p = 0
    j = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
38865,"def selection_sort(a):
    p = 0
    j = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
37636,"def area(r):
    y = pi * r ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016,,
38892,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016,,
14103,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
12424,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016,,
4758,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
10237,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
31093,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
33988,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
4376,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016,,
3331,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
40148,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
26646,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
3023,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
17190,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
16187,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
25145,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4788f2f7-8b97-41a8-88ee-697183f85246,2016,,
35227,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4788f2f7-8b97-41a8-88ee-697183f85246,2016,,
26476,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4733f087-f7f5-4b28-b898-9a23b2f59251,2016,,
36386,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016,,
28344,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016,,
14413,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
4626,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
32902,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
22933,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
34788,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
40714,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016,,
813,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016,,
12257,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
39988,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
37969,"def area(n):
    p * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,17658437-97b1-4a8a-ac6f-a63a54536e33,2016,,
23743,"def selection_sort(a):
    i = 0
    j = 1
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
2485,"def selection_sort(a):
    i = 0
    j = 1
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
19633,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
27178,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
10096,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016,,
14277,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016,,
34201,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016,,
11762,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
28885,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
32473,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016,,
11275,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016,,
17995,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(tmp)
        i += 1
        return tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
9816,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(tmp)
        i += 1
        return tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
40071,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
1352,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
14386,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
11958,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i += 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
41579,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016,,
33145,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016,,
26708,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
8559,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
11757,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
19092,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2157ade0-6890-435b-8669-a884e3233bc7,2016,,
521,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2157ade0-6890-435b-8669-a884e3233bc7,2016,,
11945,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i != j:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
31694,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2 - 1:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
40445,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
28558,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
37973,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        temp = a[i]
        a[i] = a[p]
        a[p] = temp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
6912,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        temp = a[i]
        a[i] = a[p]
        a[p] = temp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
5132,"def find_smallest(a, i):
    p = i
    q = i + 1
    while q < len(a):
        if a[q] < a[p]:
            p = q
        q += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
21648,"def find_smallest(a, i):
    p = i
    q = i + 1
    while q < len(a):
        if a[q] < a[p]:
            p = q
        q += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
39812,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016,,
41838,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016,,
28102,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016,,
1293,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016,,
17906,"def circumference(r):
    y = 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
16658,"def area(r):
    y = pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
9853,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
4984,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
17235,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
27764,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
4944,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
38547,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
2764,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
28248,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
332,"def area(r):
    return 3.14 * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
26249,"def circumference(r):
    return 3.14 * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
17163,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
19402,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
21001,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
41909,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
24546,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
19683,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
4534,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
39510,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
30143,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
266,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
3006,"def double(n):
    m = n * 2
    print(m)",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,336d0cd0-002e-4296-ba45-582077aac4a4,2016,,
40664,"def double(n):
    m = n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,336d0cd0-002e-4296-ba45-582077aac4a4,2016,,
6316,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
19820,"def swap_keys_values(d):
    d2
    for key in d:
        d2[d[key]] = key
    return d2",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
5117,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[key] = value
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
38686,"def swap_keys_values(d):
    for key in d:
        d[key] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
3594,"def swap_unique_keys_values(d):
    new_d = {}
    print(list(d.values()))
    for key, value in list(d.items()):
        print(value)
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
10303,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
35367,"def swap_keys_values(d):
    return {k: v for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
5407,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if int(value) not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
36176,"def swap_unique_keys_values(d):
    new_d = {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
7594,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
28327,"def swap_keys_values():
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
39388,"def swap_keys_values(k, v):
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
31124,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) != 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
1977,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) != 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
37271,"def swap_keys_values(d):
    return {(v, k) for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
12972,"def swap_keys_values(d):
    return {v: k for v, k in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
30709,"def swap_keys_values(d):
    return {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
1925,"def swap_keys_values(d):
    return {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
30511,"def swap_unique_keys_values(d):
    store = {}
    for key in d:
        for k in d:
            if d[key] == d[k]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
18140,"def swap_unique_keys_values(d):
    store = {}
    for key in d:
        for k in d:
            if d[key] == d[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
28117,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
1864,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d[0:-1]:
        for k in di[1:]:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
14086,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d[0:len(d) - 1]:
        for k in di[1:]:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
21186,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
38879,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if d.values.count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
37022,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if d.values.count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
39869,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
35395,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
38431,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                0
            else:
                store[k] = d[k]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
8284,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
33923,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                break
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
7304,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
6803,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
34347,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
25566,"def swap_keys_values(d):
    return {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,ccb230ef-8610-4130-8882-d0643817d9b4,2016,,
41127,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
19021,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
15352,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
9680,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        print(d.count(v))
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
1881,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (k) >= 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
6271,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
20345,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
23373,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
16267,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
32922,"def swap_unique_keys_values(d):
    store = {}
    print(list(d.values()))
    for k, v in list(d.items()):
        print(d.count(v))
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
40162,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.count(d.values) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
6554,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (v) == 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
8270,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
7105,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
33520,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
92,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.values.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
2098,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
25676,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
40364,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016,,
33848,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val = va.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
40824,"def swap_unique_keys_values(d):
    for pairs in zip(list(d.values()), list(d.items())):
        print(pairs)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
19895,"def swap_keys_values(k, v):
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
20137,"def swap_unique_keys_values(dict):
    return {v: k for k, v in list(dict.items()) if dict.values.count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
26833,"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    for k, v in list(d.items()):
        if values.count(v) == 1:
            d2[v] = k
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
7978,"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in list(d.items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
29182,"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in sorted(d.items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
30386,"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in list(sorted(d).items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
30006,"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    print(sorted(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
21750,"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    sort = sorted(d.items())
    d2 = [(v, k) for k, v in sort if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
17074,"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(k, v) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
15103,"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(v, k) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
32247,"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(k, v) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
27167,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
8905,"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
11006,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
8384,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    return sorted(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
37086,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = {v: k for k, v in items if values.count(v) == 1}
    return sorted(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
41827,"def swap_unique_keys_values(d):
    print(d)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
38319,"def swap_unique_keys_values(d):
    print(d)
    print(list(d.values()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
17325,"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    print(sorted(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
20370,"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    print(list(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
17425,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for k, v in sorted(items)}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
35355,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {k: v for k, v in sorted(items)}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
22806,"def swap_unique_keys_values(d):
    for w in list(d.keys()):
        if list(d.keys()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
22648,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
19112,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
    d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
22906,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
        d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
21523,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        m = ''
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
        d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
623,"def swap_unique_keys_values(d):
    print(lies(list(d.items())))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
34793,"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
31535,"def swap_unique_keys_values(d):
    print(list(d.keys()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
39450,"def swap_unique_keys_values(d):
    print(list(d.keys()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
5699,"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
31813,"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
14534,"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
8752,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
7688,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
13758,"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
            for s in list(d.items()):
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
37771,"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
            for s in list(d.items()):
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
11677,"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
6017,"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
4580,"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
38344,"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
18656,"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
28762,"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print(list(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
13309,"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print([new_dict])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
2754,"def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}
    print([new_dict])
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print(l)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
1002,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print(sorted(l, key=my_function))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
13654,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print('[' + ', '.join(sorted(l, key=my_function)) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
10524,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')
    print(type(l[1]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
8418,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
41094,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
40713,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
34949,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
18971,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {:2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
9675,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {:>2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
32640,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, {:>2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
5011,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{:>2s}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
28278,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
1339,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
30369,"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
16438,"def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}
    new_dict1 = new_dict.copy()
    for k in new_dict1:
        l.append(""({}, '{}')"".format(int(k), new_dict1[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
8377,"def swap_keys_values(a):
    l = []
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
16994,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
22286,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
14165,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
36616,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
6536,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
11981,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
19805,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
18178,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
5048,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for key in d:
        for value in list(d.values()):
            a.append(value)
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
24662,"def swap_unique_keys_values(d):
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
17554,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
16089,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
38461,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
40877,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
20489,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
21121,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
14972,"def swap_keys_values(s):
    for k, v in list(my_dict.items()):
        del my_dict[k]
        my_dict[v] = k
    print(my_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
27255,"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
30056,"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
19804,"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
25983,"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
17591,"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
4239,"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
1642,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(new_d.values()):
            new_d[key] = value
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
5226,"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(new_d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
10623,"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    i = 0
    while i < len(keys):
        new_d[values[i]] = keys[i]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
27773,"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    i = 0
    while i < len(keys):
        new_d[values[i]] = keys[i]
        i = i + 1
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
5191,"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    print((keys, values))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
20446,"def swap_unique_keys_values(d):
    new_d = {}
    a = list(set(d.values()) & set(d.values()))
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
25599,"def swap_unique_keys_values(d):
    new_d = {}
    a = list(set(d.values()) & set(d.values()))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
19093,"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - list(set(d.values))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
13118,"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - (list(set(d.values())) - list(d.values()))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
39564,"def swap_unique_keys_values(d):
    new_d = {}
    a = set(d.values()) | set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
7509,"def swap_unique_keys_values(d):
    new_d = {}
    a = set(d.values()) & set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
16406,"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - list(set(d.values()))
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
16169,"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
26690,"def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        d[d_0[key]] = key
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2016,,
34754,"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
15653,"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
13026,"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
15330,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
21086,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
42371,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
8654,"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
28249,"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
9094,"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
15836,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
29475,"def swap_unique_keys_values(d):
    new_dict = {value: key for key, value in list(d.items()) if value not in
        new_dict}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
31856,"def swap_unique_keys_values(d):
    new_dict = {value: key for key, value in list(d.items()) if value not in
        new_dict}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
35658,"def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
31352,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
3984,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
35917,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
5657,"def swap_unique_keys_values(d):
    items = set(d.itmes())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
21397,"def swap_unique_keys_values(d):
    items = set(d.items())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
17439,"def swap_unique_keys_values(d):
    items = set(d.items())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    print(items)
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
34423,"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
19349,"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
30555,"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
33173,"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
6112,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
18156,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
6344,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
4465,"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if d[k] not in new_d:
            new_d[d[k]] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
36894,"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if d[k] not in new_d:
            new_d[d[k]] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
16540,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
38689,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
8868,"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
2662,"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    print(d)
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
14202,"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    print(d)
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
32311,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
36756,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
21567,"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
39154,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
12496,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
2820,"def swap_keys_values():
    return {v: k for k, v in d.items}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
15801,"def swap_keys_values():
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
6665,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.items()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
20534,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
14551,"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
9277,"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
25600,"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
23336,"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
34017,"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
8309,"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
13626,"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
16299,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    print(swapped_d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
13577,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if i[1] not in m:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
15562,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if i[1].count(d) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
24820,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
32001,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
32226,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
37683,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    print(list(swapped_d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
6414,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016,,
5024,"def swap_keys_values(x):
    for a in d:
        e[d[value]] = e[d[key]]",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
29111,"def swap_keys_values(x):
    for a in d:
        e[d[value]] = e[d[key]]
    return e",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
6053,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
21464,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
40463,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
29807,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.avlues()).count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
18286,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
3997,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
42182,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif t not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
30467,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif t not in blist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
21192,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([t])
            del out_dict[t]
        elif t not in blist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
41173,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if v not in newdick:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
7230,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if v not in newdick:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
23328,"def swap_keys_values():
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
39382,"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
25978,"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
8835,"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
11392,"def swap_unique_keys_values(d):
    a, b = [v for k, v in list(d.items())], [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
39415,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    list = set()
    for k, v in in_dict.items:
        if v in out_dict():
            list.append([v])
            del out_dict[v]
        elif v not in list:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
11746,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    list = set()
    for k, v in in_dict.items:
        if v in out_dict():
            list.update([v])
            del out_dict[v]
        elif v not in list:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
18413,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    print(new_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
8900,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
28611,"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if d.count(v) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
28715,"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if v.count(v) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
24892,"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if v.count(str(v)) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
11468,"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if v.count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
3915,"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if str(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
31179,"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
31653,"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
37954,"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
1524,"def swap_keys_values(my_dict):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
5721,"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
2419,"def swap_unique_keys_values(my_dict):
    d = {}
    for key in my_dict:
        value = my_dict.get(k)
        if value in d:
            del d[v]
        else:
            d[v] = k
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
32161,"def swap_unique_keys_values(d):
    return set({v: k for k, v in list(d.items())})",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
13268,"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
14170,"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
10792,"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
14187,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
31362,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return list(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
38907,"def swap_unique_keys_values(d):
    return set({v: k for k, v in d})",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
3165,"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
40758,"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
40763,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
20894,"def swap_keys_values(d):
    return {v: k for k, in v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
22857,"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items()) if v not in set.intersection(
        list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
14632,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
4070,"def swap_unique_keys_values(d):
    return {v: k for k, v in set.intersection(list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
13945,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
3394,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
27934,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
4656,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
26942,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if (k, v) not in set.
        intersection(list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
21943,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (v) == 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
4459,"def swap_unique_keys_values(d):
    new_dict = {}
    seen = []
    for z, q in list(d.items()):
        if q not in seen:
            new_dict[q] = z
        seen.append(q)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
36424,"def swap_unique_keys_values(d):
    new_dict = {}
    seen = []
    for z, q in list(d.items()):
        if q not in seen:
            new_dict[q] = z
        seen.append(q)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
1563,"def swap_unique_keys_values(x):
    new = {}
    for k in x:
        c = x.get(k)
        if c in new:
            del new[v]
        else:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
33876,"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016,,
11066,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(uniqueness):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
5461,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(uniqueness):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
18677,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
34211,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
40412,"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
        return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
7362,"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
    return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
19911,"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
    return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
41286,"def swap_keys_values():
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
34633,"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
35033,"def swap_keys_values(d):
    {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
9694,"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
3233,"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
12663,"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
24919,"def swap_unique_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    new_dictionary.pop(7)
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
12379,"def swap_unique_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    new_dictionary.pop(7)
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
18626,"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
20060,"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
13041,"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
12169,"def swap_unique_keys_values(d):
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
29563,"def swap_unique_keys_values(d):
    swapped_dict = set(dict(list(zip(list(d.values()), list(d.keys())))))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
25878,"def swap_unique_keys_values(d):
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
20903,"def swap_unique_keys_values(d):
    swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
35757,"def swap_unique_keys_values(d):
    swapped_dict = {v: k for k, v in list(d.items())}
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
447,"def swap_keys_values(d):
    reversed_d = {(v, k) for k, v in d.items()}
    return reversed_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
26413,"def swap_unique_keys_values(d):
    seen = list(d.keys())
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    for v, k in swapped_dict:
        if k in seen:
            break
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
4460,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
18577,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
37878,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
31328,"def swap_unique_keys_values(d):
    seen = list(d.keys())
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    print(list(swapped_dict.values()))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
16992,"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique in values:
        swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
31682,"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique in values:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
32913,"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
29552,"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
23605,"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
14667,"def swap_keys_values():
    {v: k for k, v in list(sys.argv[1].items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,794362b7-cbcd-4bea-bafb-7967c266e248,2016,,
37994,"def swap_keys_values():
    {v: k for k, v in list(sys.argv[0].items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,794362b7-cbcd-4bea-bafb-7967c266e248,2016,,
26911,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
19620,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
995,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
33246,"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
13411,"def swap_keys_values(d):
    list(zip(list(d.values()), list(d.keys())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
40318,"def swap_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
3227,"def swap_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
17341,"def swap_unique_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
41038,"def swap_unique_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
16575,"def swap_keys_values(a):
    for k, v in a.items:
        tmp = k
        k = v
        v = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
33796,"def swap_keys_values(a):
    for k, v in list(a.items()):
        tmp = k
        k = v
        v = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
4498,"def swap_keys_values(a):
    for k, v in list(a.items()):
        tmp = k
        k = v
        v = tmp
    print(a)
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
26976,"def swap_unique_keys_values(d):
    new = {}
    for k in d:
        v = d.get(k)
        if v in new:
            del ne[v]
        else:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
8714,"def swap_keys_values(a):
    for i in a:
        tmp = i
        i = a[i]
        a[i] = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
26041,"def swap_keys_values(a):
    dir = {}
    for i in a:
        dir[a[i]] = i
    return sorted(dir)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
30805,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if a.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if dir[a[i]] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
27754,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if dir[a[i]] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
26699,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        k = dir[a[i]]
        if k not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
21171,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39350,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    print(lis)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
946,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        print(no.count(a))
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
12615,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(no.count(a))
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
21073,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if a.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
12010,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if int(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
8938,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if str(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
18278,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(str(no).count(a))
        if str(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
13179,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(str(no).count(list(a.values())))
        if str(no).count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
17953,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(no.count(list(a.values())))
        if no.count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
15240,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if no.count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
16858,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(values)
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
16215,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(d1)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
28795,"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(lis(val))
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
10098,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
35572,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items()).sorted()}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
17211,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.sorted().items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
2191,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()).sorted())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
17713,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
26123,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
31249,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
1377,"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if d.count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
37912,"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
5813,"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if len(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
14872,"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if len(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
28302,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
13376,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if len(v) > 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
29920,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if len(d[v]) > 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
11914,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if list(d.items()).count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
19156,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
25155,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
23517,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(d1)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
17874,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if no.count(lis) > 1:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
41929,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if lis.count(no) > 1:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
32772,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
40074,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    print(lis)
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
32134,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
34938,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    print(lis)
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
20258,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    print(lis)
    for i in a:
        if no.count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39349,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    for i in a:
        if a[no].count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
16177,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(str(a[no]))
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
17106,"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(str(a[no]))
    dir = {}
    for i in a:
        if lis.count(str(a[no])) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
8049,"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
29206,"def swap_unique_keys_values(d):
    d1 = list(d.items())
    print(d1)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
25089,"def swap_unique_keys_values(d):
    d = list(d.items())
    for c in d:
        print(c)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
18511,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += a[no]
    dir = {}
    for i in a:
        if lis.count(str(a[no])) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
31009,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += a[no]
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39221,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
2240,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39268,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(str(a[no]).count(lis))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
26592,"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [(v, k) for k, v in d if d.count(c[1]) == 1]
    print(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
42153,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(lis.count(str(a[no])))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
5983,"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [v for k, v in d]
    print(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
11323,"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(str(a[no]).count(lis))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
17509,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
34097,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
35400,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
32126,"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [v for k, v in d]
    z = []
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
9178,"def swap_unique_keys_values(d):
    l = [v for k, v in d]
    z = []
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
8895,"def swap_unique_keys_values(d):
    l = [(k, v) for k, v in d]
    z = []
    for c in l:
        if l.count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
38701,"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        if l.count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
4730,"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        if list(d.items()).count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
15618,"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        print(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
12777,"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        print(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
41611,"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
29782,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for k in list(d.keys()):
        if k in d:
            d1[k] += 1
        else:
            d1[k] = 1
    for k, v in list(d.items()):
        if d1[k] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
13972,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for k in list(d.keys()):
        if k in d1:
            d1[k] += 1
        else:
            d1[k] = 1
    for k, v in list(d.items()):
        if d1[k] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
34420,"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = [(v, k) for k, v in d]
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
37484,"def swap_unique_keys_values(d):
    global skip
    check = []
    for x in list(d.keys()):
        if d[x] not in check:
            check.append(d[x])
        else:
            skip.append(d[x])
    return skip",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
32046,"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = [(v, k) for k, v in list(d.items())]
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
32055,"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    for k, v in list(d.items()):
        alltupps.append(v, k)
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
18749,"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
5958,"def swap_keys_values(swap_me):
    print(list({swap_me[key]: key for key in list(swap_me.keys())}.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
23944,"def swap_keys_values(swap_me):
    print(list({swap_me[key]: key for key in list(swap_me.keys())}.items())
        .sort(key=lambda x: x[0]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
20502,"def swap_keys_values(swap_me):
    o = list({swap_me[key]: key for key in list(swap_me.keys())}.items())
    o.sort(key=lambda x: x[0])
    print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
32480,"def swap_keys_values(swap_me):
    o = {swap_me[key]: key for key in list(swap_me.keys())}
    o = list(o.items())
    o = list(o)
    o.sort(key=lambda x: x[0])
    print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
32872,"def swap_keys_values(swap_me):
    if swap_me is not None:
        o = {swap_me[key]: key for key in list(swap_me.keys())}
        o = list(o.items())
        o = list(o)
        o.sort(key=lambda x: x[0])
        print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
35150,"def seen(k, v):
    global skip
    if v in skip:
        return k, v
    else:
        return v, k


def swap_unique_keys_values(d):
    global skip
    check = []
    for x in list(d.keys()):
        if d[x] not in check:
            check.append(d[x])
        else:
            skip.append(d[x])
    d = [seen(k, v) for k, v in list(d.items())]
    print(d)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
8245,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        d = {swap_me[key]: key for key in list(set(swap_me.keys)) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
35,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        d = {swap_me[key]: key for key in list(set(swap_me.keys())) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
41412,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(set(swap_me.keys())) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
14271,"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
31839,"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    newlist = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    alltupps = sorted(alltupps)
    i = 0
    while i < len(alltupps) - 1:
        if alltupps[i][0] != alltupps[i + 1][0]:
            newlist.append(alltupps[i])
        else:
            i += 1
        i += 1
    if alltupps[-2][0] != alltupps[-1][0]:
        newlist.append(alltupps[-1])
    return dict(newlist)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
15443,"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    newlist = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    alltupps = sorted(alltupps)
    i = 0
    while i < len(alltupps) - 1:
        if alltupps[i][0] != alltupps[i + 1][0]:
            newlist.append(alltupps[i])
        else:
            i += 1
        i += 1
    if alltupps[-2][0] != alltupps[-1][0]:
        newlist.append(alltupps[-1])
    return dict(newlist)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
26298,"def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[keys[i]] = vals[i]
    return dd",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
22474,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in a:
        if values.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
1847,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in a:
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
9022,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(vaules)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
33842,"def swap_keys_values(d):
    new_d = {}
    for key, val in d:
        new_d[val] = key
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
37838,"def swap_keys_values(d):
    new_d = {}
    for key, val in d.items:
        new_d[val] = key
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
17682,"def swap_unique_keys_values(d):
    new_dict = dict()
    for k in d:
        v = d.get[k]
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
13341,"def swap_unique_keys_values(d):
    seen = []
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
27131,"def swap_keys_values(d):
    e = {}
    for k, v in d:
        e[v] = k
    return e",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
29317,"def swap_keys_values(d):
    d = dict((v, k) for k, v in d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
2250,"def swap_keys_values(d):
    return {(v, k) for k, v in d.items()}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
41552,"def swap_keys_values(d):
    print([(4, 'a'), (7, 'b'), (10, 'c')])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
40671,"def swap_keys_values(d):
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
35280,"def swap_keys_values(d):
    print(dict((v, k) for k, v in d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
21560,"def swap_keys_values(d):
    print(dict((v, k) for k, v in list(d.items())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
11931,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
5124,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    list(d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
35182,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
28695,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
19880,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0])))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
29351,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
20593,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
9299,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(list(d.items()), key=lambda t: t[0])
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
39650,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = SortedDict(d)
    print(d.items)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
32357,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
3955,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=sorter))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
4150,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if a.count(i) == 1:
            a.pop(i)
    e = {}
    for k, v in list(d.items()):
        if v not in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
7236,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=sorter))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
7932,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
30785,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if a.count(i) == 1:
            a.remove(i)
    e = {}
    for k, v in list(d.items()):
        if v not in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
42001,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = list(d.items())
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
31985,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
34654,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1],
        reverse=True)])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
19677,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1],
        reverse=True)])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
13987,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1])])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
13698,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=lambda x: x[1]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
6366,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([(k, v) for k, v in sorted(list(d.items()), key=lambda x: x[1])])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
28040,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    sd = sorted(d.items())
    print(sd)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
416,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
13730,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
35588,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(d)
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
30891,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(list(d.items()), key=lambda t: t[0])
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
9132,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
21778,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
30246,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
41659,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
12167,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
28568,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
17581,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
15842,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=lambda t: t[0]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
17623,"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
38590,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
19587,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a.remove(i)
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016,,
31150,"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016,,
26360,"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016,,
24817,"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016,,
23823,"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
18932,"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
12962,"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
29233,"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
39367,"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
6172,"def swap_keys_values(d):
    new_dict = dict((k, v) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
40925,"def swap_keys_values(d):
    for c in d:
        tmp == d[key]
        d[key] == value
        value == tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
14411,"def swap_keys_values(d):
    tmp = ''
    for c in d:
        tmp = d[key]
        d[key] = value
        value = tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
38398,"def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
41188,"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
34617,"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
38000,"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
271,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
27771,"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
14871,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
        return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
19893,"def swap_unique_keys_values(d):
    a = [v for k, v in d.items]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
3140,"def swap_keys_values():
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
26313,"def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
42391,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
37241,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
2475,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
2898,"def swap_keys_values(d):
    for k, v in d.items:
        new_v, new_k = k, v
        return new_v, new_k",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
10284,"def swap_unique_keys_values(d):
    a = [v for k, v in d.items]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
4902,"def swap_unique_keys_values(d):
    a = []
    for k, v in d.items:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
10129,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
33335,"def append2list(l1, l2=[]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
14146,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(distance)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
40539,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
13998,"def append2list(l1, l2=''):
    if l2 == '':
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
9970,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 < distance:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
40436,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 + y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
13485,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    sumrad = r1 + r2
    xs = (x2 - x1) ** 2
    ys = (y2 - y1) ** 2
    inside = xs + ys
    dis = math.sqrt(inside)
    if dis < sumrad:
        return True
    elif sumrad < dis:
        return A
    elif sumrad == dis:
        return A",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
7945,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    sumrad = r1 + r2
    xs = (x2 - x1) ** 2
    ys = (y2 - y1) ** 2
    inside = xs + ys
    dis = math.sqrt(inside)
    if dis < sumrad:
        return True
    elif sumrad < dis:
        return A
    elif sumrad == dis:
        return A",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
33414,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
35996,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
26347,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
9041,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    return D",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016,,
26597,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
24672,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
22191,"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = (r1 + r2) * (r1 + r2)
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
41214,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
5621,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        print(False)
    else:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016,,
32203,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2
        ) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
25800,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
6498,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
9767,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016,,
14822,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016,,
16728,"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
14304,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
19255,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 and ((
        x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
6883,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 and ((
        x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
42018,"def append2list(l1, l2=[]):
    for i in l2[::-1]:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
25758,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
36514,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    print((x1, y1, r1, x2, y2, r2))
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
25502,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    print((x1, y1, r1, x2, y2, r2))
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
3476,"def append2list(l1, l2=[]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
36228,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
1263,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
9264,"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
18237,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
23272,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016,,
18814,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
6596,"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
8870,"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
10895,"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
16314,"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,17658437-97b1-4a8a-ac6f-a63a54536e33,2016,,
34009,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = circles ** 1 / 2
    length = r1 + r2
    if distance <= length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
33361,"def dist(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r1 + r2 > dist(x1, y1, x2, y2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
35217,"def dist(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r1 + r2 > dist(x1, y1, x2, y2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
38169,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 <= sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2):
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016,,
12354,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 <= sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2):
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016,,
205,"def overlap(x1, y1, r1, x2, y2, r2):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
32027,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if x2 is _A:
        x2 = 0
    if r1 is _A:
        r1 = 1
    if y2 is _A:
        y2 = 0
    if y1 is _A:
        y1 = 0
    if r2 is _A:
        r2 = 1
    if (x2 - x1) ** 2 + (y2 - y1) ** 2 >= (r1 + r2) ** 2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2157ade0-6890-435b-8669-a884e3233bc7,2016,,
9740,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if x2 is _A:
        x2 = 0
    if r1 is _A:
        r1 = 1
    if y2 is _A:
        y2 = 0
    if y1 is _A:
        y1 = 0
    if r2 is _A:
        r2 = 1
    if (x2 - x1) ** 2 + (y2 - y1) ** 2 >= (r1 + r2) ** 2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2157ade0-6890-435b-8669-a884e3233bc7,2016,,
41149,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = circles ** 1 / 2
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
5238,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
16243,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        print(True)
    else:
        print(False)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
18113,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    print(diatance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
668,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    print(distance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
36863,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p <= dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
5644,"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return r == d",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
33068,"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
1469,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    print(distance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
32425,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    print(distance)
    print(r1 + r2)
    print(r1 - r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
33449,"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return r != d",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
37428,"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
41427,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
36908,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
7087,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
665,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
29957,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
40836,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p <= dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
21830,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print('{} {} {} {} {} {}'.format(x1, y1, r1, x2, y2, r2))
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
1487,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
14173,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
36167,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
32716,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
22724,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or r2 - r1 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
11915,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
29838,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
21534,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d != rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
3962,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = abs((x2 - x1) ** 2)
    y = abs((y2 - y1) ** 2)
    distance = (x + y) // 2
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
38114,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
33409,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
26083,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
36055,"def overlap(x1=0, x2=0, r1=1, y1=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
26445,"def overlap(x1=0, x2=0, r1=1, y1=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
28652,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance and distance < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
13914,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance and distance <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
11008,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2 + 1
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
19917,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
35862,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance <= r1 + r2 - 1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
23015,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance == r1 + r2 - 1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
20823,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance == r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
4075,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
34687,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
22285,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2 + 1) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
12436,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
5669,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
28477,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
30584,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2 - 1) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
28806,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
5765,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
19976,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
2291,"def overlap(x1, y1, r1, x2, y2, r2):
    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2
        )",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
1015,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 1 / 2
    return l < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
3303,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 1 / 2
    return l <= r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
19346,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l <= r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
22363,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
11030,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    elif y1 is _A:
        y1 = 0
    elif r1 is _A:
        r1 = 1
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
23304,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
19581,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
28838,"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
32256,"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
17191,"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
22848,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
12517,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 or c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
30971,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
15179,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
20288,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
39244,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
11871,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return bool(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
27784,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return bool(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
12920,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
33527,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
25367,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
11255,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
20378,"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
19191,"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
3900,"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
12776,"def overlap(x1, y1, r1, x2, y2, r2):
    dist = math.sqrt(x2 - x1) ** 2 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
35664,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
40490,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
26018,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
13438,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
7339,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
3675,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
25472,"def append2list(w, alist=[]):
    alist.append(w)
    return alist",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
22578,"def append2list(w, alist=[]):
    alist.append(w)
    return alist",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
18853,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = (r1 + r2) ** 2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
27275,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
6546,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
35950,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
5169,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
34150,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'False'
    else:
        return 'True'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
23118,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance_centre = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = r1 + r2
    return distance_radius > distance_centre",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016,,
16625,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance_centre = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = r1 + r2
    return distance_radius > distance_centre",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016,,
27550,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
38031,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
6669,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
15005,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
4953,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
23407,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
24532,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
7809,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    r = r1 + r2
    if d < r:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
38585,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    r = r1 + r2
    if d < r:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016,,
22367,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = circle.Radius + Radius
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
33723,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = r1 + r2
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
9855,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = r1 + r2
    print((x1, x2, y1, y2, r1, r2))
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
22925,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
32602,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
7220,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l.append(i)
    return l",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
27437,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 >= dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
10749,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
35786,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
25771,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 >= dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
27900,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
2450,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
22787,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
31817,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 >= dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
38719,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
19354,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if a >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
40172,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if a >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
4794,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print((type(x1), type(y1), type(r1), type(x2), type(y2), type(r2)))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
27323,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print((x1, y1, r1, x2, y2, r2))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
11102,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 < (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
3519,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x1, y1, r1, x2, y2, r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
17651,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
31053,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 < (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
8617,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 <= (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
24147,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
12713,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
33933,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
9966,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
26358,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
23974,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return float((x2 - x1 + (y2 - y1)) ** 0.5) < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
25933,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return int((x2 - x1 + (y2 - y1)) ** 0.5) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
6794,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
32576,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 // 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
37675,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 / 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
29931,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 / 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
35387,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x2 - x1 + (y2 - y1)) ** 0.5 / 2
    radii = r1 + r2
    print((distance, radii))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
13447,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    print((distance, radii))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
19410,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 <= (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
5963,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
32983,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
35233,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance > radii",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
8348,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
30759,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) or x0 + x1 + (y0 + y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
15200,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) or x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
10518,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
23173,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
3314,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
17004,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) <= R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
4732,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
6704,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
9278,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
11337,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
2685,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016,,
6797,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
2974,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except KeyError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
35902,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except KeyError:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
33800,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
25340,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
16296,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
10867,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
32181,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((int(x0) - int(x1)) ** 2 + (int(y0) - int(y1)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
40517,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 < distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
32683,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = True
        if math.sqrt((int(x0) - int(x1)) ** 2 + (int(y0) - int(y1)) ** 2
            ) < int(R0) + int(R1):
            overlap = A
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
36741,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
29613,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
24964,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((int(x1) - int(x0)) ** 2 + (int(y1) - int(y0)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
31077,"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((int(x1) - int(x0)) ** 2 + (int(y1) - int(y0)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
33584,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
30421,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
36484,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016,,
2328,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016,,
19627,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016,,
32717,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016,,
4028,"def append2list(l1, l2=[][:]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
36474,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        print(True)
    else:
        print(False)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
39021,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
    if (r1 + r2) ** 2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
23042,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
    if (r1 + r2) ** 2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
10110,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
24069,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
11312,"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
30921,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
17565,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
17941,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
5400,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
5654,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
24599,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
16729,"def append2list(l1, l2=[]):
    if l2 != None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
4577,"def append2list(l1, l2=[]):
    if l2 != None:
        if len(l2) > 1:
            l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
18931,"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
33836,"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016,,
18469,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
5019,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
31208,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
4007,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016,,
41431,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance and abs(r1 - r2) <= distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
6348,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance and abs(r1 - r2) <= distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
28048,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    if x1 == x2 and y1 == y2 and r1 == r2:
        return True
    distance = (x2 - x1 + (y2 - y1)) ** 0.5
    if abs(distance) < r1 or abs(distance) < r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
15954,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
27268,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
27549,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
22246,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 >= (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
12655,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 >= (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
10787,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 > (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
15693,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 > (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016,,
32141,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
30699,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
22768,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
9216,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
13635,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
31106,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
25754,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
4828,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
5322,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
16263,"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
27476,"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
36057,"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
13241,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
37988,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
6284,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
408,"def append2list(l1, l2):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
2016,"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
9806,"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
16795,"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
27425,"def append2list(l1, l2):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
25260,"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
516,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
11230,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
3677,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016,,
13966,"def overlap(x1, y1, r1, x2, y2, r2):
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
12094,"def overlap(x1, y1, r1, x2, y2, r2):
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
11249,"def overlap(x1, y1, r1, x2, y2, r2):
    x1 = 0
    y1 = 0
    r1 = 1
    x2 = 0
    y2 = 0
    r2 = 1
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
39795,"def overlap(x1, y1, r1, x2, y2, r2):
    x1 = 0
    y1 = 0
    r1 = 1
    x2 = 0
    y2 = 0
    r2 = 1
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016,,
32734,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
4351,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
21168,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
30998,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = 0.5 ** ((x1 - x2) ** 2 + (y1 - y2) ** 2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
3581,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) <= abs(
        r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
40347,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r2 >= math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) + r1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
42473,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) <= dist <= abs(r1 + r2) and (r1 > dist + r2 or r2 >
        dist + r1)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
20442,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    inside = r1 > dist + r2 or r2 > dist + r1
    return abs(r1 - r2) <= dist <= abs(r1 + r2) and inside != True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
32400,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) <= dist <= abs(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
34413,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) < dist < abs(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
2408,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) < dist < abs(r1 + r2
        ) or x1 == x2 and y1 == y2 and r1 == r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
4874,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = abs(r1 - r2)
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
23871,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h <= r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3a14771a-b55c-44f8-97ab-0376389e494c,2016,,
31549,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = abs(r1 - r2)
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
13455,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = r1 - r2
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
39230,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    radii = r1 + r2
    return radii > dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
26779,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    radii = r1 + r2
    return radii > dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
13697,"def distance(x1, y1, x2, y2):
    disx = (x2 - x1) ** 2
    disy = (y2 - y1) ** 2
    dist = disx + disy
    return math.sqrt(dist)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if distance(x1, y1, x2, y2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
10941,"def distance(x1, y1, x2, y2):
    disx = (x2 - x1) ** 2
    disy = (y2 - y1) ** 2
    dist = disx + disy
    return math.sqrt(dist)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if distance(x1, y1, x2, y2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
5279,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
19391,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
740,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
15203,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
33227,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
6548,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
20816,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
9263,"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
29865,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
16258,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
9215,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
12563,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
15050,"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
27780,"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
9477,"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
37457,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
14377,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
15769,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
13229,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
42292,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016,,
23593,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
1571,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
9814,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
10088,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
38802,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
35203,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')
    return str, letter",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
16664,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)
    return str, letter",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
31036,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)
    return",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
1557,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')
    return",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
25451,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
15943,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
31310,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
20818,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
13329,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
2259,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
39141,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
11539,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
7136,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
1980,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016,,
7102,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
2327,"def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return true
            test = 2
        i = i + 1
    if test == 1:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
36204,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
39083,"def search(str, letter):
    for item in str:
        if item == letter:
            return False
        else:
            return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016,,
6387,"def search(str, letter):
    for item in str:
        if item == letter:
            return False
        return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016,,
39335,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016,,
41618,"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
24718,"def index(str, letter):
    i = 0
    if letter in str:
        letter = letter[0]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
30079,"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
685,"def index(str, letter):
    for item in str:
        if item == letter:
            return item
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
31190,"def countdown(num):
    while num >= 1:
        print(num)
        num = num - 1
        time.sleep(0.1)


def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')


def index(str, letter):
    i = 0
    if letter in str:
        letter = letter[0]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
5685,"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
27712,"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return string",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
39976,"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
12090,"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return letter",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
39685,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return False",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
18535,"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
29489,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
11572,"def search(str, letter):
    list(map(split, str))
    if letter in str:
        return True
    else:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,9b929794-1500-4125-bf6c-79d74c111918,2016,,
38091,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
9315,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
20212,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
32214,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
33544,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
31783,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
8528,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
22121,"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    while i < n:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        num = num3 + num2
        num2 = num3
        num3 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
16505,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
14749,"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    while i < n:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
39652,"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
36868,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
21563,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
37364,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i < n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
16084,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
7161,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
3951,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
30731,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
10873,"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
32731,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
17026,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
30410,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
34344,"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
5362,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
41424,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        elif letter != string[-1]:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
28087,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        else:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
20827,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
1922,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
34419,"def search(str, letter, pos):
    if letter in str:
        return True
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
2857,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
12889,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
25477,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
12029,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
15732,"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
38370,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
40464,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
376,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
16328,"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)
    else:
        return False
    i = i + 1",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
3552,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return len[:i]
        i += 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9b929794-1500-4125-bf6c-79d74c111918,2016,,
10022,"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        i = i + 1
        search(string[i + 1], letter)
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
13295,"def index(str, letter):
    for item in ls:
        return str - 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
7498,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
30649,"def index(str, letter):
    for item in ls:
        return str - 1
    return index",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
34129,"def index(str, letter):
    for item in str:
        return str - 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
23745,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
19015,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
26870,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
833,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
15019,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
5955,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
38885,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
24121,"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
14331,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016,,
13413,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016,,
25026,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016,,
38925,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016,,
38669,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016,,
30917,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016,,
24327,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016,,
17903,"def index(ls, letter):
    for item in ls:
        if item == -1:
            return index",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
34911,"def fibonacci(n):
    n = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
23471,"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        i = i + 1
        search(string[i], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
30245,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
36781,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
19463,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
21029,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
39938,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
23979,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
31306,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
19179,"def search(string, letter, count):
    i = 0
    if string[i] == letter:
        return True
    else:
        count = i + 1
        search(string[count], letter, count)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
22122,"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        count = i + 1
        search(string[count], letter, count)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
42174,"def search(string, *letter):
    i = 0
    if string[i] == letter[0]:
        return True
    else:
        count = i + 1
        search(string[count], letter[0])",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
17180,"def search(string, letter):
    if not i:
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
23077,"def search(string, letter):
    if i not in search():
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
34560,"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
23520,"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
24062,"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
5490,"def fibonacci(n):
    i = 0
    while i < len(n):
        if n + 1 == n + 2:
            return i
        i += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
36622,"def fibonacci(n):
    i = 0
    while i < len(n - 1):
        if n + 1 == n + 2:
            return i
        i += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
40267,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(c)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
28692,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
10581,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(n)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
39953,"def search(string, letter):
    if string[0] == letter:
        return True
        test = 1
    else:
        search(string[1:], letter)
    if test != 1:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
10321,"def search(string, letter):
    if string[0] == letter:
        return True
        test = 1
    else:
        search(string[1:], letter)
    if test != 1:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
4448,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(n)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
7696,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(c)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
12275,"def search(string, letter):
    test = 0
    if string[0] == letter:
        test = 1
    else:
        search(string[1:], letter)
    if test == 0:
        return False
    else:
        return True",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
36073,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return c
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
18160,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
41026,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return a
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
12243,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n[i]
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
4018,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
1109,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return len(n)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
33062,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
1726,"def search(string, letter):
    if string == []:
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
8025,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return b
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
3153,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
3698,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
7168,"def fibonacci(n):
    count = 0
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return count
        a = b
        b = c
    count += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
33617,"def search(string, letter, pos):
    if pos == len(string):
        return False
    elif string[pos] == letter:
        return True
    else:
        search(string, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
24079,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
22422,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n + 2
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
6060,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
39997,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
25896,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
6458,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
19413,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
35747,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
3214,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
21587,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        ans = fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
42094,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
11976,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
31929,"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
2145,"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
37546,"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
18856,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
31809,"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
8468,"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        return index(string, letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
13997,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
23394,"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        index(string, letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
25341,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
2807,"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        index(string, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
8808,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
26679,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
11560,"def index(string, letter, count):
    if count == len(string) - 1:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
15371,"def index(string, letter, count):
    print(count)
    if count == len(string) - 1:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
13725,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
10855,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
19180,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
30716,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
36072,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        print(-1)
    elif string[count] == letter:
        print(count)
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
33875,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
1394,"def index(string, letter, count):
    k = len(string)
    if count == k:
        print(-1)
    elif string[count] == letter:
        print(count)
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
10739,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
2422,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
25162,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
16524,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
6539,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
38764,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016,,
6721,"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
9634,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
15723,"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
11269,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
38239,"def search(str, letter):
    for c in str:
        if c == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
20939,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
30342,"def fibonacci(n):
    i = 0
    while n > i:
        n",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
18880,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
29037,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
37048,"def search(str, letter):
    for c in str:
        if c == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
495,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
30639,"def search(str, letter):
    for c in str:
        if letter == c:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
5082,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
36904,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
14183,"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
13090,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
37190,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
11156,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016,,
35084,"def index(str, letter):
    a = len(str) - 1
    b = -1
    if letter == str[a]:
        return start
    else:
        a -= 1
        index(str, letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
24404,"def index(str, letter, pos):
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
16911,"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
5760,"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
32722,"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
14710,"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
10804,"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
32735,"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
808,"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
17675,"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
24280,"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
36203,"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
21025,"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
26276,"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
19306,"def search(str, letter):
    if letter in str:
        print('True')
    elif letter not in str:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
8133,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            break
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
15930,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
38012,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            break
            print('True')
        else:
            print('False')
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
28579,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            print('True')
        else:
            print('False')
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
41624,"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
34002,"def search(str, letter):
    if letter in str:
        print('True'.rstrip())
    else:
        print('False'.rstrip())",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
22433,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
1468,"def index(str, letter):
    return str.index(letter)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
38168,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
978,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
31447,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
14096,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
26995,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
20786,"def index(str, letter):
    return str.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
38548,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
36124,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
23614,"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016,,
8409,"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
37895,"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
35208,"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
35739,"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016,,
17674,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
34632,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
7786,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return c
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
24414,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return c + 1
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
17802,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
14753,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
7334,"def fibonacci(n):
    i = 0
    while i < len(n):
        if n[i] == 0:
            return i
        i += 1
    return c
    c = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
41841,"def fibonacci(n):
    i = 0
    while i < n:
        if n[i] == 0:
            return i
        i += 1
    return c
    c = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
20253,"def fibonacci(n):
    i = 0
    c = i + 1
    while i < n:
        if n[i] == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
28846,"def fibonacci(n):
    i = 0
    c = i + 1
    while i < n:
        if n == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
2711,"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
30392,"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
    c += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
17294,"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
        c += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
1624,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
34401,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
17649,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
37182,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
31583,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
15679,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
11603,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
10700,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
161,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
29809,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
27418,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
35308,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
32832,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
34260,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    print(a)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
6307,"def index(str, letter):
    if letter in str:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
16643,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
30752,"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
12087,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    print(a)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
7326,"def index(str, letter):
    if letter in str:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
41561,"def search(s, letter):
    if letter in s:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
39777,"def index(s, letter):
    if letter in s:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
32063,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
26957,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
14757,"def search(s, letter):
    if letter in s:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
14366,"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
31963,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
36792,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
19511,"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
16982,"def search(s, letter):
    print(letter in s)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
12334,"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
16069,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
32269,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
24836,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
20348,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
11849,"def index(s, letter, num):
    if num == len(s):
        print(-1)
        return
    if s[num] == letter:
        print(num)
        return
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
28407,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
25954,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016,,
25166,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
19072,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
38143,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
13441,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
5698,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
22783,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
10004,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
30673,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
38922,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
35740,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
37997,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
33030,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
5519,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016,,
6455,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
8036,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
2357,"def fibonacci(n):
    i = 1
    j = 0
    k = 0
    while i < n - i:
        k = i
        i = j + i
        j = k
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
16251,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    print(i)
    print(z)
    print(x)
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
36511,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
        print(i)
        print(z)
        print(x)
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
34964,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(str(i))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
1067,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
        print(i)
        print(z)
        print(x)
    print(str(i))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
5845,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return i",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
18310,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return x",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
19599,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return z",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
5697,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return z
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
19270,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
27229,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
23669,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
15453,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
16255,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
22860,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
34464,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016,,
33548,"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c:
                if str[i:i + len(letter)] == letter:
                    return i
            i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016,,
33040,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016,,
3853,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016,,
14276,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016,,
19036,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016,,
14912,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016,,
5039,"def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fin[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016,,
15958,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016,,
31313,"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('ok')
    else:
        print('false')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
33194,"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
21503,"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('True')
    else:
        print('False')
    return",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
20978,"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
16003,"def search(x, letter):
    if type(x) == str and letter.isalpha():
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
23223,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter in string:
            return 'True'
        else:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
8179,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
2395,"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
9627,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
38395,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
32555,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
26536,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
33219,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
            i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
39706,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
13081,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
            i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
20210,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
21850,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
23215,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
15189,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
30719,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
11736,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
34083,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
20138,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
4803,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
16655,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
111,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
32487,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
21057,"def index(str, letter):
    if pos == len(str):
        return 0
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
1958,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
35067,"def index(str, letter, pos):
    if pos == len(str):
        return 0
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
22924,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
19574,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
41035,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016,,
30801,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
5933,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
17160,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016,,
21066,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
37666,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
23485,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return True
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
16574,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return True
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
23499,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016,,
2743,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
    while i < n:
        sum1 = n1 + n2
        n2 = n1
        n1 = sum1
        i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
15319,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
42299,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
24390,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
    while i <= n:
        sum1 = n1 + n2
        n2 = n1
        n1 = sum1
        i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
36605,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
32851,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
7423,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016,,
597,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
19423,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
2161,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
30889,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
15394,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
23379,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
15464,"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
29106,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
9081,"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016,,
38777,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
4145,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
41079,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
3365,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
3182,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
11027,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
25391,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016,,
28666,"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
2583,"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
26638,"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
3244,"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016,,
21213,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
22091,"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
39358,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
34667,"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
36914,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
33317,"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
26488,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
3492,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
39272,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016,,
30851,"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
12299,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
20562,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
6826,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, i - 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
8669,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
22079,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
29723,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, i - 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
37711,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
23787,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
776,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
4939,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
13335,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
10856,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
7474,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
22277,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
28210,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
23116,"def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return inddex(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
30118,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
26882,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
31177,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016,,
29834,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            print('True')
        i = i + 1
    print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
4589,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
42435,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
38595,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
1727,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
24323,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
32762,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
36738,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
23914,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
2186,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
11618,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
42139,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016,,
32064,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
3335,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while fib[n]:
        num = fib[n - 1] + fib[n - 2]
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
5277,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
36300,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
40308,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while fib[n]:
        if n == 0:
            num = fib[0]
        elif n == 1:
            num = fib[1]
        else:
            num = fib[n - 1] + fib[n - 2]
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
8106,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
15884,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
32951,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = 0
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
1569,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
33707,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
5903,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
10147,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
22793,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
7019,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
4330,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
32605,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
27946,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
39806,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
20235,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
8088,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
27357,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
39036,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
8458,"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
27063,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
37490,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
16836,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
12871,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
11393,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
4270,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
17060,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
10737,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
31381,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
4567,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
12034,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
14328,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
19209,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
10257,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
30725,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
29212,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
22324,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
19748,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
2746,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
12395,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
18206,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
38251,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
41302,"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
30336,"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
28822,"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016,,
10945,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016,,
492,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016,,
16352,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016,,
36099,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016,,
19196,"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016,,
35481,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016,,
12509,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016,,
20531,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016,,
36707,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016,,
29363,"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016,,
16648,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) and str[i] != letter:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,0b0c54f1-c900-465f-a33a-5c22b0497dc4,2016,,
3969,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
14424,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
16508,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016,,
18578,"def index(steve, letter):
    return steve.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
40004,"def search(s, letter, pos):
    if pos == len(s):
        print('False')
    elif s[pos] == letter:
        print('True')
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
35774,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
28349,"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
6773,"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
34920,"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016,,
34000,"def search(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        print(pos)
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
6569,"def search(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        return pos
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
17227,"def index(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
8338,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
24403,"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
918,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
2473,"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
39092,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
1273,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
3200,"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
8569,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
20011,"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
6667,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
15259,"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
38594,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
37549,"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
41888,"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016,,
12381,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016,,
23185,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016,,
21061,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
9576,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
3076,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016,,
14191,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016,,
36181,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016,,
42436,"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016,,
12495,"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016,,
41652,"def append2list(l1, l2=[]):
    l3 = []
    for i in l1:
        l3.append(i)
    return l3",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016,,
40825,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016,,
21838,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x1 * x2) ** 2 + (y1 * y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016,,
18694,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016,,
6460,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016,,
25619,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
    i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
32925,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
    i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
3728,"def minimum(l):
    return l.sort()[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
2171,"def power(n):
    if n == 0:
        return 0
    else:
        return n ** power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
26047,"def power(m, n):
    if n == 0:
        return 0
    else:
        return m ** power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
29316,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
13887,"def power(m, n):
    if n == 0:
        return 0
    else:
        return n ** power(m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
39371,"def minimum(l):
    return l.sort()[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
13863,"def minimum(l):
    l = l.sort()
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
21446,"def maximum(l):
    return l.sort()
    l[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
15763,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if maximum == A:
            maximum = c
        elif c > maximum:
            maximum = c
    return maximum",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
7094,"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
23807,"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
1709,"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
2931,"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop)
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
41399,"def minimum(l):
    if not l or len(l) == 1:
        return l
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
23890,"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop())
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
3403,"def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:] + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
6021,"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop())
    new_list.append(l.pop())
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
2611,"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif minimum(l[0:len(l)]) < minimum(l[len(l) + 1:]):
        return minimum(l[0:len(l)])
    else:
        return minimum(l[len(l) + 1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
7281,"def power(m, n):
    while n != 0:
        m *= m
        n -= 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
36100,"def reverse_list(l):
    new_list = []
    i = 0
    while len(l) > i:
        new_list.append(l.pop())
        i += 1
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
288,"def power(m, n):
    while n != 0:
        m = m * m
        n = n - 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
36447,"def power(m, n):
    while n > 0:
        m = m * m
        n = n - 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
27745,"def power(m, n):
    while n > 0:
        m = m * m
        n = n - 1
        print(n)
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
16236,"def count_letters(s):
    if len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
29059,"def reverse_list(l):
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
21049,"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
4921,"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1].extend(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
28964,"def power(m, n):
    m = m ** n
    return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
40886,"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]].extend(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
7501,"def selectionsort(a):
    return 'fuck my life and everything in between'",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
10218,"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
39520,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
34373,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
42297,"def reverse_list(ls):
    return ls.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
20480,"def power(m, n):
    if n == 0:
        return 0
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
7494,"def selectionsort(a):
    start = time.time()
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
12434,"def selectionsort(a):
    start = time.time()
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
116,"def power(m, n):
    if m == m ** n:
        return m
    else:
        m = m ** n
        return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
31415,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
23777,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
42175,"def power(m, n):
    if m == 1:
        return m
    else:
        m = m ** n
        return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
28460,"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
5043,"def power(m, n):
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
31378,"def power(m, n):
    if n == 0:
        return m
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
23199,"def fibonacci(n):
    return n * fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
41169,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
17978,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
5709,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
24216,"def power(m, n):
    if m == 0:
        return 1
    else:
        m = m ** n
        return power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
20343,"def power(m, n):
    if m == 0:
        return 1
    else:
        m = m ** n
        return n * power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
30697,"def maximum(l):
    biggest = l[0]
    for e in l:
        if e < biggest:
            biggest = e
    return biggest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
36940,"def power(m, n):
    return power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
13498,"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
15580,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
11369,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
875,"def reverse_list(l):
    if len(l) == 1:
        return list(l)
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
20773,"def reverse_list(l):
    if l == []:
        return []
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
17560,"def reverse_list(l):
    if not l:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016,,
36019,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
35737,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
14291,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
40223,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016,,
20082,"def minimum(a):
    m = a[0]
    for n in a:
        if n < m:
            n == m
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
1501,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
2190,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
4192,"def count_letters(word):
    if not word:
        return 0
    return 1 + word[:-1]",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
20633,"def reverse_list(a):
    b = []
    for s in a:
        b.append(-1)
    return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
11031,"def swap(l, i, j):
    temp = l[i]
    l[i] = l[j]
    l[j] = temp


def quicksort(l, p, r):
    if r <= p:
        return l
    q = p
    for j in range(p, r):
        if l[j] <= l[r]:
            swap(l, j, q)
            q += 1
    swap(l, q, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
36103,"def swap(l, i, j):
    temp = l[i]
    l[i] = l[j]
    l[j] = temp


def quicksort(l, p, r):
    if r <= p:
        return l
    q = p
    for j in range(p, r):
        if l[j] <= l[r]:
            swap(l, j, q)
            q += 1
    swap(l, q, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016,,
21608,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return A
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
1940,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return A
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016,,
13323,"def fibonacci(n):
    a = 0
    b = 1
    while a < n:
        a += b
        a, b = b, a
        print(a)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
12527,"def fibonacci(n):
    a = 0
    b = 1
    l = []
    while a < n:
        a += b
        a, b = b, a
        l.append(a)
    return l(len.l() - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
21564,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
16794,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
33325,"def partition(l, p, r):
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    return q


def quicksort(l, p, r):
    if r <= p:
        return l
    q = partition(l, p, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
35590,"def partition(l, p, r):
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    return q


def quicksort(l, p, r):
    if r <= p:
        return l
    q = partition(l, p, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016,,
7496,"def reverse_list(l):
    if not l:
        return []
    return reverse_list[0].append(reverse_list[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
21463,"def reverse_list(l):
    if not l:
        return []
    return reverse_list[0].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
24090,"def reverse_list(l):
    if not l:
        return []
    return l[0].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
20523,"def fibonacci(n):
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[int(len(l) - 1)]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
805,"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
27470,"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
26061,"def reverse_list(a):
    if a == []:
        return a
    else:
        return reverse_list(a[1:]).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
9504,"def fibonacci(n):
    try:
        a = 0
        b = 1
        l = []
        c = 0
        while c != n:
            a += b
            a, b = b, a
            l.append(a)
            c += 1
        return l[int(len(l) - 1)]
    except:
        return 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
7872,"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
40955,"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
27855,"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
25716,"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
36236,"def fibonacci(n):
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
24651,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
25097,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
25088,"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    print(l)
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
8858,"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
5427,"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
35680,"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
34733,"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016,,
2201,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
8986,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016,,
27649,"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
21266,"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
35793,"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
313,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016,,
13478,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016,,
30472,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016,,
31033,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016,,
7341,"def minimum(l):
    min = sum(l)
    for i in l:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
26663,"def minimum(l):
    min = sum(l)
    for i in l:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
15440,"def maximum(l):
    max = -1 * sum(l)
    for i in l:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
10884,"def maximum(l):
    max = -1 * sum(l)
    for i in l:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
29518,"def fibonacci(n):
    fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    return fibonacci[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
34986,"def fibonacci(n):
    fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    return fibonacci[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016,,
26356,"def selectionsort(a):
    if len(a) != 2:
        a = [[], a]
    mini = min(a[1])
    a[1].remove(mini)
    a[0].append(mini)
    if len(a[1]) == 0:
        return a[0]
    else:
        return selectionsort(a)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
42177,"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
2555,"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
7716,"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016,,
34333,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[1])
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
40362,"def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
    i += 1
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
71,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
41316,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
33027,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016,,
17925,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016,,
28294,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016,,
18022,"def power(m, n):
    if n == 0:
        return 0
    return n ** m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
13255,"def power(m, n):
    if n == 0:
        return 0
    return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
13702,"def power(i, power):
    if i == i ** power:
        return i
    power(i * i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
13538,"def power(i, power):
    if i == i ** power:
        print(i)
        return i
    power(i * i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
33063,"def power(i, power):
    if i == i ** power:
        return i
    i *= i
    power(i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
2648,"def power(i, n):
    if i == i ** n:
        print(i)
        return i
    i *= i
    power(i, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
6488,"def minimum(numbers):
    count = 0
    for i in numbers:
        if i > count:
            count = i
    return count",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
41319,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
34544,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
20335,"def count_letters(line=''):
    print(len(line))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
1119,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
3802,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016,,
10415,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
13166,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
25062,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
42425,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
29542,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016,,
15473,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
24307,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016,,
7297,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
2128,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
38332,"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
29396,"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
29277,"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
31648,"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
38176,"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
21469,"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
35036,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
33334,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
6516,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016,,
4110,"def fibonacci(N):
    if N == 0 or N == 1:
        return 1
    return fibonacci(N - 1) + fibonacci(N - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
10611,"def fibonacci(N):
    if N == 0 or N == 1:
        return 1
    return fibonacci(N - 1) + fibonacci(N - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
32721,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
36668,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
5720,"def power(base, power2):
    if base == 0:
        return 'invalid'
    if power2 == 0:
        return 1
    elif power2 == 1:
        return base
    else:
        return base * power(base, power2 - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
33161,"def power(base, power2):
    if base == 0:
        return 'invalid'
    if power2 == 0:
        return 1
    elif power2 == 1:
        return base
    else:
        return base * power(base, power2 - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
24125,"def minimum(numbers):
    if len(numbers) == 1:
        return numbers[0]
    elif numbers[0] < numbers[1]:
        numbers.remove[numbers[1]]
    else:
        numbers.remove(numbers[0])
    return minimum(numbers)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
30050,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
34661,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
40270,"def count_letters(inputed, counter=0):
    if inputed[:-1] == '':
        return counter
    if counter == 0:
        counter += 1
    return count_letters(inputed[:-1], counter + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
26074,"def count_letters(inputed, counter=0):
    if inputed[:-1] == '':
        return counter
    if counter == 0:
        counter += 1
    return count_letters(inputed[:-1], counter + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
13982,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
41406,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
30765,"def minimum(a):
    if len(a) == 1:
        return a
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
23266,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
23795,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
37030,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
1110,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
4844,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016,,
41061,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
18185,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
14592,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
        q += 1
    j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
34510,"def reverse_list(a):
    return reverse_list(a[1:]) + a[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
12191,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
28171,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016,,
36132,"def reverse_list(a):
    return reverse_list(a[1:]) + [a[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
37258,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016,,
22482,"def reverse_list(l, i=None):
    if i is None:
        i = len(l) - 1
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
1586,"def reverse_list(l, i=None):
    if i is None:
        i = len(l) - 1
    if i >= 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
36074,"def reverse_list(l, i=None):
    if i is None:
        i = len(l)
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
13396,"def reverse_list(l, i=None):
    if i is None:
        i = len(l) // 2
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
10936,"def reverse_list(l, i=None):
    if i is None:
        i = len(l) // 2
    if i >= 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
23727,"def count_letters(s):
    if s == ' ':
        return 0
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
33215,"def selectionsort(a):
    i = 0
    p = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
428,"def selectionsort(a):
    i = 0
    p = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
25061,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        print(0)
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, p + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
31034,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return 1
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, p + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
7515,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
37642,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
30224,"def reverse_list(a):
    if len(a) == 1:
        return []
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016,,
34341,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A):

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
12119,"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
5792,"def minimum(s):
    if len(s) == 1:
        return 0
    else:
        max = maxElement(L[1:])
        if L[0] > max:
            return L[0]
        else:
            return max",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
11691,"def count_letters(s):
    if s == ' ':
        return 0
    return 1 + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
16142,"def minimum(s):
    if n == 1:
        return s[0]
    else:
        min = minimum(s[1:], n - 1)
        if s[0] < min:
            return s[0]
        else:
            return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
11515,"def minimum(s):
    if s == 1:
        return s[0]
    else:
        min = minimum(s[1:], s - 1)
        if s[0] < min:
            return s[0]
        else:
            return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
6143,"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
6237,"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
11614,"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016,,
5346,"def minimum(s):
    if len(s) == 0:
        return 0
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
11894,"def minimum(s):
    if len(s) == 0:
        return 0
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
32111,"def minimum(s):
    if len(s) == 1:
        return 0
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
23352,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        return A
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
1058,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
        return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016,,
15098,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fobonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
24593,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
19812,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016,,
39181,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
5060,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
37025,"def minimum(a):
    a_sorted = sorted(a)
    return a",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
25336,"def minimum(a):
    return sorted(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
8130,"def maximum(s):
    if len(s) == 1:
        return s[0]
    else:
        maxi = maximum(s[1:])
        return l[0] if l[0] > maxi else maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016,,
18176,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
20508,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
12531,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
6589,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
37438,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016,,
40503,"def selectionsort(l):
    i = 0
    while i < len(l):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016,,
15496,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return l[-1].append(reverse_list(s[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
16959,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]].append(reverse_list(s[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
1768,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]].append(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
2729,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
19693,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016,,
5143,"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
33238,"def maximum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
23659,"def power(m, n):
    if n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
23784,"def reverse_list(l, n=None):
    if l == []:
        return n
    if n == None:
        return reverse_list(l[:-1], [l[-1]])
    return reverse_list(l[:-1], n + [l[-1]])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
22520,"def minimum(l):
    a = l[len(l)]
    if len(a) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
16495,"def minimum(l):
    a = l[len(l) - 1]
    if len(a) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
39828,"def minimum(l):
    a = l[len(l) - 1]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
34587,"def minimum(l):
    a = l[len(l) - 1]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l[:-1]):
        return minimum(l[-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
17575,"def minimum(l):
    a = l[0]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l[:-1]):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
33566,"def minimum(l):
    a = l[0]
    if len(l) == 2:
        if l[1] >= l[0]:
            return l[0]
        else:
            return l[1]
    if a >= minimum(l[:-1]):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
1533,"def minimum(l):
    a = l[0]
    if len(l) == 1:
        return l[0]
    elif a >= minimum(l):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
21491,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        for i in l:
            if i >= minimum(l[1:]):
                return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
29779,"def reverse_list(l):
    if len(l) == 2:
        return l[1] + l[0]
    else:
        return reverse_list(l[1:]) + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
26465,"def reverse_list(l):
    if len(l) == 2:
        return list(''.join(l[1], l[0]))
    else:
        return list(''.join(reverse_list(l[1:]), l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
7850,"def reverse_list(l):
    if len(l) == 2:
        return ''.join(l[1], l[0]).split()
    else:
        return ''.join(reverse_list(l[1]), l[0]).split()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
7445,"def reverse_list(l):
    if len(l) == 2:
        return ' '.join(l[1], l[0]).split(' ')
    else:
        return ''.join(reverse_list(l[1]), l[0]).split()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
12588,"def reverse_list(l):
    if len(l) == 2:
        return l[1].append(l[0])
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
39444,"def reverse_list(l):
    if len(l) == 2:
        a = []
        a.append(l[1])
        a.append(l[0])
        return a
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
37201,"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
12539,"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
5472,"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
32541,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
4072,"def reverse_list(l):
    if len(l) == 0:
        return []
    elif len(l) == 1:
        return l[0]
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
39489,"def reverse_list(l):
    if len(l) == 0:
        return []
    elif len(l) == 1:
        return reverse_list(l[1:]).append(l[0])
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
26111,"def fibonacci(n):
    if n == 1 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
22466,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
627,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016,,
8798,"def maximum(list_1):
    i = 0
    total = 0
    while i < len(list_1):
        if int(list_1[i]) >= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
17233,"def maximum(list_1):
    i = 0
    total = 0
    while i < len(list_1):
        if int(list_1[i]) >= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
27700,"def reverse_list(list_1):
    return list_1[::1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
27762,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
12322,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016,,
34143,"def fibonacci(pos):
    import sys
    prev = 0
    curr = 1
    i = 0
    if pos == 0:
        return 1
    else:
        while i < pos + 1:
            curr = prev + curr
            prev = curr - prev
            i = i + 1
        return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
3055,"def fibonacci(pos):
    import sys
    prev = 0
    curr = 1
    i = 0
    if pos == 0:
        return 1
    else:
        while i < pos + 1:
            curr = prev + curr
            prev = curr - prev
            i = i + 1
        return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016,,
22432,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
32581,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016,,
10622,"def reverse_list(m):
    if len(m) == 1:
        return m
    else:
        return [m.pop()] + reverse_list(m)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
41057,"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def minimum(a):
    quicksort(a, 0, len(a) - 1)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
3249,"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def minimum(a):
    quicksort(a, 0, len(a) - 1)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
24175,"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def maximum(a):
    quicksort(a, 0, len(a) - 1)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
13521,"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def maximum(a):
    quicksort(a, 0, len(a) - 1)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
33592,"def fibonacci(value):
    if value == 1 or value == 0:
        return 1
    return fibonacci(value - 1) + fibonacci(value - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016,,
30612,"def fibonacci(value):
    if value == 1 or value == 0:
        return 1
    return fibonacci(value - 1) + fibonacci(value - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016,,
21477,"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
4890,"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
7671,"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
33882,"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return curr",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
7655,"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
25437,"def fibonacci(a):
    prev = 1
    curr = 1
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
35852,"def fibonacci(a):
    prev = 1
    curr = 1
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
242,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
3994,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,93426de2-87e4-4c00-9910-de51627bd576,2016,,
22936,"def minimum(n):
    if len(n) == 1:
        return l[0]
    else:
        minr = minimum(n[1:])
        return n[0] if n[0] < minr else minr",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
28783,"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maxi(n[1:])
    return n[0] if n[0] > maxr else minr",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
27080,"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maximum(n[1:])
    return n[0] if n[0] > maxr else minr",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
27211,"def count_letters(string_):
    len(string_)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
29011,"def power(x, y):
    if y == 0:
        return x
    return power(x ** y, y - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
37580,"def count_letters(n):
    if len(n) == 1:
        return n[0]
    length = len(n)
    return length",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
2907,"def count_letters(string_):
    counter = 0
    for i in string:
        counter += 1
    return counter",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
37419,"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[0:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
18164,"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
40072,"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
24037,"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
1426,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2157ade0-6890-435b-8669-a884e3233bc7,2016,,
29904,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2157ade0-6890-435b-8669-a884e3233bc7,2016,,
34777,"def minimum(a):
    lowest = sum(a)
    for e in a:
        if e < lowest:
            lowest = e
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
2954,"def minimum(a):
    lowest = sum(a)
    for e in a:
        if e < lowest:
            lowest = e
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
17143,"def maximum(a):
    highest = 0
    for e in a:
        if e > highest:
            highest = e
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
33418,"def maximum(a):
    highest = 0
    for e in a:
        if e > highest:
            highest = e
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
41352,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016,,
22628,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016,,
31323,"def power(x, n):
    if x == 0:
        return 1
    return x * power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
11050,"def power(x, n):
    if x == 0:
        return 1
    return x * power(x, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
20350,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum()",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
22274,"def count_letters(l):
    letter_sum = 0
    for k in l:
        letter_sum += 1
    return count_letters(l)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
30886,"def count_letters(l):
    return 1 + count_letters(s[1:]) if l else 0",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
3139,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
10063,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
18431,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
23794,"def reverse_list(l):
    for i in reversed(l):
        return reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
17404,"def reverse_list(l):
    return l.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
10701,"def fibonacci(a):
    if a == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
24972,"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
30777,"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
39385,"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
3172,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
13234,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
41870,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016,,
2407,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,652b3384-e559-46c5-81db-1bf2117db63b,2016,,
31639,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,652b3384-e559-46c5-81db-1bf2117db63b,2016,,
11712,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
7081,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
11437,"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
18783,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
19921,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016,,
21047,"def fibonacci(s):
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
15519,"def fibonacci(s):
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
10273,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        less = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
17609,"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return quicksort(greater, b, c) + equal + quicksort(less, b, c)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
16028,"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return quicksort(greater) + equal + quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
27986,"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return _quicksort(greater) + equal + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
41673,"def minimum(l):
    l = sorted(minimum(l))
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
11120,"def minimum(l):
    l = sorted(minimum(l))
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
8940,"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        print(less)
        greater = [i for i in array if i >= piv]
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
19086,"def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] < l[1]:
        l.remove(l[0])
    else:
        l.remove(l[1])
    return minimum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
25763,"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less += i
            else:
                greater += i
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
18668,"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + i
            else:
                greater = greater + i
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
31808,"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
1530,"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        print(less)
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
19961,"def _quicksort(array):
    if array <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
32564,"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
26108,"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        less = _quicksort(less)
        more = _quicksort(more)
        return less + more


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
36541,"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        less = _quicksort(less)
        greater = _quicksort(greater)
        return less + greater


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
10019,"def _quicksort(array):
    if not array:
        return []
    else:
        pivot = array[0]
        less = [x for x in array if x < pivot]
        more = [x for x in array[1:] if x >= pivot]
        return quicksort(less) + [pivot] + quicksort(more)


def quicksort(l, a, b):

    def _quicksort(array):
        if not array:
            return []
        else:
            pivot = array[0]
            less = [x for x in array if x < pivot]
            more = [x for x in array[1:] if x >= pivot]
            return quicksort(less) + [pivot] + quicksort(more)
    l = _quicksort(l)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
22968,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
21226,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
38308,"def chksorted(a):
    for i in range(len(a) - 1):
        if not a[i] < a[i + 1]:
            return False
    return True


def selectionsort(array):

    def chksorted(a):
        for i in range(len(a) - 1):
            if not a[i] < a[i + 1]:
                return False
        return True
    m = min(array)
    mi = array.index(m)
    if not chksorted(array):
        f = array[0]
        array[0] = m
        array[mi] = f",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
29462,"def selectionsort(array):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
27477,"def selectionsort(array):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016,,
22963,"def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = temp
        i = +1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
35890,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1
    return selectionsort(A)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016,,
39803,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
35892,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
21071,"def reverse_list(n):
    if len(n) == 1:
        return n
    else:
        return [n[0]] + reverse_list(n[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
19369,"def reverse_list(n):
    if len(n) == 1:
        return n
    else:
        return [n[-1]] + reverse_list(n[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016,,
7855,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
13774,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
8631,"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
2229,"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
39994,"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016,,
9500,"def reverse_list(l):
    if l == []:
        return none
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
29364,"def reverse_list(l):
    if l == []:
        return None
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
40216,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
4215,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
3491,"def selectionsort(a):
    a = a[:]
    out = []
    while a:
        smallest = min(a)
        a.remove(smallest)
        out.append(smallest)
    return out",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
26827,"def selectionsort(a):
    a = a[:]
    out = []
    if a:
        smallest = min(a)
        a.remove(smallest)
        out.append(smallest)
    return out",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
1670,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tmp = minimum(l[1:])
    return tmp if tmp > l[0] else l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
14487,"def selectionsort(a):
    a = a[:]
    sortedlist = []
    while a:
        smallest = min(a)
        a.remove(smallest)
        sortedlist.append(smallest)
    return sortedlist",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
41571,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    timp = a[p]
    a[p] = a[i]
    a[i] = temp
    i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016,,
31842,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
35340,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
11348,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
711,"def reverse_list(l):
    if l == []:
        return []
    return l[1:].append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
32660,"def reverse_list(l):
    if l == []:
        return []
    return l.append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
17286,"def reverse_list(l):
    if l == []:
        return []
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
26250,"def reverse_list(l):
    if l == []:
        return []
    return l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
27681,"def reverse_list(l):
    if l == []:
        return []
    return l.append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
35230,"def reverse_list(l):
    if l == []:
        return []
    return [1, 2].append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
1017,"def reverse_list(l):
    if l == []:
        return []
    new = reverse_list(l[1:]).append(l[0])
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
40759,"def reverse_list(l):
    if l == []:
        return []
    new = l.append(l[0])
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
14650,"def reverse_list(l):
    if l == []:
        return []
    new = l[1:]
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
6915,"def reverse_list(l):
    if l == []:
        return []
    return l[1:] + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
34477,"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
36943,"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
17831,"def partition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]
    return q


def quicksort(a, q, r):
    if r <= q:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
23929,"def partition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]
    return q


def quicksort(a, p, r):
    if r <= q:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016,,
39872,"def fibonacci(n):
    prev = 0
    cur = 1
    i = 0
    while i < n:
        tmp = cur
        cur = cur + prev
        prev = tmp
        i = i + 1
    return cur",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
32484,"def fibonacci(n):
    prev = 0
    cur = 1
    i = 0
    while i < n:
        tmp = cur
        cur = cur + prev
        prev = tmp
        i = i + 1
    return cur",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
30806,"def power(a, b):
    if b == 0:
        return 1
    return a * power(b - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
18959,"def minimum(a):
    if a == []:
        return 1
    tmp = a.pop()
    if tmp < minimun(a):
        return tmp",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
17326,"def minimum(a):
    if a.pop() < a[-1]:
        tmp = a.pop()
    if a == []:
        return tmp
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
14121,"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
41534,"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        print(a[-1])
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
42135,"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        print(a.pop())
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
23053,"def minimum(a):
    if a == []:
        return b[0]
    if a[-1] < a[-2]:
        b.append(a[-1])
        if len(b) > 1:
            if b[0] > b[1]:
                b.remove(b[0])
            else:
                b.remove(b[1])
    return minimum(a[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
9796,"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
        print(tmp)
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39331,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
11782,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016,,
20881,"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
29747,"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
30204,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
9895,"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
24492,"def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a - 1, count)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
35107,"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
31079,"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
19334,"def reverse_list(a, b=[]):
    if a == []:
        tmp = b
        b = []
        return tmp
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
25607,"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + a[-1]
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
12830,"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
11863,"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
2480,"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
6553,"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39910,"def reverse_list(a, b=''):
    if a == []:
        return b.strip.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
4358,"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ').strip()
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
1220,"def reverse_list(a, b=''):
    if a == []:
        return b.strip().split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
15410,"def reverse_list(a, b=''):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39816,"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
10554,"def fibonacci(a):
    if a == 0:
        return 0
    return 1 + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
25853,"def fibonacci(a):
    if a == 0:
        return 1
    return 1 + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
36655,"def fibonacci(a, curr=1):
    if a == 0:
        return curr
    return curr + fibonacci(a - 1, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
26196,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return 0
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
10122,"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 1
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
38858,"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 0
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
24920,"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
150,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
39421,"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 1
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
22073,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
18777,"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
15042,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016,,
11266,"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
24206,"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += tmp
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
1296,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += tmp
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
32257,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += pev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39870,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
6400,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
39250,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
9408,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
24326,"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016,,
11687,"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
13589,"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n[-1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
30193,"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
7857,"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
40030,"def reverse_list(n=[]):
    if len(n) == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
164,"def reverse_list(n=[]):
    if len(n) == 1:
        return 0
    else:
        return reverse_list(n)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
21026,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
28591,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
4599,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016,,
24604,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
33134,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
27709,"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
178,"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
13056,"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        print('HEYA')
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
38310,"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
39579,"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016,,
9187,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
39322,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
30016,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016,,
27055,"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * (n, m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,05f63619-1095-4d15-8436-1f0832a593bc,2016,,
29672,"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[q])
    else:
        lst.remove(lst[0])
    return maximum(lst)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,05f63619-1095-4d15-8436-1f0832a593bc,2016,,
6664,"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[0])
    else:
        lst.remove(lst[0])
    return maximum(lst)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,05f63619-1095-4d15-8436-1f0832a593bc,2016,,
4384,"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[1]
    return reverse_list(l[1:]).append(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
22442,"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[0]
    return reverse_list(l[1:]).append(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
41742,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
4497,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
6397,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum(l[0] + l[2:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
20079,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
33640,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
17296,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016,,
33214,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,794362b7-cbcd-4bea-bafb-7967c266e248,2016,,
37063,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,794362b7-cbcd-4bea-bafb-7967c266e248,2016,,
28362,"def power(m, n):
    if n == 1:
        return m
    if n == 0:
        return 1
    return n * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
41232,"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[-1]
    a.pop()
    return [a] + reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
26535,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
19261,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016,,
20499,"def fibonacci(h):
    if h == 0 or h == 1:
        return 1
    return fibonacci(h - 1) + fibonacci(h - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
19074,"def fibonacci(h):
    if h == 0 or h == 1:
        return 1
    return fibonacci(h - 1) + fibonacci(h - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
38963,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016,,
8634,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016,,
32267,"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
998,"def selectionsort(A, p, r):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
6232,"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
8228,"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
403,"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016,,
28166,"def power(m, n):
    if n == 0:
        return 1
    return m * power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
24883,"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
33669,"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
25173,"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    print(temp)
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
2277,"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
26741,"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)


def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def minimum(l):

    def quicksort(A, p, r):
        if r <= p:
            return
        q = partition(A, p, r)
        quicksort(A, p, q - 1)
        quicksort(A, q + 1, r)

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    return quicksort(l, 0, len(l) - 1)[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
1651,"def selectionsort(a):
    j = 0
    i = 1
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
38342,"def selectionsort(a):
    i = 0
    while i < len(a):
        p, j = i, i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
7463,"def selectionsort(a):
    i = 0
    while i < len(a):
        p, j = i, i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
27705,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse(l[1:])
    temp.append(l[0])
    return temp",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
17288,"def minimum(a, minimum=None):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == None:
        return minimum(a, test)
    else:
        return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
22217,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
24455,"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
38170,"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == 0:
        return minimum(a, test)
    else:
        return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
31861,"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
644,"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = int(a.pop())
    if test < minimum or minimum == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
35362,"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = str(a.pop())
    if int(test) < int(minimum) or int(minimum) == 0:
        return minimum(a, int(test))
    return minimum(a, int(minimum))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
16831,"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = str(a.pop())
    if int(test) < int(minimum) or int(minimum) == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
23693,"def selectionsort(l):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return l",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016,,
21431,"def fibonacci(i):
    if i <= 1:
        return 1
    else:
        return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
6456,"def fibonacci(i):
    if i <= 1:
        return 1
    else:
        return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016,,
4653,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, j, end)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
37363,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = ij = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016,,
14322,"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
13038,"def fibonacci(n):
    if n == 0:
        return 0
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
5040,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
25205,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
29044,"def parition(a, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]


def quicksort(a, p, r):
    if r <= p:
        return
    else:
        q = parition(a, p, r)
        quicksort(a, p, q - 1)
        quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
20344,"def parition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]


def quicksort(a, p, r):
    if r <= p:
        return
    else:
        q = parition(a, p, r)
        quicksort(a, p, q - 1)
        quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016,,
18297,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
1703,"def search(str, letter):
    if str[i] == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
39062,"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
1063,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
27586,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
8132,"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
38573,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
15273,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
11596,"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
40786,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
6880,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
4529,"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016,,
2064,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
26898,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016,,
39710,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
29331,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
41170,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016,,
39728,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016,,
1923,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016,,
38080,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
39390,"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41c113b8-6f57-4003-bed3-3587b2376170,2016,,
21598,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
23204,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
5228,"def power(n, mult):
    if mult == 0:
        return 0
    n * n
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
14185,"def power(n, mult):
    if mult == 0:
        return 0
    return n ** mult
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
41032,"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
20982,"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016,,
42478,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016,,
869,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016,,
12333,"def minimum(lis, p=0):
    if lis == []:
        return p
    n = pop(lis)
    if n > p:
        p = n
    return minimum(lis)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
19613,"def minimum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
7207,"def minimum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis, p)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
2861,"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
9518,"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return maximum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
3832,"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return maximum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
36153,"def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016,,
11727,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
5811,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016,,
17151,"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
1584,"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
25907,"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        power(base, exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
27282,"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        power(base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
3011,"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        return power(base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
19500,"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * base
        new_exp = exp - 1
        return power(new_base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
32413,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
34993,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
34390,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016,,
27292,"def minimum(l):
    min = inf
    for item in l:
        min = item if item < min else min
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
14802,"def maximum(l, old_max=None):
    item = l[0]
    if item != None:
        new_l = l[1:]
        maximum(new_l, item if old_max == None or item > old_max else old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
36796,"_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        maximum(new_l, item if old_max == _A or item > old_max else old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
22240,"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
38300,"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d566071f-0679-42ce-9081-3fac29a67d21,2016,,
24268,"def fibonacci(s):
    if s == 0:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s + 5)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
28186,"def fibonacci(s):
    if s == 0:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
36574,"def fibonacci(s):
    if s <= 1:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
20869,"def fibonacci(s):
    if s <= 1:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016,,
29502,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016,,
35765,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016,,
35426,"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted[l]]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
245,"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted[l]]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
31318,"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted(l)]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
6857,"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted(l)]
    for i in range(len(l)):
        new_l.append(sortedl[len(l) - i - 1])
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
35559,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        new_l = []
        sortedl = [i for i in sorted(l)]
        for i in range(len(l)):
            new_l.append(sortedl[len(l) - i - 1])
        return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
1502,"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    else:
        return n - 1 + (n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
13443,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n - 1 + (n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
34811,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
16335,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016,,
22575,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a4f49b67-25e5-43c2-a48c-827c1919659f,2016,,
13518,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a4f49b67-25e5-43c2-a48c-827c1919659f,2016,,
18428,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016,,
4119,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016,,
19058,"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
33326,"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    elif n > 2:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
2209,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n >= 2:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
35589,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
29602,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016,,
39461,"def minimum(a):
    if len(a) == 1:
        return a
    b = max(a)
    a.replace(b, '')
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
28618,"def minimum(a):
    if len(a) == 1:
        return a
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
26326,"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-2]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
34933,"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-2]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
38175,"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
6873,"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    print(total)
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
9045,"def count_letters(s):
    if s == '':
        return total
    total += 1
    print(total)
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
7192,"def count_letters(s):
    if s == '':
        return total
    total += 1
    s = s[:-1]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
30463,"def count_letters(s):
    total = 0
    if s == '':
        return total
    for t in s:
        total += 1
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
16784,"def count_letters(s):
    total = 0
    if s == '':
        return total
    for t in s:
        total += 1
    print(total)
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
37401,"def count_letters(s):
    if s == '':
        return total
    for t in s:
        total = 0
        total += 1
    print(total)
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
36284,"def count_letters(s):
    for t in s:
        total = 0
        total += 1
    if s == '':
        return total
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
8937,"def count_letters(s):
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    b = s.index(s[-1])
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
23935,"def count_letters(s):
    b = s.index(s[-1])
    s = ''
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
21110,"def count_letters(s):
    b = s.index(s[-1]) + 1
    s = ''
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
26953,"def count_letters(s):
    try:
        b = s.index(s[-1]) + 1
    except IndexError:
        return 0
    s = ''
    if s == '':
        return b
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
22986,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016,,
8221,"def power():
    if x == 0:
        return 1
    return 2 * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
5456,"def power(x, n):
    if x == 0:
        return 1
    return n * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
30049,"def power(n, x):
    if x == 0:
        return 1
    return n * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
24197,"def fibonacci(n, l=0, c=1):
    if not n:
        return c
    return fibonacci(n - 1, c, l + c)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
14752,"def fibonacci(n, l=0, c=1):
    if not n:
        return c
    return fibonacci(n - 1, c, l + c)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
33408,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
1599,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
4353,"def fibonacci(n):
    if n == (0 or 1):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
14432,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
14254,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016,,
28167,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016,,
14333,"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016,,
17690,"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
42257,"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
37788,"def fibonacci(aaliyah, supercalifragilisticespialidotious=0, koppaberg=1):
    if not aaliyah:
        return koppaberg
    return fibonacci(aaliyah - 1, koppaberg, 
        supercalifragilisticespialidotious + koppaberg)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
25167,"def fibonacci(aaliyah, supercalifragilisticespialidotious=0, koppaberg=1):
    if not aaliyah:
        return koppaberg
    return fibonacci(aaliyah - 1, koppaberg, 
        supercalifragilisticespialidotious + koppaberg)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
3943,"def quicksort(cabbages):
    if len(l) < 2:
        return l
    pivot = l[0]
    left_side = []
    right_side = []
    for n in cabbages[1:]:
        if n < pivot:
            left_side.append(n)
        else:
            right_side.append(n)
    return quicksort(left_side) + [pivot] + quicksort(right_side)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
8379,"def quicksort(cabbages):
    if len(l) < 2:
        return l
    pivot = l[0]
    left_side = []
    right_side = []
    for n in cabbages[1:]:
        if n < pivot:
            left_side.append(n)
        else:
            right_side.append(n)
    return quicksort(left_side) + [pivot] + quicksort(right_side)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
16731,"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
30017,"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
29079,"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
1979,"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016,,
17210,"def quicksort(l, start=0, end=None):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
11938,"def quicksort(l, start=0, end=None):
    if len(l) < 2:
        return l
    pivot = l[1]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
26406,"def selectionsort(l, o=None):
    if not o:
        o = []
        l = l[:]
    if not len(l):
        return o
    small = min(l)
    l.remove(small)
    o.append(small)
    return selectionsort(l, o)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016,,
24994,"def fibonacci(n, last=0, curr=1):
    if not n:
        return curr
    return fibonacci(n - 1, curr, last + curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016,,
14110,"def fibonacci(n, last=0, curr=1):
    if not n:
        return curr
    return fibonacci(n - 1, curr, last + curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016,,
831,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
41662,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
21262,"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
34269,"def quicksort(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
23222,"def quicksort(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016,,
14498,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
36231,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
28681,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
29693,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
16838,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
3560,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
23670,"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016,,
35711,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
24654,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
40874,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
925,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
3251,"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
35622,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    return swap(a)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
36946,"def selection_sort(a):
    for i in a:
        j = 0
        while j < len(a):
            if i < a[j]:
                a[j] = i
            j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
14105,"def selection_sort(a):
    for i in range(len(a)):
        j = 1
        if a[j] > a[i]:
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
34509,"def selection_sort(a):
    for i in range(len(a)):
        j = 1
        if a[j] > a[i]:
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
35066,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
40272,"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.remove[-1]
        else:
            list.remove[0]
        return minmum(list)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
899,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
5658,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
11941,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
877,"def reverse_list(list):
    if not list:
        return list
    else:
        return list[-1] + reverse_list(list)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
26877,"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return list(listt[-1]) + reverse_list(listt[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
17465,"def selection_sort(a):
    for i in range(len(a)):
        least = i
        for k in range(i + 1, len(a)):
            if a[k] < a[least]:
                least = k
        tmp = a[i]
        a[i] = a[k]
        a[k] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
11029,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016,,
21899,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
23102,"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016,,
31765,"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
8609,"def square_area(x, y):
    area = x * y
    if 0 <= area:
        return area
    else:
        return -area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
32860,"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
31590,"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
2336,"def reverse(a):
    print(a[::-1])",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
16,"def reverse(a):
    print(a.reverse())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
29153,"def reverse(a):
    return a.reverse()",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016,,
4080,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
8733,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
14569,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
37667,"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
29533,"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
15931,"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
5911,"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
4919,"def append2list(l1, l2=[]):
    l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
19827,"def append2list(l1, l2=[]):
    for i in l1:
        if len(l2) <= 2:
            l2.append(i)
        else:
            l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
8034,"def append2list(l1, l2=[]):
    for i in l1:
        if len(l2) <= 2:
            l2.append(i)
        else:
            l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
6012,"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
18926,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = set(d.values())
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
15951,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    print(unique)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
41353,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            del unique[k, v]
    print(unique)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
36838,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
37746,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
22039,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
2566,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
21251,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
27923,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    deli = []
    for k, v in list(d.items()):
        unique.append(v)
    for v in unique:
        if unique.count(v) > 1:
            deli.append(v)
    for v in unique:
        if v in deli:
            del unique[v]
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
27040,"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    deli = []
    for k, v in list(d.items()):
        unique.append(v)
    for v in unique:
        if unique.count(v) > 1:
            deli.append(v)
    for v in unique:
        try:
            if v in deli:
                del unique[v]
        except:
            continue
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
22209,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
20644,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
598,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
14132,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
4713,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
19450,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016,,
40507,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
15821,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
23230,"def swap(a, i, j):
    for k in a:
        a[i], a[j] = a[j], a[i]
    return a


def reverse(a):
    return swap(a)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
14842,"def reverse(a):
    return [i for i in range(len(a), 0, -1)]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016,,
20758,"def double(n):
    return n * n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
16466,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
18398,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
30041,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
4038,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
6239,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
40876,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
22005,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
5647,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
10359,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = j + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016,,
17434,"def circumference(radius):
    return 2 * pi * radius",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
37853,"def area(radius):
    return pi * radius ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
25057,"def area(radius):
    return pi * radius ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
19005,"def circumference(radius):
    return 2 * pi * radius",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
37769,"def reverse():
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
6530,"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
8239,"def reverse(b):
    a = b[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
2798,"def reverse(b):
    print(a[::-1])",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
19087,"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
27245,"def reverse(a):
    print(a[::-1])",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016,,
30238,"def circle_area(n):
    ca = 2 * 3.14 * n
    return cc",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
22375,"def square_perimeter(n):
    sa = n * 4
    return sp",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
42382,"def circle_area(n):
    cc = 2 * 3.14 * n
    return cc",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
36265,"def square_area(n):
    sa = n + n
    return sa",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
12736,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
20357,"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016,,
25547,"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    tmp = i
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016,,
29197,"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    i = tmp
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016,,
4899,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
11719,"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d31360b5-795b-45df-bd6f-a99df2683eae,2016,,
23408,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
20240,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, tmp)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
5181,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
28457,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
4158,"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
28796,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    track = 0
    tempnum = a[i + track]
    while track != len(a) - i:
        if a[i + track] == tempnum:
            tempnum = a[i + track]
        track = track + 1
    return tempnum


def sort(a):
    i = 0
    j = 0
    while i != len(a):
        j = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016,,
30717,"def sort(a):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
19786,"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    i = tmp
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016,,
39836,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016,,
3336,"def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
36815,"def sort(a):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2016,,
3318,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        while i < len(a):
            if a[i] < a[j]:
                tmp = a[i]
                a[i] = a[j]
                a[j] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016,,
10324,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
27012,"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
24101,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        find_position_of_smallest",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
29545,"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016,,
2655,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
39750,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
35512,"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016,,
18492,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            swap(a, i, j)
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
36293,"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
31029,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    swap(a, i, j)
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
42403,"def sort(a):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
13505,"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016,,
3199,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
38420,"def sort(a):
    p = i
    j = i + 1
    i = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
26098,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            swap(a, i, j)
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
30167,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
27658,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
15429,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
1739,"def sort(a):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
17136,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
15207,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016,,
17349,"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
38159,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
30872,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
24975,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[k]
        a[k] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
370,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d31360b5-795b-45df-bd6f-a99df2683eae,2016,,
8690,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
10393,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    find_position_of_smallest(a, i)
    swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
33689,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016,,
3593,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016,,
13866,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
40576,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016,,
348,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
14614,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
5012,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
32611,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
19624,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
14646,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap(a, i, p)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
37818,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
31425,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
40442,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
24013,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
25733,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
19319,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
1808,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
11827,"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016,,
17059,"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016,,
3774,"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016,,
11264,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
27915,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        find_position - of - smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
8146,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
34828,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
1154,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_first_position_of_smallest(a, i)
        swap(a, j, i)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2016,,
29688,"def find_position_of_smallest(a, i):
    x = i
    while i < len(a):
        if a[i] < a[x]:
            x = i
        i = i + 1
    return x


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2016,,
35235,"def find_position_of_smallest(a, i):
    x = i
    while i < len(a):
        if a[i] < a[x]:
            x = i
        i = i + 1
    return x


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2016,,
27109,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    p = i
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
22429,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
33559,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    p = i
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
5160,"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2016,,
3191,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016,,
28468,"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016,,
40305,"def sort(p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016,,
8168,"def sort(p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016,,
2353,"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            k = find_position_of_smallest(a, i)
            swap(a, i, k)
            i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
24965,"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
31391,"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
7826,"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
4622,"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016,,
23903,"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016,,
19674,"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016,,
17424,"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016,,
16379,"def sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2016,,
19552,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,415d4431-1b98-4241-a978-02dc16bf556e,2016,,
2083,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016,,
7957,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016,,
28208,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016,,
38967,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016,,
33546,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    i = p
    p = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2016,,
8141,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016,,
32655,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016,,
37263,"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
23117,"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
33497,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    i = 0
    while i < len(a):
        if a[i] < a[j]:
            i = i + 1
        return i


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
37114,"def square_area(n):
    sq = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016,,
2564,"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016,,
21944,"def sort(a):
    p = i + 1
    i = i + 2
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016,,
12930,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[j] < a[p]:
            p = j
            i = i + 1
        return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
38868,"def square_area(n):
    sq = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016,,
28544,"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016,,
40547,"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    perimeter = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
23389,"def square_area(n):
    results = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016,,
14321,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016,,
7591,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[p] < a[j]:
            j = p
            i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
39007,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[p] < a[j]:
            j = p
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
39912,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,06043f63-bd06-4b6c-9b40-184b4eca2307,2016,,
485,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[j] < a[p]:
            j = p
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
10319,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
38522,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
39205,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
18448,"def sort(a):
    p = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016,,
13789,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
26129,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
10206,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
1682,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
31927,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
14133,"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016,,
1131,"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * x1 * y1
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
40144,"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * x1 * y1
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
87,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(n + r)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
3605,"def square_perimeter(r):
    sqaure_perimeter = r * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
40707,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
40694,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016,,
22776,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016,,
42380,"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
6253,"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * (x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
3080,"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
14395,"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
5304,"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016,,
34265,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016,,
8842,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016,,
40095,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016,,
30320,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016,,
25094,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016,,
31506,"def square_perimeter(r):
    sqaure_perimeter = r * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
34384,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
22414,"def square_perimeter(r):
    sqaure_perimeter = r * r * r * r
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
16053,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
15450,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
8732,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
41209,"def square_perimeter(r):
    sqaure_perimeter = r * r * r * r
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
8977,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
34973,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    find_position_of_smallest(a, i)
    swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
16207,"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * (x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
7461,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
35390,"def square_perimeter(n):
    sqaure_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
37305,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort():
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2016,,
4954,"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = (2)(x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
5159,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
37550,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = i
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
1270,"def square_perimeter(n):
    sqaure_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
30711,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
30965,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        j = j + 1
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
17766,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = i",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
29729,"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
14684,"def square_perimeter(n):
    sqaure_perimeter = (4)(n)
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016,,
11636,"def rectangle_perimeter(r, n):
    rectancle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
15119,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    while i < len(a):
        find_position_of_smallest(a, i).swap(a)
    swap(a, i, j).sort(a)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016,,
13842,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
4860,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
25164,"def sort(a):
    while i < len(a):
        find_position_of_smallest.sort(a)
        swap.sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
12291,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
38617,"def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest.sort(a)
        swap.sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
7360,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    while i < len(a):
        if find_position_of_smallest(a, i).swap(a):
            swap(a, i, j).sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016,,
23995,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
24082,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
34894,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
28673,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
27734,"def rectangle_perimeter(r, n):
    rectancle_perimeter = 2 * (r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016,,
6108,"def sort(a):
    b = a
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016,,
16961,"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016,,
37967,"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016,,
27201,"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016,,
36982,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2016,,
28632,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2016,,
12879,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016,,
14248,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016,,
28136,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    l = 0
    while l < len(a):
        p = find_position_of_smallest(a, l)
        swap(a, l, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016,,
28732,"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    l = 0
    while l < len(a):
        p = find_position_of_smallest(a, l)
        swap(a, p, l)
    l = l + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016,,
13422,"def square_area(n):
    result = n * n
    return sq",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
5534,"def sort(a):
    a.sort(a)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
907,"def sort(a):
    i = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
32863,"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
11076,"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
31360,"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
13183,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
19469,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
13622,"def sort(a):
    i = 1
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
39581,"def sort(a):
    i = 0
    p = 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
17265,"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
10346,"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
4581,"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
22445,"def sort(a):
    i = i + 1
    n = i
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
25051,"def sort(a):
    i = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016,,
29647,"def square_perimeter(n):
    sp = n + n + n + n",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
6264,"def rectangle_perimeter(n):
    rp = n + n + m + m",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
13951,"def circle_area(n):
    ca = 3.14 * n",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
7189,"def circle_circumference(n):
    cc = 2 * 3.14 * n",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
36063,"def circle_area(n):
    ca = 3.14 * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
18871,"def rectangle_perimeter(n):
    rp = n + n + m + m
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
2189,"def rectangle_perimeter(n):
    rp = n + n + m + m
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
30708,"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
42034,"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
5922,"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016,,
31209,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        swap(a, i, find_position_of_smallest + i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2016,,
14905,"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016,,
15224,"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016,,
22801,"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016,,
5638,"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016,,
40328,"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016,,
17712,"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016,,
31148,"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[i] = tmp",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2016,,
37066,"def reverse(a):
    a = a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016,,
18221,"def reverse(a):
    a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016,,
13955,"def reverse(a):
    a = a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016,,
27993,"def reverse(i, j, k):
    a = a[::-1]
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
2731,"def reverse(a):
    a = a[::-1]
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
12670,"def reverse(a):
    i = 0
    a = a[a:-i - 1]
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
34708,"def reverse(a):
    while i < len(a):
        return len(a) - 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2016,,
18225,"def reverse(a):
    i = 0
    j = len(a)
    while i < len(a):
        tmp = a[i]
        a[i] = a[j - i]
        a[j - i] = tmp
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
6354,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
36980,"def reverse(a_string):
    new_string = ''
    index = len(a_string)
    while index:
        index -= 1
        new_string += a_string[index]
    return new_string",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
6583,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
23454,"def reverse(a):
    i = 0
    j = len(a)
    while i < len(a):
        tmp = a[i]
        a[i] = a[j - i]
        a[j - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
33738,"def reverse(test):
    n = len(test)
    x = ''
    for i in range(n - 1, -1, -1):
        x += test[i]
    return x",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
13862,"def reverse(test):
    n = len(test)
    x = ''
    for i in range(n - 1, -1, -1):
        x += test[i]
    return x",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016,,
29785,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
314,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
31938,"def reverse(a):
    a = []
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
19741,"def reverse(a):
    a = []
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016,,
2391,"def reverse(a):
    a = []
    i = 0
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
34704,"def reverse(a):
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
34251,"def reverse(a):
    i = 0
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
4809,"def reverse(a):
    print(reverse(a[i]))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
16905,"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
17088,"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
25370,"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016,,
15213,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
13346,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
21871,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
31897,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())
    print(tmp)
    print(a[i])",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
23066,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
30000,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
13915,"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016,,
32121,"def reverse(a, i, j):
    a = []
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
18033,"def reverse(a, i, j):
    a = []
    i = 0
    j = 0
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016,,
10921,"def reverse(n):
    i = 0
    while i < len(a):
        print(n[len(n) - (i + 1)])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
32892,"def reverse(n):
    i = 0
    while i < len(n):
        print(n[len(n) - (i + 1)])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
36302,"def reverse(n):
    a = []
    i = 0
    while i < len(n):
        a.append(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
22970,"def reverse(n):
    i = 0
    while i < len(n):
        print(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
29476,"def reverse(n):
    a = []
    i = 0
    while i < len(n):
        print(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
12141,"def reverse(n):
    a = []
    i = 0
    j = len(n) - 1
    while i < len(n) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
29350,"def reverse(n):
    i = 0
    while i < len(n) / 2:
        print(n[len(n) - i - 1])
    i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
15609,"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
26150,"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a.rstrip()",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
16554,"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
29636,"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
16231,"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016,,
10085,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(len(a) - 1)
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016,,
11384,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(len(a) - i)
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016,,
34899,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i])
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016,,
31994,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
3724,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
19989,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
265,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
9061,"def selection_sort(a):
    i = 0",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
12805,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016,,
3530,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016,,
40858,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016,,
34340,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
31647,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
18622,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
27868,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016,,
36702,"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
28047,"def area(r):
    return (r * pi) ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
12899,"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
11406,"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
28671,"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
32634,"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
40561,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = a[i]


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
39271,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = a[i]


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
200,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
28032,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
36635,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if j < p:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
41931,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
4830,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016,,
2781,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
25053,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
1190,"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
41120,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
2358,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        a[i] = a[-i - 1]
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
1988,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        a[i] = a[len(a) - i - 1]
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
31189,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[-i - 1]
        a[-i - 1] = tmp
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
13511,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
31733,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
6993,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
17914,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j += 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
6720,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
27665,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
13468,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
21588,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016,,
7272,"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016,,
21895,"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016,,
2873,"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016,,
1099,"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
2852,"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016,,
18108,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016,,
34408,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016,,
35039,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
11405,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
2841,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
10005,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
22764,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
19465,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016,,
29736,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016,,
36725,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016,,
23239,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016,,
21374,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016,,
42357,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016,,
16900,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016,,
4064,"def bsearch(a, q):
    lo = 0
    hi = len(a)
    while lo < hi:
        mid = (lo + hi) / 2
        if a[mid] < q:
            lo = mid + 1
        else:
            hi = mid
    return lo",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a8d7ba55-2066-48ff-a791-991413f703dc,2016,,
6481,"def bsearch(a, q):
    lo = 0
    hi = len(a)
    while lo < hi:
        mid = (lo + hi) / 2
        if a[mid] < q:
            lo = mid + 1
        else:
            hi = mid
    return lo",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a8d7ba55-2066-48ff-a791-991413f703dc,2016,,
1141,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016,,
7626,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2016,,
15850,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2016,,
12032,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016,,
25273,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016,,
38519,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2016,,
40618,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2016,,
3355,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016,,
16050,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016,,
26626,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016,,
3120,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016,,
41772,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016,,
11204,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016,,
4681,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2016,,
35087,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2016,,
9413,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016,,
37078,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016,,
17943,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016,,
25012,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016,,
41857,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016,,
38654,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            assert a[low - 1] < q
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016,,
24873,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016,,
9179,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016,,
28008,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2016,,
23371,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2016,,
18062,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016,,
34200,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            assert a[low - 1] < q
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016,,
38838,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2016,,
25482,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2016,,
24344,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,539a3d07-c706-42ed-bbbe-db66980d170f,2016,,
18810,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,539a3d07-c706-42ed-bbbe-db66980d170f,2016,,
8812,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2016,,
5026,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2016,,
512,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9dea5530-0f82-4127-b25f-20c784224a03,2016,,
26955,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9dea5530-0f82-4127-b25f-20c784224a03,2016,,
12236,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016,,
19057,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016,,
27557,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2016,,
38976,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2016,,
25192,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75fca52d-a61c-4d91-946c-d376c5569767,2016,,
10998,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75fca52d-a61c-4d91-946c-d376c5569767,2016,,
7580,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016,,
22311,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016,,
13072,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016,,
36596,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016,,
31274,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016,,
26187,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < p:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016,,
13349,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016,,
7465,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016,,
41495,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2016,,
9008,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2016,,
6355,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2016,,
996,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2016,,
7016,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016,,
20369,"def bsearch(a, q):
    low = 0
    high = len(a)
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016,,
22267,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2016,,
1459,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2016,,
276,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016,,
8492,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016,,
7457,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2016,,
38204,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2016,,
27906,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016,,
2827,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016,,
2261,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016,,
784,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016,,
7867,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9d69cd84-adaa-42a8-9530-416762b34c13,2016,,
17737,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9d69cd84-adaa-42a8-9530-416762b34c13,2016,,
19912,"def bsearch(a, q):
    low = 0
    high = 0
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016,,
19882,"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = 0
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if q[mid] < low:
                high = mid
            else:
                low = mid
            print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
14375,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016,,
23680,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016,,
20052,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016,,
14979,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016,,
25179,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[low - i] < q
            low = mid + 1
        else:
            assert q <= a[high]
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016,,
8531,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016,,
27594,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[low - i] < q
            low = mid + 1
        else:
            assert q <= a[high]
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016,,
610,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016,,
33125,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016,,
42049,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016,,
13244,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016,,
40034,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016,,
32382,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016,,
13588,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016,,
4673,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016,,
12256,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016,,
9169,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016,,
32233,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016,,
23559,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[mid + 1 - 1] < q
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2016,,
36874,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[mid + 1 - 1] < q
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2016,,
30380,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= [high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2016,,
35657,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= [high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2016,,
10888,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016,,
33568,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high - low) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016,,
14977,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016,,
28124,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
17085,"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo != hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) // 2 + 1 if arr[-1] == tgt else (lo + hi) // 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
1996,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016,,
11410,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016,,
710,"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
33818,"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo != hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
3050,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] > q:
            high = mid - 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016,,
32397,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
27535,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
21101,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2016,,
31513,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2016,,
23322,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] > q:
            high = mid - 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016,,
9635,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2016,,
17661,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2016,,
34772,"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (low + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
26307,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016,,
3275,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016,,
16256,"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (lo + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
18490,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f42085d-bb24-498f-9d99-42137e03966f,2016,,
27141,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f42085d-bb24-498f-9d99-42137e03966f,2016,,
39896,"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = 0
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if a[mid] < low:
                high = mid
            else:
                low = mid
            print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
18665,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016,,
40418,"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (lo + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2 + 1",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
26857,"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
18240,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016,,
2156,"def bsearch(a, q):
    A = False
    found = A
    newSet = q
    while found != True or newSet > 0:
        midpoint = int(len(newSet) / 2)
        if a < newSet[midpoint]:
            found = A
            newSet = newSet[:midpoint]
        elif a > newSet[midpoint]:
            found = A
            newSet = newSet[midpoint:]
        elif a == newSet[midpoint]:
            found = True
    return found",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016,,
1327,"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if a[mid] < low:
                high = mid
            else:
                low = mid
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
24103,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016,,
1518,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
13280,"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < low:
            high = mid
        else:
            low = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
11450,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low == 0 and a[low - 1] < q
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016,,
26424,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016,,
5086,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016,,
13392,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016,,
18758,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = low
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016,,
28843,"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            high = mid
        else:
            low = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
35635,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016,,
23081,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
5603,"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
30689,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = low
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016,,
26146,"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            high = mid
        else:
            low = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
8545,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
12235,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016,,
26180,"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid - 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
22590,"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
25654,"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016,,
36171,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            assert low == 0 or a[low - 1] < q
            assert high == len(a) or q <= a[high]
        else:
            mid = low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016,,
5615,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016,,
32188,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016,,
12572,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,36685ead-53f8-40af-a908-4c048278dc6b,2016,,
6227,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,36685ead-53f8-40af-a908-4c048278dc6b,2016,,
37123,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016,,
34883,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016,,
28600,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016,,
17542,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016,,
29094,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016,,
8696,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016,,
42340,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid + 1] < q:
            assert low == 0 or a[low - 1] < q
            assert high == len(a) or q <= a[high]
        else:
            mid = low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016,,
37703,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016,,
40736,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016,,
8544,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016,,
5174,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016,,
8797,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016,,
39944,"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016,,
7270,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016,,
3173,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        m = (low + high) / 2
        if a[m] < q:
            low = m + 1
        else:
            high = m
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2016,,
818,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        m = (low + high) / 2
        if a[m] < q:
            low = m + 1
        else:
            high = m
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2016,,
13540,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2016,,
9407,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2016,,
23542,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016,,
24190,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016,,
3886,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016,,
29982,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] >= q:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2016,,
1975,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] >= q:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2016,,
16926,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016,,
41657,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016,,
17735,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016,,
23424,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016,,
22610,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016,,
18754,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016,,
17037,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016,,
10061,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016,,
10397,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016,,
39537,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016,,
35037,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016,,
15533,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016,,
23632,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016,,
16074,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2016,,
41312,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2016,,
4363,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6fb1b046-1d89-4162-8437-722d44e22f50,2016,,
16345,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6fb1b046-1d89-4162-8437-722d44e22f50,2016,,
13167,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016,,
41846,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,
7995,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,
1482,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,,
22713,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,,
41509,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,
15504,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,,
11114,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,,
6407,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,,
5090,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2016.0,,
15942,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2016.0,,
3209,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,
12361,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a0677365-0929-4e2e-8719-3729105927cd,2016.0,,
19331,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a0677365-0929-4e2e-8719-3729105927cd,2016.0,,
21466,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2016.0,,
7558,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,
28060,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2016.0,,
887,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,
37458,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,,
40720,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2016.0,,
40790,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2016.0,,
21787,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,
9446,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,,
1611,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,,
22507,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,,
29789,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,,
2246,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid + 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,
41793,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,
19906,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,,
2219,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2016.0,,
11755,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2016.0,,
35154,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,,
18313,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,,
25172,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,,
34501,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,,
37761,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,,
8926,"def bsearch(a, q):
    low = 0
    high = len(a)
    print(q)
    print(a, len(a))
    print(low, high)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            0
        else:
            0
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
        low = high
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,
35920,"def bsearch(a, q):
    low = 0
    high = len(a)
    print(q)
    print(a, len(a))
    print(low, high)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,
31740,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2016.0,,
7657,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2016.0,,
6685,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,
14459,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,
3128,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,,
39584,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
    if a[mid] < q:
        low = mid + 1
        assert low == 0 or a[low - 1] < q
    else:
        high = mid
        assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,
30876,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,
19696,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,,
22098,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,
24696,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,
25216,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,
26133,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,
30539,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,,
12485,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,,
22392,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
40400,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
16756,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,,
30633,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,,
17648,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,,
22622,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,,
4391,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
29446,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
9988,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,,
849,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low[i]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
18192,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,
18449,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
17821,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low, high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
9609,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
9872,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high - low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
25603,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return len(a)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
5734,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
29829,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
38464,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
5054,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,
35600,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,,
22596,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high - mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
37755,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
31027,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q or low == 0
        else:
            high = mid
            assert q <= a[high] or high == len(a)
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,,
22475,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q or low == 0
        else:
            high = mid
            assert q <= a[high] or high == len(a)
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,,
8964,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
        else:
            high = middle
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
28110,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
        else:
            high = middle
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,,
33602,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
    if a[mid] < q:
        low = mid + 1
        assert a[low - 1] < q
    elif a[mid] == q:
        return mid
    else:
        high = mid
        assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,
36233,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif a[mid] == q:
            return mid
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,
20665,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
20563,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
26777,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif a[mid] == q:
            return mid
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,
31409,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,
12314,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,,
35170,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
13364,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,,
20744,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
40065,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,,
31440,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,,
6683,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,,
41360,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,,
32276,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50aef720-52de-4735-8874-78f5a311b939,2016.0,,
41391,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50aef720-52de-4735-8874-78f5a311b939,2016.0,,
31512,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
7046,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
37933,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f15a871d-61c5-494f-8886-91e213b59201,2016.0,,
3893,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f15a871d-61c5-494f-8886-91e213b59201,2016.0,,
901,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q:
            return True
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return False",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,
32045,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q:
            return search
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,
18329,"def bsearch(a, q):
    low = 0
    high = len(a)
    search = (high + low) / 2
    while high != low and a[search] != q:
        search = (high + low) / 2
        if a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,
18328,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,
26881,"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q and a[search - 1] != q:
            return search
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,
22449,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,,
10810,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        search = (high + low) / 2
        assert low <= search < high
        if a[search] < q:
            low = search + 1
            assert a[low - 1] < q
        else:
            high = search
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,
10331,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        search = (high + low) / 2
        assert low <= search < high
        if a[search] < q:
            low = search + 1
            assert a[low - 1] < q
        else:
            high = search
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,,
32890,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,,
6963,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,,
39368,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,
14097,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,,
40653,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,
14829,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,
3393,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,,
10375,"def walkback(a, q, i):
    while i > 1 and a[i - 1] == q:
        i -= 1
    return i


def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) / 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess - 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,
253,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,
6317,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,
20434,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,,
3824,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,,
35842,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,,
26776,"def double(n):
    n = n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
23898,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
28307,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
26901,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
15080,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
540,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
11347,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
35750,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,86f3bfd9-abca-4a94-ac95-d257d354e3e5,2016.0,,
4193,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,86f3bfd9-abca-4a94-ac95-d257d354e3e5,2016.0,,
29289,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,
10588,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,
38791,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,
21960,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,
3861,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,
13031,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,,
8622,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,
25507,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,
23208,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,
35358,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,
22809,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,
34060,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,
22204,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,
8809,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,
9095,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, a[i], a[len(a) - i - 1])
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,
5185,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, a[i], a[len(a) - i - 1])
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,
8942,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,
35216,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,
41868,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,,
10551,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,
3167,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,
11533,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,
13651,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
12337,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
3776,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
29198,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
1877,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
836,"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
28000,"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)
    i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
24882,"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
10894,"def reverse(a):
    i = 1
    while i < len(a):
        print(len(a) - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
32589,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
11802,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
20110,"def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,,
12105,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
26158,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
37958,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,
21305,"def double(n):
    n = a * 2
    return n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,
32210,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,
40322,"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,
10962,"def double(n):
    print(2 * n)",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
15666,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
24254,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
8145,"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
26632,"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
6085,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
10214,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
10497,"def area(r):
    r = r ** 2
    a = 2 * 3.141 * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
9784,"def circumference(r):
    a = 2 * pi * r
    return a",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
25376,"def circumference(r):
    a = 2 * pi * r
    return a",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
32189,"def area(r):
    r = r ** 2
    a = pi * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
10796,"def area(r):
    r = r ** 2
    a = pi * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
30825,"def reverse(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if int(a[j]) > int(a[p]):
            p = j
        j = j + 1
    return p",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
12963,"def reverse(a):
    p = i
    j = i + 1
    while j < len(a):
        if int(a[j]) > int(a[p]):
            p = j
        j = j + 1
    return p",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
1496,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
13703,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,,
3411,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
21366,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,
5494,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
15253,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,
29703,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
9698,"def area(r):
    x = (pi * r) ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
18555,"def area(r):
    x = pi * r ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
18763,"def area(r):
    x = pi * r ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
6078,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
22581,"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
31016,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
1859,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
26045,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
3930,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
39687,"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
170,"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
2231,"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
27033,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
25534,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
5354,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,
10282,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[p] < a[j]:
                j = p
            j = j + 1
        i = i + 1
    swap(a, i, p)",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
7068,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
29981,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
174,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
41676,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
32771,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
39126,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            j = p
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
6352,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
35226,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,
39902,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,
13369,"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,
38337,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,
11771,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,
-1,"def square_perimeter(side):
    return 4 * side
    

",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,reference,,,
-1,"def circle_area(r):
    return  r * r * 3.14
    

",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,reference,,,
-1,"def circle_circumference(r):
    return r * 2 * 3.14
    

",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,reference,,,
-1,"def rectangle_perimeter(l, w):
    return 2 * (l + w)
   


",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,reference,,,
-1,"def square_area(l):
   return l * l 

",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,True,reference,,,
-1,"def reverse(a):
   b=[]
   i=0
   while i < len(a):
      b.append(a[len(a)-1-i])
      i = i + 1
   return b",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,reference,,,
-1,"def area (a):
	x= 3.141 *a**2
	return x
",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,True,reference,,,
-1,"def circumference(r):
	y=3.141 * 2 *r
	return y
",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,reference,,,
-1,"def double(n):
	y=2*n
	return y

",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,reference,,,
-1,"def selection_sort(a):
	i=0
	while i<len(a):
		p=i
		j=i+1
		while j < len(a):
			if a[j] < a[p] :
				p=j
			j=j+1
		tmp=a[p]
		a[p]=a[i]
		a[i]=tmp
		i=i+1
	return a

",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,reference,,,
-1,"def reverse(a):
   b=[]
   i=0
   while i < len(a):
      b.append(a[len(a)-1-i])
      i = i + 1
   return b",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,reference,,,
-1,"def bsearch(a, q):
        low = 0
        high = len(a)
        while low < high:
            mid = (low + high) // 2
            if a[mid] < q:
                low = mid + 1
            else:
                high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",True,reference,,,
-1,"def print_keys(dict):
    '''print all the keys in a dictionary, one per line'''
    for key in dict:
        print(key)

",print_keys,print_keys,"Print all the keys in a dictionary, one per line.","assert print_keys({})==None and print_keys({})==None and print_keys({'1': 'a'})==None and print_keys({'1': 'a'})==None and print_keys({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})==None and print_keys({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})==None and print_keys({'key1': 'a', 'key2': 'b', 'key3': 'a'})==None and print_keys({'key1': 'a', 'key2': 'b', 'key3': 'a'})==None",True,reference,,,
-1,"def count_letters(s):
    if not s:
        return 0
    return 1 + count_letters(s[1:])
",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,reference,,,
-1,"def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max
    # Could do this but ought not use max I suppose...
    # return max(l[0], maximum(l[1:]))
",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,reference,,,
-1,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min
    # Could do this but ought not use min I suppose...
    # return min(l[0], rmin(l[1:]))
",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,reference,,,
-1,"def selectionsort(A):

    i = 0
    while i < len(A):
        min_index = i
        j = i+1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1

# repeatedly insert into sorted array
",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,reference,,,
-1,"def power(m, n):
    if not n:
        return 1
    return m * power(m, n-1)
",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,reference,,,
-1,"def partition(A, p, r):
    q = j = p
    while j < r:
      if A[j] <= A[r]:
        A[q], A[j] = A[j], A[q]
        q = q + 1
      j = j + 1
    A[q], A[r] = A[r], A[q]
    return q

  
def quicksort(A, p, r):
  
  def partition(A, p, r):
    q = j = p
    while j < r:
      if A[j] <= A[r]:
        A[q], A[j] = A[j], A[q]
        q = q + 1
      j = j + 1
    A[q], A[r] = A[r], A[q]
    return q

  if r <= p:
    return
  q = partition(A, p, r)
  quicksort(A, p, q-1)
  quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,reference,,,
-1,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]
    # temp = reverse(l[1:])
    # temp.append(l[0])
    # return temp
    # note we cannot use return reverse(l[1:]).append(l[0]) because append()
    # does not return anything
",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,reference,,,
-1,"def swap(a, i, j):
   tmp  = a[i]
   a[i] = a[j]
   a[j] = tmp


def find_position_of_smallest(a, i):
 p = i  
 while i < len(a):
    if a[i]  < a[p]:
       p = i
    i = i + 1
 return p	
   

def sort(a):
   i = 0
   while i < len(a):
      p = find_position_of_smallest(a,i)       
      swap(a, i, p)
      i = i + 1
",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,reference,,,
-1,"def union(a, b):
	c=[]
	i = 0
	while i < len(a):
		if a[i] not in c:
			c.append(a[i])
		i = i + 1

	p = 0
	while p < len(b):
		if b[p] not in c:
			c.append(b[p])
		p = p + 1

	return c

",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",True,reference,,,
-1,"def intersection(a, b):
	d=[]
	i = 0
	while i < len(a):
		if a[i] in b and a[i] not in d:
			d.append(a[i])
		i = i + 1

	return d",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",True,reference,,,
-1,"def swap_keys_values(d):
    return dict([(v, k) for (k, v) in list(d.items())])
",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,reference,,,
-1,"def swap_unique_keys_values(d):
    # Have to explicitly convert dict_view type to list type in Python 3
    return dict([(v, k) for (k, v) in list(d.items()) if list(d.values()).count(v) == 1])
",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,reference,,,
-1,"def merge_lists(l1,l2):
  '''take two lists l1 and l2 and return a third list which contains 
  every second element of l1 and l2'''
  l3 = []
  i = 0
  while i < len(l1):
      l3.append(l1[i])
      i += 2
  i = 0
  while i < len(l2):
      l3.append(l2[i])
      i += 2
  return l3

",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",True,reference,,,
-1,"def weird_case(some_str):
    '''takes a string some_str and contains a new string which contains 
every second letter in some_str'''
    new_str = """"
    i = 0
    lc = 0 # separate count for the letters
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
          new_str += some_str[i]
        i = i + 1
    return new_str

",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,True,reference,,,
-1,"def remove_zeros(list):
    '''take a list of numbers and remove zeros from the list'''
    while 0 in list:
        list.remove(0)

",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",True,reference,,,
-1,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2-x1)**2 + (y2-y1)**2)**0.5
    if d < r1 + r2:
        return True
    return False

",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,reference,,,
-1,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2

",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,reference,,,
-1,"def search(str,letter):
  '''returns True if letter is in str, False if it is not there'''
  i = 0
  while i < len(str):
    if letter == str[i]:
      return True
    i = i + 1
  return False

",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,reference,,,
-1,"def index(str,letter):
  '''returns the position of letter in str, -1 if it is not there'''
  i = 0
  while i < len(str):
    if letter == str[i]:
      return i
    i = i + 1
  return -1


",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,reference,,,
-1,"def fibonacci(n):
  '''returns the value of the fibonacci series at position n'''
  if n == 0:
    return 0
  if n == 1:
    return 1
  else:
    fibN_2 = 0
    fibN_1 = 1
    i = 2
    while i <=n:
      fibN = fibN_2 + fibN_1
      fibN_2 = fibN_1
      fibN_1 = fibN
      i = i + 1
    return fibN

",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,reference,,,
-1,"def search(str,letter):
  '''returns True if letter is in str, False otherwise'''
  if str == """":
    return False
  elif str[0] == letter:
    return True
  else:
    #keep looking
    return search(str[1:],letter)
  

",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,reference,,,
-1,"def index(str,letter,pos):
  '''returns the position of letter in str, -1 if it is not there'''
  if pos == len(str):
    return -1
  elif str[pos] == letter:
    return pos
  else:
    return index(str,letter,pos+1)


",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,reference,,,
-1,"def fibonacci(n):
  '''returns the value of the fibonacci series at position n'''
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return fibonacci(n-1) + fibonacci(n-2)

",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,reference,,,
24381,"def append2list(l1, l2=''):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=''):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2"
24137,"def append2list(l1, l2=''):
    if l2 == '':
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=''):
    if l2 == '':
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
18232,"def append2list(l1, l2='none'):
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='none')]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2='none'):
    for i in l1:
        l2.append(i)
    return l2"
40312,"def append2list(l1, l2=None):
    l2 = l2 or []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='x_1', ctx=Load()), List(elts=[], ctx=Load())])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    l2 = l2 or []
    for i in l1:
        l2.append(i)
    return l2"
21865,"def append2list(l1, l2=None):
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    for i in l1:
        l2.append(i)
    return l2"
19027,"def append2list(l1, l2=None):
    for i in l1:
        if l2 is None:
            l2 = []
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    for i in l1:
        if l2 is None:
            l2 = []
        l2.append(i)
    return l2"
32284,"def append2list(l1, l2=None):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2"
21020,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    else:
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    else:
        for i in l1:
            l2.append(i)
    return l2"
40992,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    else:
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    else:
        for i in l1:
            l2.append(i)
    return l2"
11443,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
18202,"def append2list(l1, l2=None):
    if l2 == None:
        l2 == []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        l2 == []
    for i in l1:
        l2.append(i)
    return l2"
22947,"def append2list(l1, l2=None):
    if l2 == None:
        return l1
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 == None:
        return l1
    for i in l1:
        l2.append(i)
    return l2"
18089,"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
    else:
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
    else:
        for i in l1:
            l2.append(i)
    return l2"
17089,"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    else:
        l2 = l2
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    else:
        l2 = l2
    for i in l1:
        l2.append(i)
    return l2"
19795,"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    else:
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    else:
        for i in l1:
            l2.append(i)
        return l2"
13491,"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
        print(l2)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
        print(l2)
    return l2"
14878,"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
23459,"def append2list(l1, l2=None):
    if l2 is None:
        ls = []
    for i in l1:
        l2.append(i)
        print(l2)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        ls = []
    for i in l1:
        l2.append(i)
        print(l2)
    return l2"
26810,"def append2list(l1, l2=None):
    if l2 is None:
        return l1
    else:
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2 is None:
        return l1
    else:
        for i in l1:
            l2.append(i)
        return l2"
2262,"def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Name(id='x_1', ctx=Load()), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1"
16410,"def append2list(l1, l2=None):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=None):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
20834,"def append2list(l1=[], l2=[]):
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1=[], l2=[]):
    for i in l1:
        l2.append(i)
    return l2"
26735,"def append2list(l1=[], l2=[]):
    return l2 + l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())]), body=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def append2list(l1=[], l2=[]):
    return l2 + l1"
4596,"def append2list(l1, l2=[]):
    l = []
    l = l2
    for i in l1:
        l.append(i)
    return l",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    l = []
    l = l2
    for i in l1:
        l.append(i)
    return l"
18219,"def append2list(l1, l2=[]):
    empty = []
    for i in l2:
        empty.append(i)
    for i in l1:
        empty.append(i)
    return empty",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    empty = []
    for i in l2:
        empty.append(i)
    for i in l1:
        empty.append(i)
    return empty"
41126,"def append2list(l1, l2=[]):
    l = l2
    for i in l1:
        l.append(i)
    return l",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    l = l2
    for i in l1:
        l.append(i)
    return l"
14114,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
        print(l2)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
        print(l2)
    return l2"
16043,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    l1 = l1.clear()
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    l1 = l1.clear()
    return l2"
17035,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    l3 = []
    l3 = l2
    l2 = []
    return l3",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    l3 = []
    l3 = l2
    l2 = []
    return l3"
15141,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    l3 = l2
    l2 = []
    return l3",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    l3 = l2
    l2 = []
    return l3"
11653,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2
    l2 = []",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2
    l2 = []"
31883,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2"
20115,"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2"
12268,"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2"
160,"def append2list(l1, l2=[]):
    if l2 == ' ':
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=' ')]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 == ' ':
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
36390,"def append2list(l1, l2=[]):
    if l2 == '':
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 == '':
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
31644,"def append2list(l1, l2=[]):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
40932,"def append2list(l1, l2=[]):
    if l2 == None:
        l3 = []
        for i in l1:
            l3.append(i)
            return l3
    else:
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 == None:
        l3 = []
        for i in l1:
            l3.append(i)
            return l3
    else:
        for i in l1:
            l2.append(i)
        return l2"
36882,"def append2list(l1, l2=[]):
    if l2 == []:
        l3 = []
        for i in l1:
            l3.append(i)
            return l3
    else:
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 == []:
        l3 = []
        for i in l1:
            l3.append(i)
            return l3
    else:
        for i in l1:
            l2.append(i)
        return l2"
25960,"def append2list(l1, l2=[]):
    if l2 == []:
        l3 = []
        for i in l1:
            l3.append(i)
            return l3
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 == []:
        l3 = []
        for i in l1:
            l3.append(i)
            return l3
    for i in l1:
        l2.append(i)
    return l2"
13991,"def append2list(l1, l2=[]):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2 is None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
11453,"def append2list(l1, l2=[]):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=Name(id='x_1', ctx=Load()), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    else:
        return l1"
11570,"def append2list(l1, l2=[]):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    if not l2:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2"
1677,"def append2list(l1, l2=[]):
    return l2 + l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[]):
    return l2 + l1"
19142,"def append2list(l1, l2=[][:]):
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Subscript(value=List(elts=[], ctx=Load()), slice=Slice(), ctx=Load())]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[][:]):
    for i in l1:
        l2.append(i)
    return l2"
14635,"def append2list(l1, l2=[][:]):
    return l2 + l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Subscript(value=List(elts=[], ctx=Load()), slice=Slice(), ctx=Load())]), body=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2=[][:]):
    return l2 + l1"
22873,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []"
30768,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2"
12083,"def append2list(l1, l2):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='append2list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def append2list(l1, l2):
    for i in l1:
        try:
            l2.append(i)
        except AttributeError:
            continue
    return l2"
7839,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,True,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"Module(body=[FunctionDef(name='area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Constant(value=3.141), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def area(r):
    r = r ** 2
    r = 3.141 * r
    return r"
41354,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=3.141), op=Mult(), right=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Pow(), right=Constant(value=2)))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def area(r):
    y = 3.141 * int(r) ** 2
    return y"
35554,"def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,True,ccb230ef-8610-4130-8882-d0643817d9b4,2016.0,"Module(body=[FunctionDef(name='area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=3.141), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Constant(value=2)))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def area(r):
    actual_area = 3.141 * r ** 2
    return actual_area"
18137,"def area(r):
    return 3.141 * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,True,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"Module(body=[FunctionDef(name='area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=3.141), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Constant(value=2))))], decorator_list=[])], type_ignores=[])","def area(r):
    return 3.141 * r ** 2"
40465,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",True,2ff47805-d62a-4ff9-9297-d30f89b68639,2016.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())), op=FloorDiv(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low"
30761,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",True,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2015.0,"Module(body=[FunctionDef(name='bsearch', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), op=FloorDiv(), right=Constant(value=2))), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low"
12723,"def circle_area(b):
    b = b * b * 3.14
    return b",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,f1bd9735-8e07-4248-830f-ae65dbe0a5c2,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Mult(), right=Constant(value=3.14))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_area(b):
    b = b * b * 3.14
    return b"
1880,"def circle_area(r):
    area = r * r * 3.14
    return area",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Mult(), right=Constant(value=3.14))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_area(r):
    area = r * r * 3.14
    return area"
9336,"def circle_area(n):
    result2 = 3.14 * (n * n)
    return result2",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=3.14), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load())))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_area(n):
    result2 = 3.14 * (n * n)
    return result2"
24637,"def circle_area(n):
    sq = 3.14 * n ** 2
    return sq",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=3.14), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Constant(value=2)))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_area(n):
    sq = 3.14 * n ** 2
    return sq"
29607,"def circle_area(r):
    circlearea = r * r
    carea = 3.14 * circlearea
    return carea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,1bdd9f47-4a26-4f0c-ae56-413531e3f59b,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=3.14), op=Mult(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_area(r):
    circlearea = r * r
    carea = 3.14 * circlearea
    return carea"
38533,"def circle_area(r):
    return r * r * 3.14",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Mult(), right=Constant(value=3.14)))], decorator_list=[])], type_ignores=[])","def circle_area(r):
    return r * r * 3.14"
4087,"def circle_area(x):
    return 3.14 * (x * x)",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=3.14), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load()))))], decorator_list=[])], type_ignores=[])","def circle_area(x):
    return 3.14 * (x * x)"
7975,"def circle_area(a):
    return 3.14 * a ** 2",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"Module(body=[FunctionDef(name='circle_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=3.14), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Constant(value=2))))], decorator_list=[])], type_ignores=[])","def circle_area(a):
    return 3.14 * a ** 2"
33961,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,True,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Mult(), right=Constant(value=3.14))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area"
16834,"def circle_circumference(c):
    c = 2 * 3.14 * c
    return c",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,f1bd9735-8e07-4248-830f-ae65dbe0a5c2,2016.0,"Module(body=[FunctionDef(name='circle_circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.14)), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_circumference(c):
    c = 2 * 3.14 * c
    return c"
12042,"def circle_circumference(n):
    cc = 2 * 3.14 * n
    return cc",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"Module(body=[FunctionDef(name='circle_circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.14)), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_circumference(n):
    cc = 2 * 3.14 * n
    return cc"
28861,"def circle_circumference(x):
    circum = 2 * (x * 3.14)
    return circum",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,dc8a6a6b-b7c8-4aaf-8447-f5f1b92f7daa,2015.0,"Module(body=[FunctionDef(name='circle_circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=2), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=3.14)))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_circumference(x):
    circum = 2 * (x * 3.14)
    return circum"
26447,"def circle_circumference(r):
    return 2 * 3.14 * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"Module(body=[FunctionDef(name='circle_circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.14)), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def circle_circumference(r):
    return 2 * 3.14 * r"
22556,"def circle_circumference(side):
    return 2 * side * 3.14",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"Module(body=[FunctionDef(name='circle_circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Mult(), right=Constant(value=3.14)))], decorator_list=[])], type_ignores=[])","def circle_circumference(side):
    return 2 * side * 3.14"
40291,"def circle_circumference(r):
    return r * 2 * 3.14",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,e45f938b-9d5c-4838-86ce-0755e3c97053,2016.0,"Module(body=[FunctionDef(name='circle_circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Mult(), right=Constant(value=3.14)))], decorator_list=[])], type_ignores=[])","def circle_circumference(r):
    return r * 2 * 3.14"
33863,"def circle_circumference(r):
    circle_circumference = 2 * 3.14 * r
    return circle_circumference",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,True,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.14)), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circle_circumference(r):
    circle_circumference = 2 * 3.14 * r
    return circle_circumference"
14113,"def circumference(r):
    r = 2 * 3.141 * r
    return r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.141)), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circumference(r):
    r = 2 * 3.141 * r
    return r"
5614,"def circumference(r):
    y = 2 * 3.141 * int(r)
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.141)), op=Mult(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circumference(r):
    y = 2 * 3.141 * int(r)
    return y"
31090,"def circumference(r):
    y = 2 * 3.141 * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.141)), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circumference(r):
    y = 2 * 3.141 * r
    return y"
30264,"def circumference(r):
    y = 3.141 * 2 * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=3.141), op=Mult(), right=Constant(value=2)), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def circumference(r):
    y = 3.141 * 2 * r
    return y"
1903,"def circumference(r):
    return 2 * 3.141 * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Constant(value=3.141)), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def circumference(r):
    return 2 * 3.141 * r"
3543,"def circumference(r):
    return 3.141 * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value=3.141), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Mult(), right=Constant(value=2)))], decorator_list=[])], type_ignores=[])","def circumference(r):
    return 3.141 * r * 2"
39851,"def circumference(r):
    return r * 2 * 3.141",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='circumference', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Mult(), right=Constant(value=3.141)))], decorator_list=[])], type_ignores=[])","def circumference(r):
    return r * 2 * 3.141"
398,"def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a[:-1], count)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a[:-1], count)"
27689,"def count_letters(s, i=0):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s, i=0):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])"
17269,"def count_letters(string, count=0):
    if string == '':
        return count
    else:
        string = string[1:]
    return count_letters(string, count + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(string, count=0):
    if string == '':
        return count
    else:
        string = string[1:]
    return count_letters(string, count + 1)"
14251,"def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s, c)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s, c)"
20170,"def count_letters(word, current=0):
    if word == '':
        return current
    return count_letters(word[1:], current=current + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[keyword(arg='x_1', value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))]))], decorator_list=[])], type_ignores=[])","def count_letters(word, current=0):
    if word == '':
        return current
    return count_letters(word[1:], current=current + 1)"
37990,"def count_letters(s, c=0):
    if not s:
        return c
    return count_letters(s[:-1], c + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s, c=0):
    if not s:
        return c
    return count_letters(s[:-1], c + 1)"
5817,"def count_letters(item, length=0):
    try:
        item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Try(body=[Expr(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Name(id='x_1', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(item, length=0):
    try:
        item[0]
    except IndexError:
        return length
    item = item[1:]
    length += 1
    return count_letters(item, length)"
11704,"def count_letters(line=''):
    return len(line)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(line=''):
    return len(line)"
26446,"def count_letters(a):
    al = list(a)
    tot = 0
    for c in al:
        tot += +1
    return tot",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=UnaryOp(op=UAdd(), operand=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(a):
    al = list(a)
    tot = 0
    for c in al:
        tot += +1
    return tot"
11089,"def count_letters(s):
    n = 0
    print(s)
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    n = 0
    print(s)
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])"
39619,"def count_letters(s):
    n = 0
    print(n)
    if not s:
        return 0
    else:
        n += 1
        print(n)
        return n + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    n = 0
    print(n)
    if not s:
        return 0
    else:
        n += 1
        print(n)
        return n + count_letters(s[1:])"
4179,"def count_letters(s):
    n = 0
    print(n)
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    n = 0
    print(n)
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])"
14483,"def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    i = 0
    for c in s:
        i += 1
    return i"
4096,"def count_letters(s):
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    return counter",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    counter = 0
    if s == '':
        return 0
    else:
        for c in s:
            counter += 1
    return counter"
11813,"def count_letters(s):
    n = 0
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    n = 0
    if not s:
        return 0
    else:
        n += 1
        return n + count_letters(s[1:])"
38754,"def count_letters(s):
    n = 0
    if not s:
        return 0
    else:
        n += 1
    return n + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    n = 0
    if not s:
        return 0
    else:
        n += 1
    return n + count_letters(s[1:])"
37003,"def count_letters(s):
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 0:
        return 0
    elif len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])"
35055,"def count_letters(word):
    if len(word) == 0:
        return 0
    else:
        return 1 + count_letters(word[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(word):
    if len(word) == 0:
        return 0
    else:
        return 1 + count_letters(word[1:])"
30570,"def count_letters(s):
    if len(s) == 0:
        return 0
    s = list(s)
    s.remove(s[0])
    return 1 + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if len(s) == 0:
        return 0
    s = list(s)
    s.remove(s[0])
    return 1 + count_letters(s)"
6938,"def count_letters(n):
    if n == '':
        return 0
    else:
        return count_letters(n[1:]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def count_letters(n):
    if n == '':
        return 0
    else:
        return count_letters(n[1:]) + 1"
9744,"def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])"
14541,"def count_letters(m):
    if m == '':
        return 0
    else:
        return 1 + count_letters(m[:-1])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(m):
    if m == '':
        return 0
    else:
        return 1 + count_letters(m[:-1])"
12729,"def count_letters(s):
    if s == '':
        return 0
    s = s[1:]
    return 1 + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    s = s[1:]
    return 1 + count_letters(s)"
10572,"def count_letters(a):
    if a == '':
        return 0
    a = a[:-1]
    n = 1
    return n + count_letters(a)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(a):
    if a == '':
        return 0
    a = a[:-1]
    n = 1
    return n + count_letters(a)"
4051,"def count_letters(s):
    if s == '':
        return 0
    count = 0
    for c in s:
        count += 1
    return count",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    count = 0
    for c in s:
        count += 1
    return count"
31241,"def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[1:]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[1:]) + 1"
20652,"def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[:-1]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[:-1]) + 1"
36598,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])"
36133,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])"
10149,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='replace', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=''), Constant(value=1)], keywords=[])], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))"
31100,"def count_letters(s):
    if not s:
        return 0
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if not s:
        return 0
    else:
        return 1 + count_letters(s[1:])"
10403,"def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:]) + 1",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:]) + 1"
34016,"def count_letters(s):
    if not s:
        return 0
    return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    if not s:
        return 0
    return 1 + count_letters(s[1:])"
876,"def count_letters(word):
    if not word:
        return 0
    return 1 + count_letters(word[:-1])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def count_letters(word):
    if not word:
        return 0
    return 1 + count_letters(word[:-1])"
34985,"def count_letters(s):
    return len(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def count_letters(s):
    return len(s)"
5960,"def count_letters(l):
    return 1 + count_letters(l[1:]) if l else 0",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,True,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"Module(body=[FunctionDef(name='count_letters', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Name(id='x_0', ctx=Load()), body=BinOp(left=Constant(value=1), op=Add(), right=Call(func=Name(id='count_letters', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), orelse=Constant(value=0)))], decorator_list=[])], type_ignores=[])","def count_letters(l):
    return 1 + count_letters(l[1:]) if l else 0"
16573,"def double(n):
    n = n * 2
    return n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"Module(body=[FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def double(n):
    n = n * 2
    return n"
11140,"def double(n):
    y = 2 * n
    return y",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"Module(body=[FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def double(n):
    y = 2 * n
    return y"
18439,"def double(x):
    y = x * 2
    return y",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"Module(body=[FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def double(x):
    y = x * 2
    return y"
20797,"def double(n):
    return 2 * n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,"Module(body=[FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def double(n):
    return 2 * n"
38787,"def double(n):
    return n + n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,"Module(body=[FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def double(n):
    return n + n"
20886,"def double(n):
    return n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,True,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,"Module(body=[FunctionDef(name='double', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2)))], decorator_list=[])], type_ignores=[])","def double(n):
    return n * 2"
17157,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a"
14231,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        print(a)
        temp = a
        a = b
        b = temp + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        print(a)
        temp = a
        a = b
        b = temp + b
    return a"
31136,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_5', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]"
34271,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a"
37659,"def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1):
            a, b = b, a + b
    else:
        return 0
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load()))], orelse=[])], orelse=[Return(value=Constant(value=0))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a = 1
    b = 1
    if n != 0:
        for i in range(n - 1):
            a, b = b, a + b
    else:
        return 0
    return a"
15928,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)])]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num"
24250,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=1)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[])]), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)])]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num"
3639,"def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1), Constant(value=1)], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), Name(id='x_0', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]"
40752,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=2)), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]"
18638,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)"
41821,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a"
32298,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,1bdd9f47-4a26-4f0c-ae56-413531e3f59b,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN"
4846,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            fib = a + b
            a = b
            b = fib
            i += 1
        return fib",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            fib = a + b
            a = b
            b = fib
            i += 1
        return fib"
20626,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1))])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    return sum1"
33237,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)"
11138,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,b8085080-0ead-4e7d-88a1-f66d565aea2e,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)"
8523,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)"
10380,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='x_2', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a"
34755,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN"
14658,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)"
11559,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=1), Constant(value=2)], ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))], decorator_list=[])], type_ignores=[])","def fibonacci(s):
    if s == 0:
        return 0
    if s in (1, 2):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)"
32173,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,True,9b929794-1500-4125-bf6c-79d74c111918,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1"
23563,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)"
19287,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='fibonacci', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=Name(id='x_0', ctx=Load()), orelse=BinOp(left=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='fibonacci', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))))], decorator_list=[])], type_ignores=[])","def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)"
29248,"def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)"
27103,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1"
31321,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1"
31642,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)"
42169,"def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1))), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)"
38367,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,b8085080-0ead-4e7d-88a1-f66d565aea2e,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)"
15027,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='index', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n"
38240,"def index(str, letter, n):
    return str.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",True,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(str, letter, n):
    return str.find(letter)"
20244,"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c:
                if str[i:i + len(letter)] == letter:
                    return i
            i += 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_2', ctx=Load()), upper=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c:
                if str[i:i + len(letter)] == letter:
                    return i
            i += 1
    return -1"
18096,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,1bdd9f47-4a26-4f0c-ae56-413531e3f59b,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1"
6871,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1"
10062,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,0b0c54f1-c900-465f-a33a-5c22b0497dc4,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1"
11365,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1"
42482,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1"
3727,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])], decorator_list=[])], type_ignores=[])","def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1"
9382,"def index(steve, letter):
    return steve.find(letter)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",True,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"Module(body=[FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def index(steve, letter):
    return steve.find(letter)"
19594,"def intersection(a, b):
    seen = {}
    appended = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in appended:
            c.append(b[i])
            appended[b[i]] = True
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",True,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2016.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    appended = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in appended:
            c.append(b[i])
            appended[b[i]] = True
        i = i + 1
    return c"
16824,"def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c",intersection,intersection,Return the intersection between two lists.,"assert intersection([],[])==[] and intersection([20052, 20052, -9991],[102, 20052, -9991])==[20052, -9991] and intersection([38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794],[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794])==[38908273694008580353068229963801163341, 59, -38, 28239, -2723, 24559, -5794]",True,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2016.0,"Module(body=[FunctionDef(name='intersection', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_3', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='x_3', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def intersection(a, b):
    seen = {}
    append = {}
    c = []
    i = 0
    while i < len(a):
        seen[a[i]] = True
        i = i + 1
    i = 0
    while i < len(b):
        if b[i] in seen and b[i] not in append:
            c.append(b[i])
            append[b[i]] = True
        i = i + 1
    return c"
40750,"_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return maximum(new_l, item if old_max == _A or item > old_max else
            old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[Assign(targets=[Name(id='_A', ctx=Store())], value=Constant(value=None)), FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_A', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='_A', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_3', ctx=Load()), IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='_A', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return maximum(new_l, item if old_max == _A or item > old_max else
            old_max)
    else:
        return old_max"
32175,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)"
39231,"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return maximum(a[:-1], tmp)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return maximum(a[:-1], tmp)"
26982,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)"
7101,"def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)"
31370,"def maximum(l, max_n=None):
    if not len(l):
        return max_n
    if not max_n or l[0] > max_n:
        return maximum(l[1:], l[0])
    return maximum(l[1:], max_n)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l, max_n=None):
    if not len(l):
        return max_n
    if not max_n or l[0] > max_n:
        return maximum(l[1:], l[0])
    return maximum(l[1:], max_n)"
27397,"def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    return maximum(l, current_max)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    return maximum(l, current_max)"
16001,"def maximum(n=[]):
    List = sorted(n)
    return List[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(n=[]):
    List = sorted(n)
    return List[-1]"
39604,"def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        i += 1
    return a",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        i += 1
    return a"
34375,"def maximum(line=[]):
    m = line[0]
    for i in line:
        if i > m:
            m = i
    return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(line=[]):
    m = line[0]
    for i in line:
        if i > m:
            m = i
    return m"
40187,"def maximum(a):
    a = sorted(a)
    return a[len(a) - 1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    a = sorted(a)
    return a[len(a) - 1]"
19608,"def maximum(a):
    a = sorted(a)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    a = sorted(a)
    return a[-1]"
37701,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='null')), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest"
4827,"def maximum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini > a[i]:
            mini = mini
        elif mini < a[i]:
            mini = a[i]
        i += 1
    return mini",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini > a[i]:
            mini = mini
        elif mini < a[i]:
            mini = a[i]
        i += 1
    return mini"
38645,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min"
30078,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m"
11318,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp"
10999,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max"
40903,"def maximum(n):
    n.sort()
    return n[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(n):
    n.sort()
    return n[-1]"
325,"def maximum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a > b:
            m.append(a)
        else:
            m.append(b)
        return maximum(m)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a > b:
            m.append(a)
        else:
            m.append(b)
        return maximum(m)"
8558,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if m > l[0]:
            return m
        else:
            return l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if m > l[0]:
            return m
        else:
            return l[0]"
8495,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if l[0] > m:
            return l[0]
        else:
            return m",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = maximum(l[1:])
        if l[0] > m:
            return l[0]
        else:
            return m"
3669,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        m = maximum(list[1:])
        return m if m > list[0] else list[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Name(id='x_1', ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], decorator_list=[])], type_ignores=[])","def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        m = maximum(list[1:])
        return m if m > list[0] else list[0]"
12789,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret"
11433,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi"
13271,"def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] > a[1]:
            del a[1]
        else:
            del a[0]
        return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Del())])], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Del())])]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] > a[1]:
            del a[1]
        else:
            del a[0]
        return maximum(a)"
16280,"def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] < ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return maximum(ints)"
18982,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)"
9307,"def maximum(a):
    if len(a) == 1:
        return a[0]
    b = min(a)
    a = [c for c in a if c != b]
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Name(id='b', ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    b = min(a)
    a = [c for c in a if c != b]
    return maximum(a)"
31180,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi"
35619,"def maximum(l):
    if len(l) == 1:
        return l[0]
    bigger = maximum(l[1:])
    if l[0] > bigger:
        return l[0]
    return bigger",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    bigger = maximum(l[1:])
    if l[0] > bigger:
        return l[0]
    return bigger"
42228,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Name(id='x_1', ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]"
24386,"def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max"
10506,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if maximum(l[:-1]) >= maximum(l[1:]):
        return maximum(l[:-1])
    else:
        return maximum(l[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if maximum(l[:-1]) >= maximum(l[1:]):
        return maximum(l[:-1])
    else:
        return maximum(l[1:])"
23473,"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
        return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
        return maximum(a)"
16773,"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[0] > a[1]:
        a.remove(a[1])
        return maximum(a)
    else:
        a.remove(a[0])
    return maximum(a)"
26709,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)"
12781,"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return maximum(mylist)
    else:
        mylist.remove(mylist[1])
        return maximum(mylist)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return maximum(mylist)
    else:
        mylist.remove(mylist[1])
        return maximum(mylist)"
38255,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        return maximum(l[1:])
    else:
        return maximum([l[0]] + l[2:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        return maximum(l[1:])
    else:
        return maximum([l[0]] + l[2:])"
27479,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return maximum(l[1:])
    else:
        return maximum(l[:-1])"
10031,"def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] < a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return maximum(a)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] < a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return maximum(a)"
35751,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=ListComp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='s', ctx=Load()), ops=[GtE()], comparators=[Name(id='i', ctx=Load())]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]"
21763,"def maximum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] > a[-1]:
        return maximum(a[:-1])
    elif a[0] < a[-1]:
        return maximum(a[1:])",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","def maximum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] > a[-1]:
        return maximum(a[:-1])
    elif a[0] < a[-1]:
        return maximum(a[1:])"
26962,"def maximum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    if tail_max == []:
        return l[0]
    return l[0] if l[0] > tail_max else tail_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='maximum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    if tail_max == []:
        return l[0]
    return l[0] if l[0] > tail_max else tail_max"
10667,"def maximum(l):
    return max(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return max(l)"
15989,"def maximum(l):
    return sorted(l)[len(l) - 1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return sorted(l)[len(l) - 1]"
5712,"def maximum(l):
    return sorted(l)[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    return sorted(l)[-1]"
26095,"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",True,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"Module(body=[FunctionDef(name='merge_lists', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3"
39712,"_A = None


def minimum(l, old_min=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return minimum(new_l, item if old_min == _A or item < old_min else
            old_min)
    else:
        return old_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[Assign(targets=[Name(id='_A', ctx=Store())], value=Constant(value=None)), FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_A', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='_A', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_3', ctx=Load()), IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Name(id='_A', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load()))], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","_A = None


def minimum(l, old_min=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return minimum(new_l, item if old_min == _A or item < old_min else
            old_min)
    else:
        return old_min"
5252,"def minimum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini > collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini > collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)"
1010,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)"
2483,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)"
38261,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=100000000000000000000000000000000000000000000)]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)"
17266,"def minimum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] < c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] < c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)"
21961,"def minimum(l, m=None):
    if not len(l):
        return m
    if not m or l[0] < m:
        return minimum(l[1:], l[0])
    return minimum(l[1:], m)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, m=None):
    if not len(l):
        return m
    if not m or l[0] < m:
        return minimum(l[1:], l[0])
    return minimum(l[1:], m)"
40564,"def minimum(l, current_min=None):
    if not l:
        return current_min
    first = l.pop()
    if current_min == None or first < current_min:
        return minimum(l, first)
    return minimum(l, current_min)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l, current_min=None):
    if not l:
        return current_min
    first = l.pop()
    if current_min == None or first < current_min:
        return minimum(l, first)
    return minimum(l, current_min)"
16810,"def minimum(n=[]):
    List = sorted(n)
    return List[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n=[]):
    List = sorted(n)
    return List[0]"
7058,"def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a > m[i]:
            a = m[i]
        i += 1
    return a"
10412,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
    return m"
9577,"def minimum(a):
    a = sorted(a)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    a = sorted(a)
    return a[0]"
13731,"def minimum(l):
    A = 'null'
    lowest = A
    for c in l:
        if lowest == A:
            lowest = c
        elif c < lowest:
            lowest = c
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='null')), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    A = 'null'
    lowest = A
    for c in l:
        if lowest == A:
            lowest = c
        elif c < lowest:
            lowest = c
    return lowest"
33468,"def minimum(list_1):
    i = 0
    total = '1000000'
    while i < len(list_1):
        if int(list_1[i]) <= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='1000000')), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Constant(value=0))]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(list_1):
    i = 0
    total = '1000000'
    while i < len(list_1):
        if int(list_1[i]) <= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total"
14306,"def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    i = 1
    s = a[0]
    while i < len(a):
        if s > a[i]:
            s = a[i]
        i = i + 1
    return s"
40154,"def minimum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini < a[i]:
            mini = mini
        elif mini > a[i]:
            mini = a[i]
        i += 1
    return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    i = 1
    mini = a[0]
    while i < len(a):
        if mini < a[i]:
            mini = mini
        elif mini > a[i]:
            mini = a[i]
        i += 1
    return mini"
2504,"def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())])]), body=Name(id='x_2', ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min"
3534,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m"
10228,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp"
39680,"def minimum(s):
    min = s[0]
    for c in s[1:]:
        if c < min:
            min = c
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(s):
    min = s[0]
    for c in s[1:]:
        if c < min:
            min = c
    return min"
193,"def minimum(l):
    l.sort()
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    l.sort()
    return l[0]"
40725,"def minimum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a < b:
            m.append(a)
        else:
            m.append(b)
        return minimum(m)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(m):
    if len(m) == 1:
        return m[0]
    else:
        a = m.pop()
        b = m.pop()
        if a < b:
            m.append(a)
        else:
            m.append(b)
        return minimum(m)"
18210,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = minimum(l[1:])
        if m < l[0]:
            return m
        else:
            return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        m = minimum(l[1:])
        if m < l[0]:
            return m
        else:
            return l[0]"
12224,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini"
14870,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret"
5923,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini"
24521,"def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(ints):
    if len(ints) == 1:
        return ints[0]
    elif ints[0] > ints[1]:
        ints.remove(ints[0])
    else:
        ints.remove(ints[1])
    return minimum(ints)"
40529,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Del())])], orelse=[Delete(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Del())])]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)"
10326,"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(0)
        else:
            list.pop(-1)
        return minimum(list)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(0)
        else:
            list.pop(-1)
        return minimum(list)"
7163,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))"
40125,"def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='b', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='c', ctx=Load()), ops=[NotEq()], comparators=[Name(id='b', ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)"
15784,"def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    mini = minimum(l[1:])
    if l[0] < mini:
        return l[0]
    else:
        return mini"
1386,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller"
10014,"def minimum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m < l[0] else l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Name(id='x_1', ctx=Load()), orelse=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m < l[0] else l[0]"
25667,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min"
29107,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if minimum(l[:-1]) >= minimum(l[1:]):
        return minimum(l[1:])
    else:
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if minimum(l[:-1]) >= minimum(l[1:]):
        return minimum(l[1:])
    else:
        return minimum(l[:-1])"
1581,"def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] > mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] > mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)"
7475,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum([l[0]] + l[2:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum([l[0]] + l[2:])"
18766,"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
        return minimum(a)"
20028,"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[0] < a[1]:
        a.remove(a[1])
        return minimum(a)
    else:
        a.remove(a[0])
    return minimum(a)"
14591,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)"
24722,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])"
326,"def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] > a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[0]
    if a[-2] > a[-1]:
        a[-2], a[-1] = a[-1], a[-2]
    a.pop()
    return minimum(a)"
11948,"def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return min(l)"
2256,"def minimum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s <= i for i in l)][0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=ListComp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='s', ctx=Load()), ops=[LtE()], comparators=[Name(id='i', ctx=Load())]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], is_async=0)]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s <= i for i in l)][0]"
29480,"def minimum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Return(value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[])])])], decorator_list=[])], type_ignores=[])","def minimum(a):
    if len(a) == 1:
        return a[-1]
    elif a[0] < a[-1]:
        return minimum(a[:-1])
    elif a[0] > a[-1]:
        return minimum(a[1:])"
41522,"def minimum(n):
    if n == 0:
        return 0
    i = 1
    p = 0
    while i < len(n):
        if n[i] < n[p]:
            n[p] = n[i]
        i = i + 1
    return n[p]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(n):
    if n == 0:
        return 0
    i = 1
    p = 0
    while i < len(n):
        if n[i] < n[p]:
            n[p] = n[i]
        i = i + 1
    return n[p]"
13750,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='minimum', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=IfExp(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min"
33618,"def minimum(l):
    return min(l)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def minimum(l):
    return min(l)"
25211,"def minimum(l):
    return sorted(l)[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(l):
    return sorted(l)[0]"
29927,"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"Module(body=[Assign(targets=[Name(id='_A', ctx=Store())], value=Constant(value=None)), FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_A', ctx=Load()), Name(id='_A', ctx=Load()), Name(id='_A', ctx=Load()), Name(id='_A', ctx=Load()), Name(id='_A', ctx=Load()), Name(id='_A', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Is()], comparators=[Name(id='_A', ctx=Load())]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=1))], orelse=[]), Return(value=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2"
27527,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False"
17729,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    return dist < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Return(value=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    return dist < r1 + r2"
26670,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False"
31346,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p1 = (x2 - x1) ** 2
    dist_p2 = (y2 - y1) ** 2
    dist_p = (dist_p1 + dist_p2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Name(id='x_7', ctx=Load())), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_9', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p1 = (x2 - x1) ** 2
    dist_p2 = (y2 - y1) ** 2
    dist_p = (dist_p1 + dist_p2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False"
37897,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))])), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance"
8563,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_3', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Name(id='x_4', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), ops=[Gt()], comparators=[Name(id='x_6', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False"
6457,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Sub(), right=Name(id='x_3', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Name(id='x_4', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2"
37044,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False"
39107,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    return dist < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Return(value=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    return dist < r1 + r2"
25956,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if distance < total_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load()), Name(id='x_3', ctx=Load()), Name(id='x_4', ctx=Load()), Name(id='x_5', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Tuple(elts=[Name(id='x_7', ctx=Load()), Name(id='x_6', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    print((x1, y1, r1, x2, y2, r2))
    print((total_radius, distance))
    if distance < total_radius:
        return True
    else:
        return False"
37890,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return False
    else:
        return True"
25484,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False"
31126,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Return(value=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii"
36445,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if float(r1) > distance - r2 and float(r2) > distance - r1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[BinOp(left=Name(id='x_6', ctx=Load()), op=Sub(), right=Name(id='x_5', ctx=Load()))]), Compare(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[BinOp(left=Name(id='x_6', ctx=Load()), op=Sub(), right=Name(id='x_2', ctx=Load()))])]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if float(r1) > distance - r2 and float(r2) > distance - r1:
        return True
    else:
        return False"
34574,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 <= distance:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), ops=[LtE()], comparators=[Name(id='x_6', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 <= distance:
        return False
    else:
        return True"
36354,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True"
31876,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False"
9148,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False"
15531,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), ops=[Gt()], comparators=[Name(id='x_6', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance"
20723,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return dist < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return dist < r1 + r2"
14313,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = (x2 - x1) ** 2 + (y2 - y1) ** 2
    dist2 = dist ** 0.5
    if dist2 < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2)))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = (x2 - x1) ** 2 + (y2 - y1) ** 2
    dist2 = dist ** 0.5
    if dist2 < r1 + r2:
        return True
    else:
        return False"
20872,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2))], keywords=[]), op=Add(), right=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))], keywords=[])), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), ops=[Gt()], comparators=[Name(id='x_6', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance:
        return True
    else:
        return False"
26771,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Name(id='x_7', ctx=Load())), op=Pow(), right=Constant(value=0.5))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_9', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False"
24628,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_6', ctx=Load()), op=Add(), right=Name(id='x_7', ctx=Load()))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Assign(targets=[Name(id='x_10', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_10', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False"
21097,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rdistance = r1 + r2
    cdistance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if cdistance < rdistance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), If(test=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_6', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rdistance = r1 + r2
    cdistance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if cdistance < rdistance:
        return True
    else:
        return False"
20884,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_7', ctx=Load()), op=Add(), right=Name(id='x_8', ctx=Load())), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=Name(id='x_9', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_6', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r"
20029,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load()))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_6', ctx=Load()), op=Mult(), right=Name(id='x_6', ctx=Load())), op=Add(), right=BinOp(left=Name(id='x_7', ctx=Load()), op=Mult(), right=Name(id='x_7', ctx=Load()))), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=Name(id='x_8', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_9', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance"
1309,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x ** 2 + y ** 2) ** 0.5
    return r > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load()))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_6', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='x_7', ctx=Load()), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=Name(id='x_8', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_9', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x ** 2 + y ** 2) ** 0.5
    return r > distance"
37180,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,3a14771a-b55c-44f8-97ab-0376389e494c,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='x_7', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='x_8', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_6', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='x_7', ctx=Load()), op=Pow(), right=Constant(value=2)))), Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Pow(), right=Constant(value=0.5))), Return(value=Compare(left=Name(id='x_9', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h < r1 + r2"
8052,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))])), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance"
11088,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[If(test=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='x_1', ctx=Load()), op=Pow(), right=Constant(value=2)))), op=Pow(), right=Constant(value=1)), op=Div(), right=Constant(value=2)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False"
22394,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[If(test=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2))), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2) < r1 + r2:
        return True
    else:
        return False"
18949,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[If(test=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2:
        return True
    else:
        return False"
29112,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), ops=[Gt()], comparators=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5))]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False"
41797,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[ImportFrom(module='math', names=[alias(name='x_6')], level=0), Assign(targets=[Name(id='x_7', ctx=Store())], value=Call(func=Name(id='x_6', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2)))], keywords=[])), Return(value=Compare(left=Name(id='x_7', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2"
4601,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2"
15750,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value=1)]), body=[Return(value=Compare(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=Constant(value=0.5)), ops=[Lt()], comparators=[BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))]))], decorator_list=[])], type_ignores=[])","def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1"
40108,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='overlap', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3'), arg(arg='x_4'), arg(arg='x_5')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Name(id='x_0', ctx=Load())), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Pow(), right=Constant(value=2))), op=Pow(), right=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2)))), Assign(targets=[Name(id='x_7', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load()))), If(test=Compare(left=Name(id='x_6', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_7', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False"
28347,"def power(m, n, flag=True, m1=None):
    if not n:
        return 1
    if flag:
        m1 = m
    if n == 1:
        return m
    return power(m * m1, n - 1, False, m1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2'), arg(arg='x_3')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='power', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_3', ctx=Load())), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)), Constant(value=False), Name(id='x_3', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def power(m, n, flag=True, m1=None):
    if not n:
        return 1
    if flag:
        m1 = m
    if n == 1:
        return m
    return power(m * m1, n - 1, False, m1)"
23281,"def power(base, exp, mult=None):
    if mult is None:
        mult = base
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * mult
        new_exp = exp - 1
        return power(new_base, new_exp, mult)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_4', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def power(base, exp, mult=None):
    if mult is None:
        mult = base
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * mult
        new_exp = exp - 1
        return power(new_base, new_exp, mult)"
3372,"def power(m, n):
    m = m ** n
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def power(m, n):
    m = m ** n
    return m"
34636,"def power(m, n):
    if m == 1 or n == 0:
        return 1
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if m == 1 or n == 0:
        return 1
    return m * power(m, n - 1)"
21930,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])])], decorator_list=[])], type_ignores=[])","def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)"
39920,"def power(n, p):
    if p == 0:
        return 1
    else:
        return power(n, p - 1) * n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), op=Mult(), right=Name(id='x_0', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def power(n, p):
    if p == 0:
        return 1
    else:
        return power(n, p - 1) * n"
4685,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))])], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)"
16350,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load())))])], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n"
35300,"def power(m, n):
    if n == 0:
        return 1
    if n == 1:
        return m
    if m == 0:
        return 0
    if m == 1:
        return 1
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 0:
        return 1
    if n == 1:
        return m
    if m == 0:
        return 0
    if m == 1:
        return 1
    return m * power(m, n - 1)"
1736,"def power(m, n):
    if n == 0:
        return 1
    if n == 1:
        return m
    if m == 0:
        return 0
    if m == 1:
        return 1
    return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 0:
        return 1
    if n == 1:
        return m
    if m == 0:
        return 0
    if m == 1:
        return 1
    return m ** n"
30362,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)"
35795,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 0:
        return 1
    return m ** n"
22898,"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * power(n, m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * power(n, m - 1)"
38678,"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n ** m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n ** m"
41533,"def power(m, n):
    if n == 1:
        return m
    if n < 1:
        return 1
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if n == 1:
        return m
    if n < 1:
        return 1
    return m * power(m, n - 1)"
17969,"def power(m, n):
    if not n:
        return 1
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), body=[Return(value=Constant(value=1))], orelse=[]), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])))], decorator_list=[])], type_ignores=[])","def power(m, n):
    if not n:
        return 1
    return m * power(m, n - 1)"
40889,"def power(n, mult):
    return n ** mult
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load()))), Expr(value=Call(func=Name(id='power', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])","def power(n, mult):
    return n ** mult
    power(n, mult - 1)"
8916,"def power(m, n):
    return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='power', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def power(m, n):
    return m ** n"
244,"def print_keys(dict):
    for key in dict:
        print(key)",print_keys,print_keys,"Print all the keys in a dictionary, one per line.","assert print_keys({})==None and print_keys({})==None and print_keys({'1': 'a'})==None and print_keys({'1': 'a'})==None and print_keys({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})==None and print_keys({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})==None and print_keys({'key1': 'a', 'key2': 'b', 'key3': 'a'})==None and print_keys({'key1': 'a', 'key2': 'b', 'key3': 'a'})==None",True,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"Module(body=[FunctionDef(name='print_keys', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def print_keys(dict):
    for key in dict:
        print(key)"
37454,"def quicksort(a, n, b):
    a = sorted(a)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def quicksort(a, n, b):
    a = sorted(a)"
10842,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        greater = [i for i in array if i == piv]
        array = less + greater + equal",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='piv', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_4', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_4', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load())), op=Add(), right=Name(id='x_5', ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        greater = [i for i in array if i == piv]
        array = less + greater + equal"
10702,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        greater = [i for i in array if i == piv]
        array = greater + equal + less",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='piv', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_4', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_4', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        greater = [i for i in array if i == piv]
        array = greater + equal + less"
1851,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='piv', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_4', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_5', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_4', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less"
355,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        print(less)
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='piv', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Assign(targets=[Name(id='x_5', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Name(id='piv', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_4', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_3', ctx=Load()), Name(id='x_1', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Name(id='x_5', ctx=Load())), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        print(less)
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less"
18287,"def quicksort(A, p, r):
    print(len(A))",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def quicksort(A, p, r):
    print(len(A))"
42186,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_4', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)"
1207,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1"
16093,"def quicksort(A, start, end):
    if end - start < 1:
        return
    i = j = start
    while i <= end:
        if A[i] <= A[end]:
            A[i], A[j] = A[j], A[i]
            j += 1
        i += 1
    quicksort(A, start, j - 2)
    quicksort(A, j, end)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Name(id='x_1', ctx=Load())), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_4', ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def quicksort(A, start, end):
    if end - start < 1:
        return
    i = j = start
    while i <= end:
        if A[i] <= A[end]:
            A[i], A[j] = A[j], A[i]
            j += 1
        i += 1
    quicksort(A, start, j - 2)
    quicksort(A, j, end)"
3935,"def quicksort(l, p, r):
    if r <= p:
        return
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='quicksort', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_4', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load())), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load()), BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Expr(value=Call(func=Name(id='quicksort', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), Name(id='x_2', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def quicksort(l, p, r):
    if r <= p:
        return
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)"
3002,"def rectangle_perimeter(d, e):
    d = d + d
    e = e + e
    return d + e",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(d, e):
    d = d + d
    e = e + e
    return d + e"
28066,"def rectangle_perimeter(n, a):
    rp = n + n + a + a
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_1', ctx=Load())), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(n, a):
    rp = n + n + a + a
    return rp"
8710,"def rectangle_perimeter(n, m):
    result4 = n + m + n + m
    return result4",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(n, m):
    result4 = n + m + n + m
    return result4"
12192,"def rectangle_perimeter(length, height):
    result = 2 * length + 2 * height
    return result",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_1', ctx=Load())))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(length, height):
    result = 2 * length + 2 * height
    return result"
11789,"def rectangle_perimeter(length, width):
    rectper = (length + width) * 2
    return rectper",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())), op=Mult(), right=Constant(value=2))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(length, width):
    rectper = (length + width) * 2
    return rectper"
12630,"def rectangle_perimeter(a, b):
    per = a * 2 + b * 2
    return per",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Constant(value=2)))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(a, b):
    per = a * 2 + b * 2
    return per"
13078,"def rectangle_perimeter(length, width):
    rp = 2 * (length + width)
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=2), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(length, width):
    rp = 2 * (length + width)
    return rp"
10931,"def rectangle_perimeter(x, y):
    side1 = x * 2
    side2 = y * 2
    rper = side1 + side2
    return rper",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,1bdd9f47-4a26-4f0c-ae56-413531e3f59b,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Constant(value=2))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(x, y):
    side1 = x * 2
    side2 = y * 2
    rper = side1 + side2
    return rper"
8769,"def rectangle_perimeter(a, b):
    return a + a + b + b",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_1', ctx=Load())), op=Add(), right=Name(id='x_1', ctx=Load())))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(a, b):
    return a + a + b + b"
9227,"def rectangle_perimeter(x, y):
    return 2 * x + 2 * y",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_0', ctx=Load())), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_1', ctx=Load()))))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(x, y):
    return 2 * x + 2 * y"
37405,"def rectangle_perimeter(l, h):
    return 2 * h + 2 * l",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_1', ctx=Load())), op=Add(), right=BinOp(left=Constant(value=2), op=Mult(), right=Name(id='x_0', ctx=Load()))))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(l, h):
    return 2 * h + 2 * l"
12967,"def rectangle_perimeter(side1, side2):
    return side1 * 2 + side2 * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,b69e2427-8f89-4880-8245-6f14d4d2354a,2015.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Constant(value=2))))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(side1, side2):
    return side1 * 2 + side2 * 2"
4904,"def rectangle_perimeter(l, w):
    return 2 * (l + w)",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,e45f938b-9d5c-4838-86ce-0755e3c97053,2016.0,"Module(body=[FunctionDef(name='rectangle_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=2), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(l, w):
    return 2 * (l + w)"
31864,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",True,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"Module(body=[FunctionDef(name='x_2', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Constant(value=2), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter"
40370,"def remove_zeros(list):
    while 0 in list:
        list.remove(0)",remove_zeros,remove_zeros,Take a list of numbers and removes the zeros from it.,"assert remove_zeros([])==None and remove_zeros([])==None and remove_zeros([5202, -24344, -6528])==None and remove_zeros([5202, -24344, -6528])==None",True,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"Module(body=[FunctionDef(name='remove_zeros', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def remove_zeros(list):
    while 0 in list:
        list.remove(0)"
24632,"def reverse(a):
    a = a[::-1]
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    a = a[::-1]
    return a"
29303,"def reverse(a):
    i = len(a) - 1
    new_array = []
    while i >= 0:
        new_array.append(a[i])
        i -= 1
    return new_array",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,1b62c11e-ae6b-4c7f-8eac-f8a9a0acb450,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    i = len(a) - 1
    new_array = []
    while i >= 0:
        new_array.append(a[i])
        i -= 1
    return new_array"
14815,"def reverse(a):
    n = len(a)
    i = 0
    while i < n / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,6668ebd6-a850-4666-b8cc-5c934a67601a,2015.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    n = len(a)
    i = 0
    while i < n / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a"
9559,"def reverse(a):
    i = 0
    b = []
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i += 1
    return b",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,aaa0b462-c89e-49f8-8886-ec2961496a19,2015.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    i = 0
    b = []
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i += 1
    return b"
335,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a"
9937,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a"
2589,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Store())], value=Name(id='x_2', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a"
30026,"def reverse(list):
    reversed = []
    i = len(list) - 1
    while i >= 0:
        reversed.append(list[i])
        i = i - 1
    return reversed",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(list):
    reversed = []
    i = len(list) - 1
    while i >= 0:
        reversed.append(list[i])
        i = i - 1
    return reversed"
4274,"def reverse(test):
    b = []
    i = 0
    while i < len(test):
        b.append(test[len(test) - 1 - i])
        i = i + 1
    return b",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(test):
    b = []
    i = 0
    while i < len(test):
        b.append(test[len(test) - 1 - i])
        i = i + 1
    return b"
27850,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b"
38042,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='x_1', ctx=Load())), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a"
33187,"def reverse(a):
    new = []
    for i in a.__reversed__():
        new.append(i)
    return new",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='__reversed__', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    new = []
    for i in a.__reversed__():
        new.append(i)
    return new"
31526,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,fc19956d-3237-43b9-841d-e5882c3359f1,2015.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b"
32746,"def reverse(a):
    b = a[::-1]
    return b",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    b = a[::-1]
    return b"
15708,"def reverse(string):
    results = string[::-1]
    return string[::-1]",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",True,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(string):
    results = string[::-1]
    return string[::-1]"
28951,"def reverse(a):
    a.reverse()
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    a.reverse()
    return a"
3661,"def reverse(a):
    return a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",True,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"Module(body=[FunctionDef(name='reverse', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse(a):
    return a[::-1]"
38577,"def reverse_list(a, b=[], flag=True):
    if flag == True:
        b = []
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b, flag=False)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[keyword(arg='x_2', value=Constant(value=False))]))], decorator_list=[])], type_ignores=[])","def reverse_list(a, b=[], flag=True):
    if flag == True:
        b = []
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b, flag=False)"
5881,"def reverse_list(input_list, workinglist=[], new=True):
    if new:
        workinglist = []
    if len(input_list) == 0:
        return workinglist
    else:
        workinglist.append(input_list[-1])
        return reverse_list(input_list[:-1], workinglist, False)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load()), Constant(value=True)]), body=[If(test=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Name(id='x_1', ctx=Load()), Constant(value=False)], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(input_list, workinglist=[], new=True):
    if new:
        workinglist = []
    if len(input_list) == 0:
        return workinglist
    else:
        workinglist.append(input_list[-1])
        return reverse_list(input_list[:-1], workinglist, False)"
6634,"def reverse_list(l, i=0):
    if i < len(l) // 2:
        l[i], l[-i - 1] = l[-i - 1], l[i]
        return reverse_list(l, i + 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[Return(value=Name(id='x_0', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l, i=0):
    if i < len(l) // 2:
        l[i], l[-i - 1] = l[-i - 1], l[i]
        return reverse_list(l, i + 1)
    else:
        return l"
12415,"def reverse_list(l, s=None):
    if s == None:
        s = []
    if l == []:
        return s
    else:
        s.append(l[-1])
        l.remove(l[-1])
        return reverse_list(l, s)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])","def reverse_list(l, s=None):
    if s == None:
        s = []
    if l == []:
        return s
    else:
        s.append(l[-1])
        l.remove(l[-1])
        return reverse_list(l, s)"
18130,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=List(elts=[Name(id='x_2', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l"
35334,"def reverse_list(l, reverse=None):
    if reverse is None:
        reverse = []
    if not l:
        return reverse
    else:
        reverse.append(l[-1])
        l.remove(l[-1])
    return reverse_list(l, reverse)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='remove', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))]), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l, reverse=None):
    if reverse is None:
        reverse = []
    if not l:
        return reverse
    else:
        reverse.append(l[-1])
        l.remove(l[-1])
    return reverse_list(l, reverse)"
17710,"def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(a, reverse=None):
    if not reverse:
        reverse = []
    if len(a) < 1:
        return reverse
    reverse.append(a.pop())
    return reverse_list(a, reverse)"
6103,"def reverse_list(l, ding=None):
    if not ding:
        ding = []
    if not l:
        return ding
    ding.append(l.pop())
    return reverse_list(l, ding)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load())), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def reverse_list(l, ding=None):
    if not ding:
        ding = []
    if not l:
        return ding
    ding.append(l.pop())
    return reverse_list(l, ding)"
40374,"def reverse_list(a=[]):
    a.reverse()
    return a",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a=[]):
    a.reverse()
    return a"
10457,"def reverse_list(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - 1 - i]
        a[len(a) - 1 - i] = tmp
        i += 1
    return a",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Store())], value=Name(id='x_2', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - 1 - i]
        a[len(a) - 1 - i] = tmp
        i += 1
    return a"
22202,"def reverse_list(l):
    reversedlist = []
    i = len(l) - 1
    while i > -1:
        reversedlist.append(l[i])
        i = i - 1
    return reversedlist",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    reversedlist = []
    i = len(l) - 1
    while i > -1:
        reversedlist.append(l[i])
        i = i - 1
    return reversedlist"
41299,"def reverse_list(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a.pop())
    i = i + 1
    return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a.pop())
    i = i + 1
    return b"
6320,"def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new"
11002,"def reverse_list(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[-i - 1])
        i += 1
    return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[-i - 1])
        i += 1
    return b"
15262,"def reverse_list(l):
    l2 = []
    i = 0
    while l:
        l2.append(l[len(l) - i - 1])
        tmp = l.pop()
    return l2",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    l2 = []
    i = 0
    while l:
        l2.append(l[len(l) - i - 1])
        tmp = l.pop()
    return l2"
39648,"def reverse_list(a):
    m = a[::-1]
    return m",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    m = a[::-1]
    return m"
41796,"def reverse_list(ls):
    ls.reverse()
    return ls",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(ls):
    ls.reverse()
    return ls"
32066,"def reverse_list(l):
    if len(l) == 1 or not l:
        return l
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load()))]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 1 or not l:
        return l
    return [l[-1]] + reverse_list(l[:-1])"
8584,"def reverse_list(l):
    if not l or len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l or len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])"
5384,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])"
5333,"def reverse_list(s):
    if len(s) == 0:
        return []
    t = s[-1]
    s.pop()
    return [t] + reverse_list(s)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=BinOp(left=List(elts=[Name(id='x_1', ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(s):
    if len(s) == 0:
        return []
    t = s[-1]
    s.pop()
    return [t] + reverse_list(s)"
14616,"def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if len(a) == 0:
        return []
    return [a[-1]] + reverse_list(a[:-1])"
37101,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)"
17553,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]"
7371,"def reverse_list(l):
    if l == []:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])"
21694,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp"
15947,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]"
29837,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])"
10086,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return []
    return l[::-1]"
26112,"def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(a):
    if a == []:
        return a
    return reverse_list(a[1:]) + [a[0]]"
26316,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])"
37122,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp"
36753,"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='x_0', ctx=Load())), body=[Return(value=Name(id='x_0', ctx=Load()))], orelse=[Return(value=BinOp(left=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])], decorator_list=[])], type_ignores=[])","def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])"
41116,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Name(id='x_0', ctx=Load()), body=BinOp(left=Call(func=Name(id='reverse_list', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())), orelse=List(elts=[], ctx=Load())))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []"
6287,"def reverse_list(l):
    return [x for x in reversed(l)]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return [x for x in reversed(l)]"
35305,"def reverse_list(l):
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='reverse_list', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], decorator_list=[])], type_ignores=[])","def reverse_list(l):
    return l[::-1]"
3963,"def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return True
            test = 2
        i = i + 1
    if test == 1:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=False))], orelse=[])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return True
            test = 2
        i = i + 1
    if test == 1:
        return False"
33454,"def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def search(string, letter):
    i = 0
    if letter in string:
        return True
    else:
        return False"
21492,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,1bdd9f47-4a26-4f0c-ae56-413531e3f59b,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False"
3126,"def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def search(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return True
        i += 1
    return False"
26899,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[])], type_ignores=[])","def search(str, letter):
    for item in str:
        if item == letter:
            return True
    return False"
19714,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,b8085080-0ead-4e7d-88a1-f66d565aea2e,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Call(func=Name(id='search', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='x_1', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)"
14480,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], decorator_list=[])], type_ignores=[])","def search(str, letter):
    if letter in str:
        return True
    else:
        return False"
20945,"def search(s, letter):
    return letter in s",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",True,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"Module(body=[FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]))], decorator_list=[])], type_ignores=[])","def search(s, letter):
    return letter in s"
24685,"def selection_sort(a):
    i = 0
    n = len(a)
    while i < n:
        p = i
        j = i + 1
        while j < n:
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,6668ebd6-a850-4666-b8cc-5c934a67601a,2015.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    n = len(a)
    while i < n:
        p = i
        j = i + 1
        while j < n:
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a"
6744,"def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a"
24002,"def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a) - 1:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a"
19785,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a"
13352,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a"
8227,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a"
26468,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a"
18906,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a"
25593,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a"
41835,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a"
8356,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a"
15537,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1
    return a"
30961,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_1', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Name(id='x_1', ctx=Load())), ctx=Load()), attr='index', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    return a"
27498,"def selection_sort(a):
    return sorted(a)",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='selection_sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])","def selection_sort(a):
    return sorted(a)"
25531,"def selectionsort(A):
    i = 0
    while i < len(A) - 1:
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    i = 0
    while i < len(A) - 1:
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i += 1"
39907,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[p] >= a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[p] >= a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1"
27374,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1"
21744,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] > A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] > A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1"
19898,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1"
42255,"def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = tmp
        i = +1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = tmp
        i = +1"
21574,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    k = 0
    while k < len(a):
        print(a[k])
        k = k + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_5', ctx=Store())], value=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    k = 0
    while k < len(a):
        print(a[k])
        k = k + 1"
22456,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1"
12806,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1"
34440,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1"
32119,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[p], a[i] = a[i], a[p]
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[p], a[i] = a[i], a[p]
        i = i + 1"
30810,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1"
34813,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1"
7143,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1"
33852,"def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    i = 0
    while i < len(A):
        min_index = i
        j = i + 1
        while j < len(A):
            if A[j] < A[min_index]:
                min_index = j
            j += 1
        A[i], A[min_index] = A[min_index], A[i]
        i += 1"
37742,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], ctx=Load())), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1"
27174,"def selectionsort(alist):
    for fillslot in range(len(alist) - 1, 0, -1):
        positionOfMax = 0
        for location in range(1, fillslot + 1):
            if alist[location] > alist[positionOfMax]:
                positionOfMax = location
        temp = alist[fillslot]
        alist[fillslot] = alist[positionOfMax]
        alist[positionOfMax] = temp",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(alist):
    for fillslot in range(len(alist) - 1, 0, -1):
        positionOfMax = 0
        for location in range(1, fillslot + 1):
            if alist[location] > alist[positionOfMax]:
                positionOfMax = location
        temp = alist[fillslot]
        alist[fillslot] = alist[positionOfMax]
        alist[positionOfMax] = temp"
35556,"def selectionsort(a):
    for done in range(len(a) - 1):
        min_value = a[done]
        min_index = done
        for i in range(done + 1, len(a)):
            if a[i] < min_value:
                min_value = a[i]
                min_index = i
        a[min_index], a[done] = a[done], a[min_index]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    for done in range(len(a) - 1):
        min_value = a[done]
        min_index = done
        for i in range(done + 1, len(a)):
            if a[i] < min_value:
                min_value = a[i]
                min_index = i
        a[min_index], a[done] = a[done], a[min_index]"
38016,"def selectionsort(l):
    for i in range(len(l)):
        j = i + 1
        p = i
        while j < len(l):
            if l[j] < l[p]:
                p = j
            j += 1
        l[p], l[i] = l[i], l[p]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(l):
    for i in range(len(l)):
        j = i + 1
        p = i
        while j < len(l):
            if l[j] < l[p]:
                p = j
            j += 1
        l[p], l[i] = l[i], l[p]"
26220,"def selectionsort(m):
    for i in range(len(m)):
        n = i
        for j in range(i, len(m)):
            if m[j] < m[n]:
                n = j
                m[i], m[n] = m[n], m[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(m):
    for i in range(len(m)):
        n = i
        for j in range(i, len(m)):
            if m[j] < m[n]:
                n = j
                m[i], m[n] = m[n], m[i]"
41743,"def selectionsort(A):
    for i in range(len(A)):
        min_j = i
        for j in range(i, len(A)):
            if A[j] < A[min_j]:
                min_j = j
            A[i], A[min_j] = A[min_j], A[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    for i in range(len(A)):
        min_j = i
        for j in range(i, len(A)):
            if A[j] < A[min_j]:
                min_j = j
            A[i], A[min_j] = A[min_j], A[i]"
24653,"def selectionsort(A):
    for i in range(len(A)):
        min_j = i
        for j in range(i, len(A)):
            if A[j] < A[min_j]:
                min_j = j
        A[i], A[min_j] = A[min_j], A[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(A):
    for i in range(len(A)):
        min_j = i
        for j in range(i, len(A)):
            if A[j] < A[min_j]:
                min_j = j
        A[i], A[min_j] = A[min_j], A[i]"
1306,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]"
24706,"def selectionsort(a):
    for i in range(0, len(a)):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(a):
    for i in range(0, len(a)):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp"
24004,"def selectionsort(l):
    for i in range(1, len(l)):
        for j in range(i, 0, -1):
            if l[j] < l[j - 1]:
                temp = l[j]
                l[j] = l[j - 1]
                l[j - 1] = temp",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,True,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"Module(body=[FunctionDef(name='selectionsort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_1', ctx=Load()), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def selectionsort(l):
    for i in range(1, len(l)):
        for j in range(i, 0, -1):
            if l[j] < l[j - 1]:
                temp = l[j]
                l[j] = l[j - 1]
                l[j - 1] = temp"
15762,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1"
32223,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1"
33789,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1"
20535,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1"
18182,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1"
18833,"def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        i = i + 1"
32567,"def sort(a):
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    while i < len(a):
        i = i + 1"
21284,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1"
41274,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        i = i + 1"
22434,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1"
36674,"def sort(a):
    i = 0",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",True,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2016.0,"Module(body=[FunctionDef(name='sort', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], decorator_list=[])], type_ignores=[])","def sort(a):
    i = 0"
37807,"def square_area(n):
    n = n * n
    return n",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,True,f1bd9735-8e07-4248-830f-ae65dbe0a5c2,2016.0,"Module(body=[FunctionDef(name='square_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_area(n):
    n = n * n
    return n"
6507,"def square_area(n):
    sq = n * n
    return sq",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,True,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"Module(body=[FunctionDef(name='square_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_area(n):
    sq = n * n
    return sq"
40232,"def square_area(side):
    return side * side",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,True,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"Module(body=[FunctionDef(name='square_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def square_area(side):
    return side * side"
22066,"def square_area(n):
    return n ** 2",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,True,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,"Module(body=[FunctionDef(name='square_area', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Pow(), right=Constant(value=2)))], decorator_list=[])], type_ignores=[])","def square_area(n):
    return n ** 2"
41227,"def square_area(n):
    square_area = n * n
    return square_area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,True,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_area(n):
    square_area = n * n
    return square_area"
28466,"def square_perimeter(a):
    a = 4 * a
    return a",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,f1bd9735-8e07-4248-830f-ae65dbe0a5c2,2016.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(a):
    a = 4 * a
    return a"
39849,"def square_perimeter(a):
    a = a * 4
    return a",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=4))), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(a):
    a = a * 4
    return a"
4238,"def square_perimeter(n):
    result1 = n + n + n + n
    return result1",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(n):
    result1 = n + n + n + n
    return result1"
29949,"def square_perimeter(p):
    sq_p = 4 * p
    return sq_p",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,0b0c54f1-c900-465f-a33a-5c22b0497dc4,2015.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(p):
    sq_p = 4 * p
    return sq_p"
16300,"def square_perimeter(side):
    par = side * 4
    return par",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=4))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(side):
    par = side * 4
    return par"
11957,"def square_perimeter(n):
    return n + n + n + n",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_0', ctx=Load())), op=Add(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def square_perimeter(n):
    return n + n + n + n"
4447,"def square_perimeter(side):
    return 4 * side",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,e45f938b-9d5c-4838-86ce-0755e3c97053,2016.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='x_0', ctx=Load())))], decorator_list=[])], type_ignores=[])","def square_perimeter(side):
    return 4 * side"
14863,"def square_perimeter(x):
    return x * 4",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"Module(body=[FunctionDef(name='square_perimeter', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=4)))], decorator_list=[])], type_ignores=[])","def square_perimeter(x):
    return x * 4"
7632,"def square_perimeter(n):
    square_perimeter = 4 * n
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='x_0', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(n):
    square_perimeter = 4 * n
    return square_perimeter"
16960,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,True,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=Constant(value=4))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter"
32715,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d
    if __name__ == '__main__':
        main()",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d
    if __name__ == '__main__':
        main()"
33650,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d"
14484,"def swap_keys_values(d):
    new_d = dict(list(zip(list(d.values()), list(d.keys()))))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_d = dict(list(zip(list(d.values()), list(d.keys()))))
    return new_d"
5947,"def swap_keys_values(d):
    reversed_d = dict((v, k) for k, v in d.items())
    return reversed_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    reversed_d = dict((v, k) for k, v in d.items())
    return reversed_d"
13062,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict"
1757,"def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_dict"
31572,"def swap_keys_values(my_dict):
    new_dict = {}
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(my_dict):
    new_dict = {}
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict"
39024,"def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        new_dict[pair[1]] = pair[0]
    return new_dict"
2258,"def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        new_dict[temp] = keys
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        new_dict[temp] = keys
    return new_dict"
22505,"def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary"
24850,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d"
36921,"def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(in_dict):
    out_dict = {}
    for k, v in list(in_dict.items()):
        out_dict[v] = k
    return out_dict"
6832,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict"
5464,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict"
19894,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict"
26486,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}"
8364,"def swap_keys_values(d):
    my_dict = d
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    my_dict = d
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict"
1594,"def swap_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=DictComp(key=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys())}"
10644,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))"
1983,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())"
1042,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])"
23990,"def swap_keys_values(d):
    return {k: v for v, k in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,f94d128e-c997-4cca-8a7e-2216c3966829,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {k: v for v, k in list(d.items())}"
9285,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}"
41724,"def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='value', ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}"
14714,"def swap_keys_values(d):
    return {d[key]: key for key in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",True,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,"Module(body=[FunctionDef(name='swap_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='x_0', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_keys_values(d):
    return {d[key]: key for key in d}"
7460,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='b', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='a', ctx=Load()), ifs=[Compare(left=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='x_1', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_1', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='b', ctx=Load())])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}"
19992,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='a', ctx=Store())], value=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='b', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='a', ctx=Load()), ifs=[Compare(left=Call(func=Attribute(value=Name(id='a', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[In()], comparators=[Name(id='b', ctx=Load())])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}"
36217,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lst', ctx=Store())], value=ListComp(elt=Name(id='x', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='lst', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict"
32137,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,f94d128e-c997-4cca-8a7e-2216c3966829,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='y', ctx=Load()), Name(id='x', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2"
4938,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}"
6985,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])], keywords=[])), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict"
5967,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir"
11118,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_6', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_7', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='x_8', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_8', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_9', ctx=Store())], value=BinOp(left=Name(id='x_8', ctx=Load()), op=Add(), right=Constant(value=1))), While(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_9', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_8', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_9', ctx=Load()), ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_9', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='x_8', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_10', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_10', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])]), body=[If(test=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='x_5', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_10', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d"
14350,"def swap_unique_keys_values(d):
    store = {}
    va = list(d.values())
    print(va)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_4', ctx=Load()), value=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    store = {}
    va = list(d.values())
    print(va)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}"
26302,"def swap_unique_keys_values(d):
    new_d = {}
    values = list(d.values())
    keys = list(d.keys())
    i = 0
    for i in range(0, len(values)):
        if values.count(values[i]) < 2:
            new_d[values[i]] = keys[i]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_3', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    values = list(d.values())
    keys = list(d.keys())
    i = 0
    for i in range(0, len(values)):
        if values.count(values[i]) < 2:
            new_d[values[i]] = keys[i]
    return new_d"
37624,"def swap_unique_keys_values(d):
    new_d = {}
    doubles = set()
    for k, v in list(d.items()):
        if v in new_d:
            doubles.add(v)
        new_d[v] = k
    for k in doubles:
        del new_d[k]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    doubles = set()
    for k, v in list(d.items()):
        if v in new_d:
            doubles.add(v)
        new_d[v] = k
    for k in doubles:
        del new_d[k]
    return new_d"
13161,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='update', ctx=Load()), args=[List(elts=[Name(id='x_4', ctx=Load())], ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict"
42233,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Constant(value=1))])], orelse=[]), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[Continue()])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2"
27202,"def swap_unique_keys_values(d):
    seen = {}
    result = {}
    for k, v in d.items():
        if v in seen:
            del seen[v]
        else:
            seen[v] = k
            result[v] = k
    return seen",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = {}
    result = {}
    for k, v in d.items():
        if v in seen:
            del seen[v]
        else:
            seen[v] = k
            result[v] = k
    return seen"
13009,"def swap_unique_keys_values(d):
    seen = {}
    result = {}
    for k, v in list(d.items()):
        if v in seen:
            del seen[v]
        else:
            seen[v] = k
            result[v] = k
    return seen",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    seen = {}
    result = {}
    for k, v in list(d.items()):
        if v in seen:
            del seen[v]
        else:
            seen[v] = k
            result[v] = k
    return seen"
26580,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_6', ctx=Load()), value=Name(id='x_5', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}"
21708,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_6', ctx=Load()), value=Name(id='x_5', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}"
40628,"def swap_unique_keys_values(d):
    store = {}
    value = []
    va = list(d.values())
    for i in va:
        value.append(i)
    for k, v in list(d.items()):
        if value.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_6', ctx=Load()), value=Name(id='x_5', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    store = {}
    value = []
    va = list(d.values())
    for i in va:
        value.append(i)
    for k, v in list(d.items()):
        if value.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}"
28525,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_3', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_6', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_6', ctx=Load()), value=Name(id='x_5', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_5', ctx=Store()), Name(id='x_6', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}"
30599,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_6', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_5', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary"
22369,"def swap_unique_keys_values(d):
    new_dict = {}
    values = []
    keys = []
    for z, q in list(d.items()):
        keys.append(q)
        values.append(z)
    for z, q in list(d.items()):
        if not keys.count(q) > 1:
            new_dict[q] = z
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='x_4', ctx=Store()), Name(id='x_5', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    values = []
    keys = []
    for z, q in list(d.items()):
        keys.append(q)
        values.append(z)
    for z, q in list(d.items()):
        if not keys.count(q) > 1:
            new_dict[q] = z
    return new_dict"
42331,"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for value in list(d.values()):
        a.append(value)
    for key in d:
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d"
34990,"def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d"
3504,"def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    t = []
    for k, v in list(d.items()):
        if v not in new_d:
            new_d[v] = k
        else:
            t.append(v)
    for v in t:
        del new_d[v]
    return new_d"
11764,"def swap_unique_keys_values(d):
    new_d = {}
    dups = []
    for key, val in list(d.items()):
        if val not in dups:
            new_d[val] = key
            dups.append(val)
        else:
            del new_d[val]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    dups = []
    for key, val in list(d.items()):
        if val not in dups:
            new_d[val] = key
            dups.append(val)
        else:
            del new_d[val]
    return new_d"
41014,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m"
41218,"def swap_unique_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        if temp in new_dict:
            del new_dict[temp]
        else:
            new_dict[temp] = keys
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_2', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        if temp in new_dict:
            del new_dict[temp]
        else:
            new_dict[temp] = keys
    return new_dict"
29846,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,17658437-97b1-4a8a-ac6f-a63a54536e33,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict"
11580,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict"
26062,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d"
13510,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Del())])], orelse=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2"
40338,"def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        if d_0[key] not in d:
            d[d_0[key]] = key
        else:
            del d[d_0[key]]
    return d"
39090,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=DictComp(key=Name(id='x_3', ctx=Load()), value=Name(id='x_2', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}"
15494,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick"
37376,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=ListComp(elt=Name(id='x_3', ctx=Load()), generators=[comprehension(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick"
18497,"def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
        else:
            del new_dict[value]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
        else:
            del new_dict[value]
    return new_dict"
25362,"def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_2', ctx=Store()), Name(id='x_3', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='x_3', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())])), body=[Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    new_d = {}
    for k, v in list(d.items()):
        if not v in new_d:
            new_d[v] = k
        else:
            del new_d[v]
    return new_d"
22561,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Delete(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Del())]), Break()], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict"
37885,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=DictComp(key=Name(id='x_2', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='x_2', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='x_2', ctx=Load()), ops=[NotIn()], comparators=[Name(id='m', ctx=Load())])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}"
23736,"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(val)
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(val)
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
38789,"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(val[0])
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(val[0])
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
9973,"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_4', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_5', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
32523,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_6', ctx=Store()), Name(id='x_7', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_7', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_8', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Name(id='x_9', ctx=Store())], value=Name(id='x_8', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_9', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Name(id='x_9', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_10', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_10', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_10', ctx=Store())], value=BinOp(left=Name(id='x_10', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d"
24847,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    for i in range(0, len(dict_keys)):
        d[dict_keys[i]] = dict_values[i]
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_6', ctx=Store()), Name(id='x_7', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_7', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_8', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Name(id='x_9', ctx=Store())], value=Name(id='x_8', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_9', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Name(id='x_9', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_10', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    for i in range(0, len(dict_keys)):
        d[dict_keys[i]] = dict_values[i]
    return d"
32937,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    print(dict_keys)
    print(dict_values)
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_5', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='x_6', ctx=Store()), Name(id='x_7', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_7', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_8', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Assign(targets=[Name(id='x_9', ctx=Store())], value=Name(id='x_8', ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_2', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='x_9', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_5', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_9', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Name(id='x_9', ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_5', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_9', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_4', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_10', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_10', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Subscript(value=Name(id='x_3', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_4', ctx=Load()), slice=Name(id='x_10', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_10', ctx=Store())], value=BinOp(left=Name(id='x_10', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    print(dict_keys)
    print(dict_values)
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d"
35380,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(a.values)
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(a.values)
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
9695,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
7472,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
37032,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir"
31118,"def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[vals[i]] = keys[i]
    return dd",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='x_1', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_2', ctx=Store())], value=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='x_3', ctx=Load()), slice=Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[vals[i]] = keys[i]
    return dd"
12227,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Name(id='x_4', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='i', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Constant(value=1), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=ListComp(elt=Name(id='j', ctx=Load()), generators=[comprehension(target=Name(id='j', ctx=Store()), iter=Name(id='x_1', ctx=Load()), ifs=[Compare(left=Name(id='j', ctx=Load()), ops=[NotEq()], comparators=[Name(id='i', ctx=Load())])], is_async=0)]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='x_3', ctx=Store()), Name(id='x_4', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e"
24511,"def swap_unique_keys_values(d):
    z = []
    l = []
    for c in list(d.items()):
        l.append(c[1])
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='z', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='count', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='z', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[In()], comparators=[Name(id='z', ctx=Load())])], is_async=0)])), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    z = []
    l = []
    for c in list(d.items()):
        l.append(c[1])
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1"
1647,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[In()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='x_1', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d"
9261,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=DictComp(key=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], orelse=[])], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}"
31615,"def swap_unique_keys_values(d):
    return dict([(v, k) for k, v in list(d.items()) if list(d.values()).
        count(v) == 1])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    return dict([(v, k) for k, v in list(d.items()) if list(d.values()).
        count(v) == 1])"
21319,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}"
1814,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if [v for v in list(d.values()
        )].count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",True,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"Module(body=[FunctionDef(name='swap_unique_keys_values', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='v', ctx=Load()), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]), attr='count', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])], is_async=0)]))], decorator_list=[])], type_ignores=[])","def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if [v for v in list(d.values()
        )].count(v) == 1}"
20845,"def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",True,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2016.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), For(target=Name(id='x_5', ctx=Store()), iter=Name(id='x_2', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='x_5', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            seen[a[i]] = True
        i = i + 1
    for number in seen:
        c.append(number)
    return c"
34098,"def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c",union,union,Merge two lists into a single one.,"assert union([],[])==[] and union([25785],[25785])==[25785] and union([-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996],[5, -9316, 7379237229304681733])==[-90, 21135, 29310, -8059, 7114, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996, 5, -9316, 7379237229304681733]",True,b588e248-0a0b-40c1-ad90-f9fc1d050dd0,2016.0,"Module(body=[FunctionDef(name='union', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[NotIn()], comparators=[Name(id='x_2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_3', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='x_2', ctx=Load()), slice=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def union(a, b):
    a = a + b
    seen = {}
    c = []
    i = 0
    while i < len(a):
        if a[i] not in seen:
            c.append(a[i])
            seen[a[i]] = True
        i = i + 1
    return c"
