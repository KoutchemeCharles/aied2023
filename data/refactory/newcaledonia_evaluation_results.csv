func_code,assignment_id,func_name,description,test,correct,normalized,representative,user,academic_year,repair,submission_id,repair_correctness
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        maxi = liste[0]
        for i in range(len(liste)):
            if liste[i] > maxi:
                maxi = liste[i]
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        maxi = liste[0]
        for i in range(len(liste)):
            if liste[i] > maxi:
                maxi = liste[i]
    return maxi",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",16,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = None
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
        moy = res * cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = None
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
        moy = res * cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",19,True
"def somme(liste):
    res = 0
    for elem in list:
        res = res + elem
        return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='list', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elem in list:
        res = res + elem
        return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",41,True
"def maximum(liste):
    max = liste[0]
    for i in liste:
        if max < liste(i):
            max = liste(i)
    else:
        if max > liste(i):
            max = max
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[0]
    for i in liste:
        if max < liste(i):
            max = liste(i)
    else:
        if max > liste(i):
            max = max
    return max",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    if True:
        0
    else:
        0
    return highest",82,False
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste[i]:
            if liste[i] < i:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste[i]:
            if liste[i] < i:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",83,True
"def listeDecroissante(scores):
    for i in range(len(scores)):
        if scores[i] < scores[i + 1]:
            return False
        else:
            return True",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], orelse=[])], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    for i in range(len(scores)):
        if scores[i] < scores[i + 1]:
            return False
        else:
            return True",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    if True:
        return ok",98,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if liste > elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if liste > elem:
            res = elem
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",102,False
"def maximum(liste):
    maxi = liste[0]
    for i in range(liste):
        if liste[i] > maxi:
            maxi = elem
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maxi = liste[0]
    for i in range(liste):
        if liste[i] > maxi:
            maxi = elem
    return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",116,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",117,True
"def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if liste[i] > liste[i + 1]:
            res = ok
        else:
            res = Faux
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='Faux', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if liste[i] > liste[i + 1]:
            res = ok
        else:
            res = Faux
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",134,True
"def moyenne(liste):
    if liste == []:
        return None
    else:
        S = 0
        nbNotes = 0
        for i in liste:
            S = S + liste[i]
            nbNotes = nbNotes + 1
    return S / nbNotes",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        return None
    else:
        S = 0
        nbNotes = 0
        for i in liste:
            S = S + liste[i]
            nbNotes = nbNotes + 1
    return S / nbNotes",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",140,True
"def maximum(liste):
    res = liste[0]
    for i in liste:
        res = max
        if res < liste:
            res = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in liste:
        res = max
        if res < liste:
            res = max
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",149,False
"def sommeNbPairs(l):
    res = 0
    for x in l:
        if x % 2:
            res = res + x
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(l):
    res = 0
    for x in l:
        if x % 2:
            res = res + x
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",166,True
"def moyenne(liste):
    somme = 0
    nbtermes = 0
    for elem in liste:
        somme = somme + elem
        nbtermes = nbtermes + 1
    moy = somme / nbtermes
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    somme = 0
    nbtermes = 0
    for elem in liste:
        somme = somme + elem
        nbtermes = nbtermes + 1
    moy = somme / nbtermes
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",184,False
"def listeSymetrique(l):
    i = 0
    j = -1
    res = True
    while i < len(l) / 2 and j > -len(l) / 2 and res == True:
        if l[i] != l[j]:
            res = False
        i = i + 1
        j = j - 1
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    j = -1
    res = True
    while i < len(l) / 2 and j > -len(l) / 2 and res == True:
        if l[i] != l[j]:
            res = False
        i = i + 1
        j = j - 1
    return res",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",192,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res // cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res // cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",205,True
"def maximum(liste):
    res = 0
    if i in range(len(liste)):
        res = res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    if i in range(len(liste)):
        res = res + liste[i]
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",208,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return None",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return None",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",209,True
"def maximum(liste):
    liste: 0
    res = 0
    for i in range(len(liste)):
        if res > len(liste):
            res = len(liste)
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='x_0', ctx=Store()), annotation=Constant(value=0), simple=1), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    liste: 0
    res = 0
    for i in range(len(liste)):
        if res > len(liste):
            res = len(liste)
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",222,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",226,True
"def listeDecroissante(scores):
    if scores == []:
        ok = True
    else:
        scorePrec = scores[0]
        ok = True
        i = 1
        while i < len(scores) and ok:
            if scorePrec <= scores[i]:
                ok = False
            i += 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    if scores == []:
        ok = True
    else:
        scorePrec = scores[0]
        ok = True
        i = 1
        while i < len(scores) and ok:
            if scorePrec <= scores[i]:
                ok = False
            i += 1
    return ok",,,"def listeDecroissante(scores):
    A = True
    if A:
        if A:
            0
        ok = A
        i = 0
        while i < len(scores) - 1 and ok:
            if scores[i] < scores[i + 1]:
                ok = False
            i += 1
        return ok",229,True
"def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in scores:
        if scores[i] > scores[i + 1]:
            res = True
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in scores:
        if scores[i] > scores[i + 1]:
            res = True
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",234,True
"def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(l) and ok:
        if l[i] != l[-i - 1]:
            ok = False
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(l) and ok:
        if l[i] != l[-i - 1]:
            ok = False
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",236,True
"def maximum(liste):
    res = liste[0]
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",256,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if res < liste[0]:
                res = liste[0]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if res < liste[0]:
                res = liste[0]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",268,True
"def listeDecroissante(scores):
    i = 0
    while i < len(scores) - 1:
        if scores[i] > scores[i + 1]:
            return True
        else:
            return False
    i = i + 1",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[Return(value=Constant(value=False))])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    i = 0
    while i < len(scores) - 1:
        if scores[i] > scores[i + 1]:
            return True
        else:
            return False
    i = i + 1",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",272,True
"def sommeNPremiersEntiersPairs(n):
    if n <= 0:
        res = 0
    else:
        res = n * (n + 2) / 2
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=2))), op=Div(), right=Constant(value=2)))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    if n <= 0:
        res = 0
    else:
        res = n * (n + 2) / 2
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    if True:
        0
    else:
        0
    return res",273,True
"def maximum(liste):
    if liste == ():
        res = none
    else:
        res = liste[1]
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == ():
        res = none
    else:
        res = liste[1]
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",279,True
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(liste) / 2 and ok:
        if l[i] != l[-1 - i]:
            ok = False
        i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(liste) / 2 and ok:
        if l[i] != l[-1 - i]:
            ok = False
        i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",290,True
"def moyenne(liste):
    if liste == []:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",295,True
"def sommeNbPairs(liste):
    res = 0
    for i in liste:
        if liste[i] % 2 == 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in liste:
        if liste[i] % 2 == 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",314,True
"def maximum(liste):
    max = 0
    for i in max:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_1', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    for i in max:
        if i > max:
            max = i
    return max",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",324,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = liste[0]
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = liste[0]
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",331,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
        cpt = cpt + 1
    return res / cpt",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
        cpt = cpt + 1
    return res / cpt",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",339,True
"def maximum(liste):
    res = max
    for i in range(len(liste)):
        if liste[i]:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = max
    for i in range(len(liste)):
        if liste[i]:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",341,False
"def moyenne(liste):
    if liste == ():
        res = none
    else:
        x = 0
        cpt = 0
        for i in range(len(liste)):
            cpt = cpt + 1
            x = x + liste[i]
        res = x / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == ():
        res = none
    else:
        x = 0
        cpt = 0
        for i in range(len(liste)):
            cpt = cpt + 1
            x = x + liste[i]
        res = x / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",345,True
"def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",353,True
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1:
        if scores[i] > score[i + 1]:
            ok = False
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1:
        if scores[i] > score[i + 1]:
            ok = False
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",359,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i] > res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i] > res
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",369,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if len(liste + 1) > len(liste):
                res = len(liste + 1)
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if len(liste + 1) > len(liste):
                res = len(liste + 1)
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",375,True
"def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for i in range(liste):
            if liste[i] % 2 == 0:
                res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for i in range(liste):
            if liste[i] % 2 == 0:
                res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",387,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if res > liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if res > liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",388,True
"def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",,,"def maximum(l):
    if False:
        0
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",402,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if len(liste) + 1 > len(liste):
                res = len(liste + 1)
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if len(liste) + 1 > len(liste):
                res = len(liste + 1)
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",413,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        return None",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Return(value=Constant(value=None))])], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        return None",,,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        return min(a[0], minimum(a[1:]))",433,False
"def maximum(liste):
    res = 12
    for i in liste:
        if res < liste:
            res = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=12)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 12
    for i in liste:
        if res < liste:
            res = max
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",436,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res = res + x
    return None",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res = res + x
    return None",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",452,True
"def maximum(liste):
    max = len(1, liste)
    for i in range(len(liste)):
        if i > max:
            max = i
    return None",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), Name(id='x_0', ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = len(1, liste)
    for i in range(len(liste)):
        if i > max:
            max = i
    return None",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",460,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > 0:
            res = res + liste[i]
        else:
            res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > 0:
            res = res + liste[i]
        else:
            res = None
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
        else:
            0
    return max",475,False
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",487,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
    for i in range(len(liste)):
        if liste[i] >= res:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
    for i in range(len(liste)):
        if liste[i] >= res:
            res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        0
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",509,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",545,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in liste:
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in liste:
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",556,True
"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = l[0]
        for elem in liste:
            if elem > max:
                max = elem
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = l[0]
        for elem in liste:
            if elem > max:
                max = elem
    return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",564,True
"def maximum(liste):
    maxi = liste[0]
    for i in range(len(liste)):
        if liste[i] > maxi:
            maxi = elem
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maxi = liste[0]
    for i in range(len(liste)):
        if liste[i] > maxi:
            maxi = elem
    return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",572,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        for elem in liste:
            res = res + elem
        moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        for elem in liste:
            res = res + elem
        moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",574,True
"def listeSymetrique(l):
    trouve = True
    i = 0
    j = -1
    while i < len(l) and j <= -len(l) and trouve == True:
        if l[i] != l[j]:
            trouve = False
        i = i + 1
        j = j - 1
    return trouve",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    trouve = True
    i = 0
    j = -1
    while i < len(l) and j <= -len(l) and trouve == True:
        if l[i] != l[j]:
            trouve = False
        i = i + 1
        j = j - 1
    return trouve",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",586,True
"def listeDecroissante(scores):
    i = 0
    ok = True
    while i < len(scores):
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    i = 0
    ok = True
    while i < len(scores):
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",590,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
        return res
    else:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
        return res
    else:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",593,True
"def moyenne(liste):
    if len(liste) != 0:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    else:
        res = None
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) != 0:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    else:
        res = None
    return res",,,"def moyenne(liste):
    if len(liste) == 0 and False:
        0
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",597,False
"def maximum(liste):
    res = 0
    for i in liste:
        res = res + i
        if res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in liste:
        res = res + i
        if res < i:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",598,False
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        for elem in liste:
            if elem < liste[0]:
                res = liste[0]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        for elem in liste:
            if elem < liste[0]:
                res = liste[0]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",630,True
"def maximum(liste):
    res = liste[0]
    if len(liste) == 0:
        res = None
    else:
        for i in liste:
            if res < liste[0]:
                res = liste[0]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    if len(liste) == 0:
        res = None
    else:
        for i in liste:
            if res < liste[0]:
                res = liste[0]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",634,True
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i // 2] == mot[-i // 2]:
                res = A
                i += 1
            else:
                res = False
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=FloorDiv(), right=Constant(value=2)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i // 2] == mot[-i // 2]:
                res = A
                i += 1
            else:
                res = False
    return res",,,"def motPalindrome(mot):
    A = False
    if A:
        0
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        i += 1
    if True:
        return ok",641,True
"def maximum(liste):
    max = ''
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = ''
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",643,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = elem / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = elem / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",651,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            if res < elem:
                res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            if res < elem:
                res = elem
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",680,True
"def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res = liste
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res = liste
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",688,False
"def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        res = True
        i = 0
        while i < len(mot) // 2 and res:
            if mot[i] != mot[-(i + 1)]:
                res = False
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        res = True
        i = 0
        while i < len(mot) // 2 and res:
            if mot[i] != mot[-(i + 1)]:
                res = False
    return res",,,"def motPalindrome(mot):
    A = True
    if A:
        ok = A
        i = 0
        while i < len(mot) // 2 and ok:
            if A:
                if mot[i] != mot[-1 - i]:
                    ok = False
                i += 1
        return ok",694,True
"def maximum(liste):
    if len(liste) == 0:
        max = None
    else:
        max = liste[0]
        for i in range(liste):
            if liste[i] > max:
                max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        max = None
    else:
        max = liste[0]
        for i in range(liste):
            if liste[i] > max:
                max = liste[i]
    return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",695,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",706,True
"def maximum(l):
    res = l[0]
    for i in range(1, len(l)):
        if i == None:
            res = None
        elif res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    res = l[0]
    for i in range(1, len(l)):
        if i == None:
            res = None
        elif res < i:
            res = i
    return res",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",708,False
"def maximum(liste):
    max = l[0]
    for i in range(0, len(liste)):
        if max < i:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = l[0]
    for i in range(0, len(liste)):
        if max < i:
            max = i
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",720,False
"def maximum(liste):
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    if True:
        return max",723,False
"def maximum(liste):
    res = liste[0]
    for i in range(i):
        if res < i:
            return i
    else:
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(i):
        if res < i:
            return i
    else:
        return res",,,"def maximum(a):
    m = a[0]
    if True:
        for n in a:
            if m < n:
                m = n
        return m",727,False
"def listeSymetrique(l):
    A = True
    trouve = A
    i = 0
    j = -1
    while i < len(l) and j <= -len(l) and trouve == A:
        if l(i) != l(j):
            trouve = False
        else:
            trouve = A
        i = i + 1
        j = j - 1
    return trouve",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_4', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    A = True
    trouve = A
    i = 0
    j = -1
    while i < len(l) and j <= -len(l) and trouve == A:
        if l(i) != l(j):
            trouve = False
        else:
            trouve = A
        i = i + 1
        j = j - 1
    return trouve",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        else:
            0
        i += 1
    return res",735,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if len(liste) % 2 != 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if len(liste) % 2 != 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",744,True
"def maximum(liste):
    res = liste[0]
    for i in list(range(i)):
        if res < list(i):
            res = list(i)
    else:
        if lis(i) < res:
            res = res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='lis', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in list(range(i)):
        if res < list(i):
            res = list(i)
    else:
        if lis(i) < res:
            res = res
    return res",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    if True:
        0
    else:
        0
    return highest",748,False
"def maximum(liste):
    if liste == 0:
        res = None
    else:
        res = 0
        for i in range(len, liste):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == 0:
        res = None
    else:
        res = 0
        for i in range(len, liste):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",760,True
"def moyenne(liste):
    y = 0
    x = 0
    for elem in liste:
        y = y + 1
        x = x + elem
        res = x / y
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    y = 0
    x = 0
    for elem in liste:
        y = y + 1
        x = x + elem
        res = x / y
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",774,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(1, n + 1, 2):
        res = res + i
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(1, n + 1, 2):
        res = res + i
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",778,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 2
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 2
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",786,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        moy = ''
        for elem in liste:
            res = res + elem
            nb += 1
    moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        moy = ''
        for elem in liste:
            res = res + elem
            nb += 1
    moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",791,True
"def sommeNPremiersEntiersPairs(n):
    somme = 0
    if elem % 2 == 0:
        for elem in range(1, n + 1):
            somme = somme + i
    return somme",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='i', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    somme = 0
    if elem % 2 == 0:
        for elem in range(1, n + 1):
            somme = somme + i
    return somme",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    if False:
        0
    else:
        0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",808,True
"def maximum(x, y, z):
    if x >= y and x >= z:
        maxi = x
    if y >= x and y >= z:
        maxi = y
    if z >= x and z >= y:
        maxi = z
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0'), arg(arg='x_1'), arg(arg='x_2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_0', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_0', ctx=Load())]), Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())])]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(x, y, z):
    if x >= y and x >= z:
        maxi = x
    if y >= x and y >= z:
        maxi = y
    if z >= x and z >= y:
        maxi = z
    return maxi",,,"def maximum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    if tail_max == []:
        return l[0]
    return l[0] if l[0] > tail_max else tail_max",813,False
"def maximum(liste):
    max = liste[1]
    for i in len(liste):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[1]
    for i in len(liste):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",823,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = range[0]
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = range[0]
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",834,True
"def listeSymetrique(l):
    i = 0
    while i < len(l):
        if l[i] != l[-(1 + i)]:
            return False
        i += 1
        return True",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_1', ctx=Load()))), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Constant(value=True))], orelse=[])], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    while i < len(l):
        if l[i] != l[-(1 + i)]:
            return False
        i += 1
        return True",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",848,True
"def maximum(liste):
    res = -50
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
        if liste[0]:
            res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=50))), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = -50
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
        if liste[0]:
            res = None
    return res",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        if c > highest:
            highest = c
    return highest",867,False
"def maximum(liste):
    res = liste[0]
    for i in liste:
        if res < liste:
            res = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in liste:
        if res < liste:
            res = max
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",868,False
"def maximum(liste):
    if len(list) == 0:
        res = None
    res = []
    for i in range(len(liste)):
        if liste[i + 1] > liste[i]:
            res = liste[i + 1]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(list) == 0:
        res = None
    res = []
    for i in range(len(liste)):
        if liste[i + 1] > liste[i]:
            res = liste[i + 1]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",888,True
"def minimum(liste):
    if liste == ():
        res = None
    else:
        res = liste[0]
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == ():
        res = None
    else:
        res = liste[0]
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",898,True
"def minimum(liste):
    res = l([0])
    for elem in liste:
        if l[0] < elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = l([0])
    for elem in liste:
        if l[0] < elem:
            res = elem
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",904,False
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(lscore) - 1 and ok:
        if lscore[i] <= lscore[i + 1]:
            ok = False
        i = i + 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lscore', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='lscore', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='lscore', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(lscore) - 1 and ok:
        if lscore[i] <= lscore[i + 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",906,True
"def somme(liste):
    res = 0
    for i in liste:
        res += liste[i]
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in liste:
        res += liste[i]
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",909,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(len(1, liste)):
            if liste[i] > res:
                res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(len(1, liste)):
            if liste[i] > res:
                res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",928,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            res = liste[i] > res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            res = liste[i] > res
    return res",,,"def maximum(l):
    if len(l) == 1:
        if False:
            0
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",933,False
"def minimum(liste):
    res = len([0])
    for elem in liste:
        if res > elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = len([0])
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",935,False
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if i % 2 == 0:
            res = res + i
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if i % 2 == 0:
            res = res + i
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",950,True
"def maximum(liste):
    res = 0
    for elen in liste:
        if elen > 0:
            res = elen
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elen in liste:
        if elen > 0:
            res = elen
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",951,False
"def maximum(liste):
    res = -12
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=12))), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = -12
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",958,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[i] + 1 > liste[i]:
                res = liste[i] + 1
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[i] + 1 > liste[i]:
                res = liste[i] + 1
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",965,True
"def maximum(liste):
    res = liste
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",976,False
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1:
        if scores[i] > scores[i + 1]:
            ok = False
        i = i + 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1:
        if scores[i] > scores[i + 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",979,True
"def motPalindrome(mot):
    B = False
    A = True
    c = A
    while i < len(mot) / 2 and c:
        if mot[i] == mot[len(mot) - i]:
            c = A
        else:
            c = B
    if c == A:
        return A
    else:
        return B",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='i', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    B = False
    A = True
    c = A
    while i < len(mot) / 2 and c:
        if mot[i] == mot[len(mot) - i]:
            c = A
        else:
            c = B
    if c == A:
        return A
    else:
        return B",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        if True:
            i += 1
    return ok",989,True
"def minimum(liste):
    min = liste[0]
    for i in liste:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = liste[0]
    for i in liste:
        if i < min:
            min = i
    return min",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",992,False
"def maximum(liste):
    res = liste[0]
    for c in liste:
        if i >= res:
            res = c
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for c in liste:
        if i >= res:
            res = c
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1012,False
"def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste[i] % 2 == 0:
                res = res + liste[i]
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste[i] % 2 == 0:
                res = res + liste[i]
        return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",1015,True
"def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",,,"def maximum(l):
    if False:
        0
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",1040,False
"def moyenne(liste):
    if liste == []:
        res = None
    else:
        x = 0
        cpt = 0
        for i in range(len(liste)):
            x = x + i
            cpt = cpt + 1
            res = x / cpt
        return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        res = None
    else:
        x = 0
        cpt = 0
        for i in range(len(liste)):
            x = x + i
            cpt = cpt + 1
            res = x / cpt
        return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",1044,True
"def maximum(liste):
    n = len(liste)
    maxi = liste[0]
    for i in range(1, n):
        if liste[i] >= maxi:
            maxi = liste[i]
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x_1', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    n = len(liste)
    maxi = liste[0]
    for i in range(1, n):
        if liste[i] >= maxi:
            maxi = liste[i]
    return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1054,False
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",1060,True
"def maximum(liste):
    max = -999
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=999))), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = -999
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",1085,False
"def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > liste[i + 1]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > liste[i + 1]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",1096,True
"def somme(liste):
    res = 0
    for i in range(liste):
        res = res + i
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(liste):
        res = res + i
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",1101,True
"def minimum(liste):
    res = 1000
    for i in range(len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1000)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 1000
    for i in range(len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",1103,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(n, 2):
        if liste[i]:
            res = res + liste[i]
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[If(test=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(n, 2):
        if liste[i]:
            res = res + liste[i]
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",1120,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for elem in liste:
            if elem < liste[0]:
                res = liste[0]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for elem in liste:
            if elem < liste[0]:
                res = liste[0]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",1129,True
"def motPalindrome(mot):
    res = 0
    ok = True
    while i < len(mot) and ok:
        if mot[i] != mot[-i - 1]:
            ok = False
        i = i + 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = 0
    ok = True
    while i < len(mot) and ok:
        if mot[i] != mot[-i - 1]:
            ok = False
        i = i + 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",1136,True
"def minimum(liste):
    if len(liste) == 0:
        return None
    min = 0
    for i in range(1, len(liste)):
        if liste[i] < min:
            min = liste[i]
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        return None
    min = 0
    for i in range(1, len(liste)):
        if liste[i] < min:
            min = liste[i]
    return min",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",1159,True
"def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores)):
        if scores[i] > scores[1 + i]:
            res = True
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores)):
        if scores[i] > scores[1 + i]:
            res = True
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",1169,True
"def maximum(liste):
    maxi = 0
    for i in range(1, len(liste)):
        if list[i] > res:
            res = list[i]
        return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maxi = 0
    for i in range(1, len(liste)):
        if list[i] > res:
            res = list[i]
        return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1178,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res = res + elem
        res = res / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res = res + elem
        res = res / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",1188,False
"def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        res = True
        i = 0
        while i < len(mot) and res:
            res = mot[i] == mot[-1]
            i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        res = True
        i = 0
        while i < len(mot) and res:
            res = mot[i] == mot[-1]
            i += 1
    return res",,,"def motPalindrome(mot):
    A = False
    if True:
        0
    elif A:
        0
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        i += 1
    return ok",1198,True
"def listeSymetrique(l):
    trouve = True
    i = 0
    j = -1
    while i < len(l) and j <= -len(l) and trouve == True:
        if l(i) != l(j):
            trouve = False
        i = i + 1
        j = j - 1
    return trouve",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    trouve = True
    i = 0
    j = -1
    while i < len(l) and j <= -len(l) and trouve == True:
        if l(i) != l(j):
            trouve = False
        i = i + 1
        j = j - 1
    return trouve",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",1201,True
"def moyenne(liste):
    if len(liste) == 0:
        moy = None
    else:
        res = 0
        nb = 0
        for nb in liste:
            res = res + nb
            nb += 1
        moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        moy = None
    else:
        res = 0
        nb = 0
        for nb in liste:
            res = res + nb
            nb += 1
        moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",1217,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    res = liste[0]
    for elem in liste:
        if elem > res:
            res > elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    res = liste[0]
    for elem in liste:
        if elem > res:
            res > elem
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1223,True
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1:
        if scores[i] > score[i + 1]:
            ok = False
        i = i + 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1:
        if scores[i] > score[i + 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",1226,True
"def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(liste) and ok == True:
        if liste[i] != liste[-i - 1]:
            ok = False
        i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(liste) and ok == True:
        if liste[i] != liste[-i - 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",1257,True
"def minimum(liste):
    res = 0
    for elem in liste:
        if res > elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 0
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",1260,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1265,True
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
    return res",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",1267,True
"def maximum(liste):
    res = -12
    for elem in liste:
        if res < elem:
            res = elem
        if elem in liste == 0:
            res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=12))), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[In(), Eq()], comparators=[Name(id='x_0', ctx=Load()), Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = -12
    for elem in liste:
        if res < elem:
            res = elem
        if elem in liste == 0:
            res = None
    return res",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        if c > highest:
            highest = c
    return highest",1296,False
"def maximum(liste):
    res = 0
    for elem in liste:
        if res > elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1297,False
"def maximum(l):
    max = l[0]
    for x in l:
        if x > max:
            max = x
        return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(l):
    max = l[0]
    for x in l:
        if x > max:
            max = x
        return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",1303,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
        else:
            res = res - 1
    return None",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)))])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
        else:
            res = res - 1
    return None",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
        else:
            0
    return res",1304,True
"def listeDecroissante(scores):
    A = False
    res = A
    if scores == []:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] > scores[1 + i]:
            res = A
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    A = False
    res = A
    if scores == []:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] > scores[1 + i]:
            res = A
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",1313,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    for elem in liste:
        if elem < 0:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    for elem in liste:
        if elem < 0:
            res = elem
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1315,True
"def maximum(l):
    if len(l) == 0:
        res = l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    else:
        res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 0:
        res = l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    else:
        res = None
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    if True:
        return maximum(l)",1336,False
"def maximum(liste):
    for x in liste:
        if x > res:
            res = x
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    for x in liste:
        if x > res:
            res = x
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1344,False
"def somme(liste):
    res = 0
    for elen in liste:
        res = res + elem
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elen in liste:
        res = res + elem
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",1349,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if elem > res:
            res = res + elem
        else:
            res = 'None'
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None'))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if elem > res:
            res = res + elem
        else:
            res = 'None'
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
        else:
            0
    return max",1410,False
"def maximum(liste):
    max = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",1432,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[i + 1] > liste[i]:
                res = liste[i + 1]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[i + 1] > liste[i]:
                res = liste[i + 1]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1443,True
"def somme(liste):
    res = 0
    for i in range(len(l)):
        res = res + liste(i)
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(l)):
        res = res + liste(i)
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",1455,True
"def listeDecroissante(scores):
    res = True
    i = 0
    while i < len(scores) - 1 and res:
        if scores[i] <= scores[i + 1]:
            res = False
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = True
    i = 0
    while i < len(scores) - 1 and res:
        if scores[i] <= scores[i + 1]:
            res = False
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",1463,True
"def listeDecroissante(scores):
    res = True
    x = scores[0]
    for elem in scores:
        if x < elem:
            res = False
        x = elem
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = True
    x = scores[0]
    for elem in scores:
        if x < elem:
            res = False
        x = elem
    return res",,,"def listeDecroissante(scores):
    A = True
    ok = A
    i = 0
    while i < len(scores) - 1 and ok:
        if A:
            if scores[i] < scores[i + 1]:
                ok = False
            elif A:
                0
            i += 1
    return ok",1470,True
"def maximum(liste):
    res = liste[1]
    for i in range(0, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[1]
    for i in range(0, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    if True:
        return max",1475,False
"def listeSymetrique(l):
    i = 0
    while i < len(l):
        if l[i] != l[-(1 + i)]:
            return False
    return True",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_1', ctx=Load()))), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    while i < len(l):
        if l[i] != l[-(1 + i)]:
            return False
    return True",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",1478,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(1, n, 2):
        res = res + i
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(1, n, 2):
        res = res + i
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",1493,True
"def maximum(liste):
    res = liste, [0]
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Tuple(elts=[Name(id='x_0', ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste, [0]
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",1507,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='max', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1511,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        x = 0
        for i in range(len(liste)):
            res = res + i
            x = x + 1
    moy = x % res
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        x = 0
        for i in range(len(liste)):
            res = res + i
            x = x + 1
    moy = x % res
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",1513,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1515,True
"def sommeNbPairs(liste):
    for i in range(len(liste)):
        if [i] % 2 == 0:
            res = res + [i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=List(elts=[Name(id='x_1', ctx=Load())], ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=List(elts=[Name(id='x_1', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    for i in range(len(liste)):
        if [i] % 2 == 0:
            res = res + [i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",1532,True
"def maximum(liste):
    res = 'None'
    for elem in liste:
        if elem > res:
            res = res + elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 'None'
    for elem in liste:
        if elem > res:
            res = res + elem
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1565,False
"def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1577,False
"def sommeNbPairs(liste):
    res = 0
    for x in range(len(liste)):
        res = x % 2
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for x in range(len(liste)):
        res = x % 2
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",1578,True
"def maximum(liste):
    if liste == []:
        return None
    else:
        res = liste[0]
        for i in range(0, len(liste)):
            if res < liste[i]:
                res = liste[i]
                return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == []:
        return None
    else:
        res = liste[0]
        for i in range(0, len(liste)):
            if res < liste[i]:
                res = liste[i]
                return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1588,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] < res:
                res = liste[i]
    return None",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] < res:
                res = liste[i]
    return None",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",1599,True
"def sommeNbPairs(liste):
    res = 0
    for elem in liste:
        if elem % 2 == 0:
            res = res + [i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=List(elts=[Name(id='i', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for elem in liste:
        if elem % 2 == 0:
            res = res + [i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",1609,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return liste",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_0', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return liste",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",1615,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1620,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = res < liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = res < liste[i]
    return res",,,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",1625,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = liste[i]
        if res < i:
            res = i
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = liste[i]
        if res < i:
            res = i
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1640,False
"def maximum(liste):
    res = liste[0]
    for i in liste:
        if res < liste[i]:
            res = liste[i]
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in liste:
        if res < liste[i]:
            res = liste[i]
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1649,False
"def maximum(liste):
    if len(liste) == 0:
        return None
    max = [0]
    for i in range(1, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return None
    max = [0]
    for i in range(1, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",1678,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    res = []
    for i in range(len(liste)):
        if liste[i + 1] > liste[i]:
            res = liste[i + 1]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    res = []
    for i in range(len(liste)):
        if liste[i + 1] > liste[i]:
            res = liste[i + 1]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",1702,True
"def maximum(liste):
    res = liste[0]
    for elem in liste:
        if elem > res:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for elem in liste:
        if elem > res:
            res = elem
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1706,False
"def listeDecroissante(scores):
    scorePrec = scores[0]
    ok = True
    i = 1
    while i < len(scores) and ok:
        if scorePrec <= scores[i]:
            ok = False
        i += 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    scorePrec = scores[0]
    ok = True
    i = 1
    while i < len(scores) and ok:
        if scorePrec <= scores[i]:
            ok = False
        i += 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",1712,True
"def minimum(liste):
    for i in liste:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    for i in liste:
        if i < min:
            min = i
    return min",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",1716,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    if i in range(1, n + 1):
        if i % 2 == 0:
            res = res + i
        return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='i', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    if i in range(1, n + 1):
        if i % 2 == 0:
            res = res + i
        return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    if True:
        return res
    else:
        0",1718,True
"def listeSymetrique(l):
    A = False
    trouve = A
    i = 0
    j = -1
    while i < len(l) and j <= -len(l):
        if l(i) == l(j):
            trouve = True
        else:
            trouve = A
        i = i + 1
        j = j - 1
    return trouve",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_4', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_4', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_4', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    A = False
    trouve = A
    i = 0
    j = -1
    while i < len(l) and j <= -len(l):
        if l(i) == l(j):
            trouve = True
        else:
            trouve = A
        i = i + 1
        j = j - 1
    return trouve",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        else:
            0
        i += 1
    return res",1728,True
"def moyenne(liste):
    if liste == ():
        res = none
    else:
        for i in range(len(liste)):
            x = res + liste[i]
            res = x / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == ():
        res = none
    else:
        for i in range(len(liste)):
            x = res + liste[i]
            res = x / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",1737,True
"def minimum(liste):
    if len(liste) == 0:
        res = 0
    else:
        rest = liste[0]
        for i in range(len(liste)):
            if liste[0] < res:
                res = liste[0]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = 0
    else:
        rest = liste[0]
        for i in range(len(liste)):
            if liste[0] < res:
                res = liste[0]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",1738,True
"def listeDecroissante(scores):
    if scores == []:
        return True
    else:
        for i in range(len(scores)):
            if scores[i] < scores[i + 1]:
                return False
            else:
                return True",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=True))])], orelse=[])])], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    if scores == []:
        return True
    else:
        for i in range(len(scores)):
            if scores[i] < scores[i + 1]:
                return False
            else:
                return True",,,"def listeDecroissante(scores):
    A = False
    if True:
        ok = True
        i = 0
        while i < len(scores) - 1 and ok:
            if scores[i] < scores[i + 1]:
                ok = A
            if A:
                0
            i += 1
        return ok",1743,True
"def maximum(liste):
    res = -100
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=100))), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = -100
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",1755,False
"def maximum(liste):
    res = 0
    for i in range(1, len(liste)):
        if list[i] > res:
            res = list[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(1, len(liste)):
        if list[i] > res:
            res = list[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1759,False
"def maximum(liste):
    maxi = liste[0]
    for i in liste:
        if i >= maxi:
            maxi = i
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maxi = liste[0]
    for i in liste:
        if i >= maxi:
            maxi = i
    return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1767,False
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if x % 2 != 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if x % 2 != 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",1808,True
"def motPalindrome(mot):
    A = True
    i = 0
    trouve = False
    res = A
    while i < len(mot) / 2 and not trouve:
        if mot[i] == mot[-i - 1]:
            i += 1
            trouve = A
    if trouve:
        res = A
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), UnaryOp(op=Not(), operand=Name(id='x_3', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='x_3', ctx=Load()), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    i = 0
    trouve = False
    res = A
    while i < len(mot) / 2 and not trouve:
        if mot[i] == mot[-i - 1]:
            i += 1
            trouve = A
    if trouve:
        res = A
    return res",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    if True:
        return ok",1817,True
"def somme(liste):
    res = 0
    for i in liste(l):
        res = res + i
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in liste(l):
        res = res + i
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",1822,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in len(liste):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in len(liste):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1828,True
"def moyenne(liste):
    if liste == ():
        res = none
    else:
        res = 0
        for i in range(len(liste)):
            x = res + liste[i]
            res = x / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == ():
        res = none
    else:
        res = 0
        for i in range(len(liste)):
            x = res + liste[i]
            res = x / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",1847,True
"def maximum(liste):
    res = liste[0]
    if res < liste[i]:
        res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    if res < liste[i]:
        res = liste[i]
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    return l[0] if l[0] > tail_max else tail_max",1848,False
"def maximum(liste):
    res = liste([0])
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste([0])
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",1851,False
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i == j:
            ok = true
        else:
            ok = true
        i = i + 1
        j = j - 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i == j:
            ok = true
        else:
            ok = true
        i = i + 1
        j = j - 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        else:
            0
        i += 1
    return ok",1865,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = range[i]
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = range[i]
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1879,True
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res:
            if mot[i] == mot[-i]:
                res = A
            i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res:
            if mot[i] == mot[-i]:
                res = A
            i += 1
    return res",,,"def motPalindrome(mot):
    A = True
    if A:
        ok = A
        i = 0
        while i < len(mot) // 2 and ok:
            if A:
                if mot[i] != mot[-1 - i]:
                    ok = False
                i += 1
        return ok",1882,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = range[1]
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res = range[1]
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1889,True
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i // 2] == mot[-i // 2]:
                res = A
                i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=FloorDiv(), right=Constant(value=2)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i // 2] == mot[-i // 2]:
                res = A
                i += 1
    return res",,,"def motPalindrome(mot):
    A = True
    if A:
        ok = A
        i = 0
        while i < len(mot) // 2 and ok:
            if A:
                if mot[i] != mot[-1 - i]:
                    ok = False
                i += 1
        return ok",1899,True
"def maximum(liste):
    if len(liste):
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste):
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return res",,,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",1902,False
"def sommeNbPairs(liste):
    for liste in (range == 0):
        res = 0
    return None",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_0', ctx=Store()), iter=Compare(left=Name(id='range', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    for liste in (range == 0):
        res = 0
    return None",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",1925,True
"def maximum(liste):
    res = liste[0]
    for i in range(liste):
        if res < i:
            return i
    else:
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(liste):
        if res < i:
            return i
    else:
        return res",,,"def maximum(a):
    m = a[0]
    if True:
        for n in a:
            if m < n:
                m = n
        return m",1961,False
"def somme(liste):
    res = 0
    for x in range[liste]:
        res += x
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='range', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for x in range[liste]:
        res += x
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",1962,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
    return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",1968,True
"def maximum(liste):
    res = ''
    for i in range(len(liste)):
        if res < liste[i]:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = ''
    for i in range(len(liste)):
        if res < liste[i]:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",1979,False
"def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(liste) and ok:
        if liste[i] != liste[-(i + 1)]:
            ok = False
        i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=UnaryOp(op=USub(), operand=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(liste) and ok:
        if liste[i] != liste[-(i + 1)]:
            ok = False
        i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2001,True
"def somme(liste):
    res = 0
    for i in liste(l):
        res = res + I
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='I', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in liste(l):
        res = res + I
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2010,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2019,True
"def sommeNPremiersEntiersPairs(n):
    if n < 0:
        res = 0
    else:
        res = 0
        for x in range(n):
            if x % 2 == 0:
                res = res + x
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    if n < 0:
        res = 0
    else:
        res = 0
        for x in range(n):
            if x % 2 == 0:
                res = res + x
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    if len(range(1, n + 1)) == 0:
        0
    else:
        for x in range(1, n + 1):
            if x % 2 == 0:
                res += x
    return res",2021,True
"def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] > scores[i + 1]:
            res = True
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] > scores[i + 1]:
            res = True
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",2026,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste(i)
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste(i)
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2036,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste(i)
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste(i)
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2043,True
"def minimum(liste):
    if len(liste) == 0:
        return None
    min = 0
    for i in range(1, len(liste)):
        if liste[i] < min:
            min = liste[i]
        return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        return None
    min = 0
    for i in range(1, len(liste)):
        if liste[i] < min:
            min = liste[i]
        return min",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",2050,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(liste):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(liste):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2064,True
"def motPalindrome(mot):
    res = True
    i = 0
    while i < len(mot) / 2 and res == True:
        if mot[i] != mot[len(l) - i - 1]:
            res = False
        i = i + 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = True
    i = 0
    while i < len(mot) / 2 and res == True:
        if mot[i] != mot[len(l) - i - 1]:
            res = False
        i = i + 1
    return res",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",2070,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = elem / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = elem / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2077,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2080,True
"def moyenne(liste):
    if liste == []:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",2081,False
"def somme(liste):
    res = 0
    for i in liste:
        res = res + i(liste)
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in liste:
        res = res + i(liste)
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2084,True
"def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] % 2 == 0:
                res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] % 2 == 0:
                res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",2094,True
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
        return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='res', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
        return res",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2104,True
"def maximum(liste):
    res = liste[0]
    for i in range(liste):
        if liste[i] > res:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(liste):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2113,False
"def maximum(liste):
    res = l(0)
    for x in liste:
        if x > res:
            res = x
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[Constant(value=0)], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = l(0)
    for x in liste:
        if x > res:
            res = x
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2116,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",2119,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[1]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[1]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2121,True
"def minimum(liste):
    min = 0
    for i in liste:
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = 0
    for i in liste:
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",2130,False
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] > scores[i + 1]:
            ok = False
        i = i + 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] > scores[i + 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",2141,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2144,False
"def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2152,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        return res + liste[i]",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        return res + liste[i]",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2159,True
"def maximum(liste):
    res = liste[1]
    for x in liste:
        if x > res:
            res = x
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[1]
    for x in liste:
        if x > res:
            res = x
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2167,False
"def maximum(liste):
    res = None
    if len(liste) > 0:
        liste.sort()
        res = liste
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = None
    if len(liste) > 0:
        liste.sort()
        res = liste
    return res",,,"def maximum(a):
    if len(a) == 1:
        return a[0]
    b = min(a)
    a = [c for c in a if c != b]
    return maximum(a)",2173,False
"def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res > liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res > liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2174,True
"def somme(liste):
    res = 0
    for i in liste:
        res = res + liste[i]
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in liste:
        res = res + liste[i]
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2185,True
"def minimum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",2200,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 1
        cpt = 1
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 1
        cpt = 1
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2206,True
"def somme(liste):
    res = None
    if len(liste) > 0:
        res = sum(liste)
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = None
    if len(liste) > 0:
        res = sum(liste)
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        if True:
            res = res + elem
        else:
            0
    return res",2230,True
"def moyenne(liste):
    if liste == []:
        return None
    else:
        somme = 0
        nbtermes = 0
        for elem in liste:
            somme = somme + elem
            nbtermes = nbtermes + 1
            moy = somme / nbtermes
            return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        return None
    else:
        somme = 0
        nbtermes = 0
        for elem in liste:
            somme = somme + elem
            nbtermes = nbtermes + 1
            moy = somme / nbtermes
            return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2237,True
"def maximum(liste):
    maximum = liste[0]
    for maximum in liste:
        if c >= maximum:
            maximum = c
    return maximum",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='c', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maximum = liste[0]
    for maximum in liste:
        if c >= maximum:
            maximum = c
    return maximum",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2239,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res == res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res == res + liste[i]
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",2246,True
"def maximum(liste):
    res = liste[0]
    for i in len(liste):
        if res < liste[i]:
            max = liste[i]
        return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in len(liste):
        if res < liste[i]:
            max = liste[i]
        return max",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2252,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res = res + x
        return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res = res + x
        return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",2266,True
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[-i]:
            ok = False
        i += 1
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[-i]:
            ok = False
        i += 1
    return res",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2322,True
"def somme(liste):
    res = 0
    for elem in list:
        res = res + elem
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='list', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elem in list:
        res = res + elem
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2325,True
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
            i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
            i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2328,True
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < j and ok:
        if i == j:
            ok = True
        else:
            ok = False
        i = i + 1
        j = j - 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < j and ok:
        if i == j:
            ok = True
        else:
            ok = False
        i = i + 1
        j = j - 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        else:
            0
        i += 1
    return ok",2338,True
"def minimum(liste):
    res = 0
    for elem in liste:
        if res < elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 0
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",2347,False
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i == j:
            ok = True
        else:
            ok = False
        i = i + 1
        j = j - 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i == j:
            ok = True
        else:
            ok = False
        i = i + 1
        j = j - 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        else:
            0
        i += 1
    return ok",2359,True
"def somme(liste):
    res = 0
    for i in range(len(l)):
        res = res + liste[i]
        return",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Return()], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(l)):
        res = res + liste[i]
        return",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2379,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        moy = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
        moy = res / cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        moy = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
        moy = res / cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2385,True
"def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores)):
        if scores[i] < scores[1 - i]:
            res = True
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores)):
        if scores[i] < scores[1 - i]:
            res = True
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",2390,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for elem in liste:
            if elem < liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for elem in liste:
            if elem < liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",2406,True
"def sommeNbPairs(liste):
    res = 0
    for nbrs in liste:
        if nbrs % 2 == 0:
            res = res + nbrs
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for nbrs in liste:
        if nbrs % 2 == 0:
            res = res + nbrs
        return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",2412,True
"def somme(liste):
    res = 0
    for i in range(liste):
        res = res + liste[i]
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(liste):
        res = res + liste[i]
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2417,True
"def maximum(liste):
    if len(liste) == 0:
        max = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        max = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2426,True
"def maximum(liste):
    for i in liste:
        res = liste([0])
    if res < i in liste:
        res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    for i in liste:
        res = liste([0])
    if res < i in liste:
        res = liste[i]
    return res",,,"def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    else:
        0
    return maximum(l, current_max)",2428,True
"def maximum(liste):
    maximum = liste[0]
    for maximum in liste:
        if c >= maximum:
            res = c
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='x_1', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='c', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='c', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maximum = liste[0]
    for maximum in liste:
        if c >= maximum:
            res = c
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2442,False
"def minimum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",2459,False
"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        res = res + x
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for x in liste:
        res = res + x
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",2477,True
"def maximum(liste):
    res = -50
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=50))), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = -50
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2480,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = elem / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = elem / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2484,True
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i] == mot[-i]:
                res = A
            i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i] == mot[-i]:
                res = A
            i += 1
    return res",,,"def motPalindrome(mot):
    A = True
    if A:
        ok = A
        i = 0
        while i < len(mot) // 2 and ok:
            if A:
                if mot[i] != mot[-1 - i]:
                    ok = False
                i += 1
        return ok",2500,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",2529,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2538,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moyenne = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    return res / cpt",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moyenne = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    return res / cpt",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2544,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_3', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2552,True
"def maximum(liste):
    res = liste[0]
    for elem in liste:
        if res > elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2568,False
"def maximum(liste):
    liste: 0
    res = 0
    for i in range(len(liste)):
        if res < len(liste):
            res = len(liste)
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='x_0', ctx=Store()), annotation=Constant(value=0), simple=1), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    liste: 0
    res = 0
    for i in range(len(liste)):
        if res < len(liste):
            res = len(liste)
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2582,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i]:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i]:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2585,False
"def maximum(liste):
    res = l[0]
    for i in range(len(liste)):
        if l[i] > res:
            res = l[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = l[0]
    for i in range(len(liste)):
        if l[i] > res:
            res = l[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2589,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(len(1, n + 1)):
        if liste[i] % 2 == 0:
            res = res + liste[i]
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(len(1, n + 1)):
        if liste[i] % 2 == 0:
            res = res + liste[i]
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",2593,True
"def somme(liste):
    res = 0
    for i in liste:
        res = res + res[i]
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_1', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in liste:
        res = res + res[i]
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",2594,True
"def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(l) / 2 and ok:
        if l[i] != l[1 - i]:
            ok = False
        i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='x_1', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(l) / 2 and ok:
        if l[i] != l[1 - i]:
            ok = False
        i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2595,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if i >= res:
                res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if i >= res:
                res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2598,True
"def maximum(liste):
    maxi = 0
    for v in range(liste):
        if v > maxi:
            maxi = v
        return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maxi = 0
    for v in range(liste):
        if v > maxi:
            maxi = v
        return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2626,False
"def motPalindrome(mot):
    ok = True
    i = 0
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    return ok",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        i += 1
    return ok",2640,True
"def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res < liste
        res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res < liste
        res = elem
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",2643,False
"def sommeNbPairs(liste):
    res = 0
    for i in liste:
        res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in liste:
        res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",2661,True
"def sommeNPremiersEntiersPairs(n):
    somme = 0
    for i in range(1, n + 1):
        somme = somme + i
        if elem % 2 == 0:
            somme = somme + elem
    return somme",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='elem', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    somme = 0
    for i in range(1, n + 1):
        somme = somme + i
        if elem % 2 == 0:
            somme = somme + elem
    return somme",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",2668,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moyenne = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moyenne = res / cpt
    return moyenne",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='x_3', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moyenne = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moyenne = res / cpt
    return moyenne",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2671,True
"def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        ok = True
        i = 0
        while i < len(mot) and ok:
            ok = mot[i] == mot[-1]
            i += 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        ok = True
        i = 0
        while i < len(mot) and ok:
            ok = mot[i] == mot[-1]
            i += 1
    return ok",,,"def motPalindrome(mot):
    A = False
    if True:
        0
    elif A:
        0
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        i += 1
    return ok",2688,True
"def moyenne(liste):
    if liste == ():
        res = none
    else:
        x = 0
        for i in range(len(liste)):
            x = x + liste[i]
            res = x / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == ():
        res = none
    else:
        x = 0
        for i in range(len(liste)):
            x = x + liste[i]
            res = x / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2715,True
"def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == 0:
        res = None
    else:
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = res
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2723,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in len(liste):
            res = res + i
            cpt = cpt + 1
    res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in len(liste):
            res = res + i
            cpt = cpt + 1
    res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",2728,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        res = liste[0]
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        res = liste[0]
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return res",,,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",2736,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(len(1, n + 1)):
        if liste[i]:
            res = res + liste[i]
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]), body=[If(test=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(len(1, n + 1)):
        if liste[i]:
            res = res + liste[i]
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",2741,True
"def maximum(liste):
    res = liste[0]
    if res < liste:
        liste = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_0', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    if res < liste:
        liste = max
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",2746,False
"def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    ok = True
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2765,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if i % 2 == 0:
            res = res + [i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=List(elts=[Name(id='x_2', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if i % 2 == 0:
            res = res + [i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",2784,True
"def listeDecroissante(scores):
    i = 0
    res = True
    while i < len(scores) - 1:
        if scores[i] < scores[i + 1]:
            res = False
    i = i + 1
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    i = 0
    res = True
    while i < len(scores) - 1:
        if scores[i] < scores[i + 1]:
            res = False
    i = i + 1
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",2785,True
"def listeDecroissante(scores):
    ok = True
    i = 0
    if len(scores) > 1:
        while i < len(scores) - 1:
            if scores[i] > scores[i + 1]:
                ok = False
            i = i + 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    if len(scores) > 1:
        while i < len(scores) - 1:
            if scores[i] > scores[i + 1]:
                ok = False
            i = i + 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    if True:
        while i < len(scores) - 1 and ok:
            if scores[i] < scores[i + 1]:
                ok = False
            i += 1
        return ok",2795,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res == range[0]
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=0), ctx=Load())])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res == range[0]
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2799,True
"def maximum(liste):
    res = 'None'
    for elem in liste:
        res = res > elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None')), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 'None'
    for elem in liste:
        res = res > elem
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",2807,True
"def maximum(liste):
    res = max
    for i in range(len(liste)):
        res = i < res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = max
    for i in range(len(liste)):
        res = i < res
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",2810,True
"def listeDecroissante(scores):
    res = []
    for i in range(len(scores) - 1):
        if scores[i] > scores[i + 1]:
            res = True
        else:
            res = False
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = []
    for i in range(len(scores) - 1):
        if scores[i] > scores[i + 1]:
            res = True
        else:
            res = False
    return res",,,"def listeDecroissante(scores):
    A = False
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = A
        if A:
            0
        else:
            0
        i += 1
    return ok",2829,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
    return None",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
    return None",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",2848,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2858,True
"def maximum(liste):
    res = l[0]
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = l[0]
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",2860,False
"def minimum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] < res:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
        for i in range(len(liste)):
            if liste[i] < res:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",2865,True
"def maximum(liste):
    n = len(liste)
    maxi = liste[0]
    for i in range(1, n):
        if lise[i] >= maxi:
            maxi = liste[i]
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Name(id='x_1', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='lise', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    n = len(liste)
    maxi = liste[0]
    for i in range(1, n):
        if lise[i] >= maxi:
            maxi = liste[i]
    return maxi",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2873,False
"def minimum(liste):
    if liste == ():
        res = none
    else:
        res = liste[0]
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == ():
        res = none
    else:
        res = liste[0]
        for i in range(len(liste)):
            if res > liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",2874,True
"def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem",,,"def maximum(l):
    if False:
        0
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",2889,False
"def listeSymetrique(l):
    i = 0
    j = -1
    ok = True
    while i < len(l) / 2 and j > -len(l) / 2 and ok:
        if l[i] != l[j]:
            ok = False
        i = i + 1
        j = j - 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), op=Div(), right=Constant(value=2))]), Name(id='x_3', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    j = -1
    ok = True
    while i < len(l) / 2 and j > -len(l) / 2 and ok:
        if l[i] != l[j]:
            ok = False
        i = i + 1
        j = j - 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",2896,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > i:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > i:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",2908,True
"def maximum(liste):
    maxVal = liste[0]
    for i in range(0, len(liste) + 1):
        if liste[i] > maxVal:
            maxVal = liste[i]
    return maxVal",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    maxVal = liste[0]
    for i in range(0, len(liste) + 1):
        if liste[i] > maxVal:
            maxVal = liste[i]
    return maxVal",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2918,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return len",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='len', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return len",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",2936,True
"def minimum(liste):
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",2945,False
"def maximum(liste):
    res = max
    for i in range(len(liste)):
        res = res < i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = max
    for i in range(len(liste)):
        res = res < i
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",2956,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if res < i:
            res = i
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if res < i:
            res = i
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",2969,False
"def maximum(liste):
    max = 0
    if i > max in liste:
        max = elem
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Gt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    if i > max in liste:
        max = elem
    return max",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",3004,False
"def somme(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for i in range(len(liste)):
            res = res + liste[i]
        return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def somme(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for i in range(len(liste)):
            res = res + liste[i]
        return res",,,"def somme(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for elem in liste:
            res = res + elem
    return res",3006,True
"def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='max', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
    return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3016,True
"def listeDecroissante(scores):
    ok = False
    while i < len(liste) and not ok:
        if liste[i] > liste[i + 1]:
            res = True
        else:
            res = ok
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = False
    while i < len(liste) and not ok:
        if liste[i] > liste[i + 1]:
            res = True
        else:
            res = ok
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",3017,True
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res:
            if mot[i] == mot[-1]:
                res = A
            i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res:
            if mot[i] == mot[-1]:
                res = A
            i += 1
    return res",,,"def motPalindrome(mot):
    A = True
    if A:
        ok = A
        i = 0
        while i < len(mot) // 2 and ok:
            if A:
                if mot[i] != mot[-1 - i]:
                    ok = False
                i += 1
        return ok",3038,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for n in range(1, n + 1):
        if n % 2 == 0:
            res = res + 1
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_0', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for n in range(1, n + 1):
        if n % 2 == 0:
            res = res + 1
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",3041,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3053,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in liste:
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in liste:
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3054,True
"def minimum(liste):
    res = liste[0]
    for i in liste:
        if liste[i] < res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = liste[0]
    for i in liste:
        if liste[i] < res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",3066,False
"def maximum(liste):
    res = liste[0]
    for i in list(range(4)):
        if res < list(i):
            res = list(i)
    else:
        if lis(i) < res:
            res = res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=4)], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='lis', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in list(range(4)):
        if res < list(i):
            res = list(i)
    else:
        if lis(i) < res:
            res = res
    return res",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    if True:
        0
    else:
        0
    return highest",3094,False
"def sommeNPremiersEntiersPairs(n):
    if n < 0:
        res = 0
    else:
        for x in range(n):
            if x % 2 == 0:
                res = res + x
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    if n < 0:
        res = 0
    else:
        for x in range(n):
            if x % 2 == 0:
                res = res + x
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    if len(range(1, n + 1)) == 0:
        0
    else:
        for x in range(1, n + 1):
            if x % 2 == 0:
                res += x
    return res",3096,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if i % 2 == 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if i % 2 == 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",3098,True
"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
                return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
                return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3102,True
"def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        res = res < i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        res = res < i
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",3129,True
"def motPalindrome(mot):
    res = False
    if mot == '':
        res = True
    else:
        mot2 = ''
        for i in mot:
            mot2 = i + mot2
        if mot1 == mot2:
            res = True
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='mot1', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = False
    if mot == '':
        res = True
    else:
        mot2 = ''
        for i in mot:
            mot2 = i + mot2
        if mot1 == mot2:
            res = True
    return res",,,"def motPalindrome(mot):
    A = True
    ok = A
    if A:
        i = 0
        while A:
            if not (i < len(mot) // 2 and ok):
                break
            if mot[i] != mot[-1 - i]:
                ok = False
            i += 1
        return ok",3131,True
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i != j:
            ok = False
        i = i + 1
        j = j + 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i != j:
            ok = False
        i = i + 1
        j = j + 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",3143,True
"def listeDecroissante(scores):
    ok = False
    while i < len(liste) and not ok:
        if liste[i] > liste[i + 1]:
            res = True
        else:
            res = ok
        return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='liste', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = False
    while i < len(liste) and not ok:
        if liste[i] > liste[i + 1]:
            res = True
        else:
            res = ok
        return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",3149,True
"def moyenne(liste):
    if liste == ():
        res = none
    else:
        x = 0
        for i in range(len(liste)):
            x = x + liste[i]
        res = x / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == ():
        res = none
    else:
        x = 0
        for i in range(len(liste)):
            x = x + liste[i]
        res = x / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3158,True
"def maximum(liste):
    max = l[1]
    for x in liste:
        if x > max:
            max = x
        return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = l[1]
    for x in liste:
        if x > max:
            max = x
        return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",3165,False
"def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste[n] % 2 == 0:
                res = res + liste[n]
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste[n] % 2 == 0:
                res = res + liste[n]
        return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",3168,True
"def maximum(liste):
    if len(liste):
        res = none
    else:
        res = 0
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return()], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste):
        res = none
    else:
        res = 0
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return",,,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",3173,False
"def somme(liste):
    res = 0
    for i in len(liste):
        res = res + len(liste)
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in len(liste):
        res = res + len(liste)
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",3177,True
"def maximum(liste):
    res = liste[0]
    for i in range:
        if res < i:
            return i
    else:
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='range', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range:
        if res < i:
            return i
    else:
        return res",,,"def maximum(a):
    m = a[0]
    if True:
        for n in a:
            if m < n:
                m = n
        return m",3188,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    res = []
    for i in range(len(liste)):
        if liste[i] + 1 > liste[i]:
            res = liste[i] + 1
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    res = []
    for i in range(len(liste)):
        if liste[i] + 1 > liste[i]:
            res = liste[i] + 1
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",3190,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        cpt = liste[0]
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        cpt = liste[0]
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3191,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        res = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        res = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3205,True
"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = liste[0]
        return None",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return(value=Constant(value=None))])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = liste[0]
        return None",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",3214,False
"def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res > liste
        res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_0', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res > liste
        res = elem
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",3281,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(1, n + 1):
        if liste[i] % 2 == 0:
            res = res + liste[i]
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(1, n + 1):
        if liste[i] % 2 == 0:
            res = res + liste[i]
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",3291,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if i < liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if i < liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",3294,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",3301,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3313,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(n, 0, -2):
        res = res + i
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(n, 0, -2):
        res = res + i
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",3316,True
"def motPalindrome(mot):
    B = False
    A = True
    i = 0
    c = A
    while i < len(mot) / 2 and c:
        if mot[i] == mot[len(mot) - i - 1]:
            c = A
        else:
            c = B
    if c == A:
        return A
    else:
        return B",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_4', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_3', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    B = False
    A = True
    i = 0
    c = A
    while i < len(mot) / 2 and c:
        if mot[i] == mot[len(mot) - i - 1]:
            c = A
        else:
            c = B
    if c == A:
        return A
    else:
        return B",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        if True:
            i += 1
    return ok",3325,True
"def maximum(liste):
    res = None
    if len(liste) > 0:
        liste.sort()
        res = liste
    return res[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_0', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_0', ctx=Load()))], orelse=[]), Return(value=Subscript(value=Name(id='x_1', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = None
    if len(liste) > 0:
        liste.sort()
        res = liste
    return res[-1]",,,"def maximum(a):
    if len(a) == 1:
        return a[0]
    b = min(a)
    a = [c for c in a if c != b]
    return maximum(a)",3332,False
"def maximum(l):
    res = None
    for i in range(len(l)):
        if res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    res = None
    for i in range(len(l)):
        if res < i:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",3336,False
"def maximum(liste):
    res = liste[0]
    for elem in liste:
        if elem > res:
            res = elem",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for elem in liste:
        if elem > res:
            res = elem",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",3354,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(n, 2):
        res = res + x
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(n, 2):
        res = res + x
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",3360,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if [i] % 2 != 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=List(elts=[Name(id='x_2', ctx=Load())], ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if [i] % 2 != 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",3363,True
"def maximum(liste):
    res = liste[0]
    for i in list(range):
        if res < list(i):
            res = list(i)
    else:
        if lis(i) < res:
            res = res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Name(id='range', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Name(id='lis', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in list(range):
        if res < list(i):
            res = list(i)
    else:
        if lis(i) < res:
            res = res
    return res",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    if True:
        0
    else:
        0
    return highest",3366,False
"def listeDecroissante(scores):
    ok = False
    while i < len(scores) and not ok:
        if liste[i] > liste[i + 1]:
            res = True
        else:
            res = ok
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = False
    while i < len(scores) and not ok:
        if liste[i] > liste[i + 1]:
            res = True
        else:
            res = ok
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",3373,True
"def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste % 2 == 0:
                res = res + liste
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste % 2 == 0:
                res = res + liste
        return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",3389,True
"def sommeNbPairs(liste):
    res = 0
    if liste[i] % 2 == 0:
        res = res + liste[i]
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    if liste[i] % 2 == 0:
        res = res + liste[i]
        return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",3411,True
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    return ok",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        i += 1
    return ok",3416,True
"def moyenne(liste):
    somme = 0
    for i in range(0, len(liste)):
        somme = somme + liste[i]
    moy = somme / len(liste)
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    somme = 0
    for i in range(0, len(liste)):
        somme = somme + liste[i]
    moy = somme / len(liste)
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",3422,False
"def maximum(liste):
    res = liste[0]
    for i in range(0, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(0, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    if True:
        return max",3425,False
"def maximum(liste):
    res = 0
    for elem in liste:
        res = res > elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        res = res > elem
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",3434,True
"def minimum(liste):
    min = liste[0]
    for i in liste:
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = liste[0]
    for i in liste:
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",3435,False
"def moyenne(liste):
    res = 0
    cpt = 0
    for i in liste:
        res = res + i
        cpt = cpt + 1
    moyenne = res / cpt
    return moyenne",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='x_4', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    for i in liste:
        res = res + i
        cpt = cpt + 1
    moyenne = res / cpt
    return moyenne",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",3440,False
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[-i]:
            ok = False
        i += 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[-i]:
            ok = False
        i += 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",3449,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    res = res / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    res = res / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3450,True
"def minimum(liste):
    res = l[0]
    for elem in liste:
        if l[0] < elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = l[0]
    for elem in liste:
        if l[0] < elem:
            res = elem
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",3467,False
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i != j:
            ok = False
        i = i + 1
        j = j + 1
    if i == j:
        ok = True
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i != j:
            ok = False
        i = i + 1
        j = j + 1
    if i == j:
        ok = True
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    if True:
        return ok",3482,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if res > liste[0]:
                res = liste[0]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if res > liste[0]:
                res = liste[0]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3506,True
"def maximum(liste):
    max = 0
    for elem in range(1, len(liste)):
        if len[liste] > max:
            max = l[liste]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='len', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    for elem in range(1, len(liste)):
        if len[liste] > max:
            max = l[liste]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",3512,False
"def listeSymetrique(l):
    A = False
    l2 = []
    flag = A
    i = 0
    while flag == A and i < len(l) - 1:
        if l[i] < l[i + 1]:
            l2.append(l[i])
            l2.append(l[i + 1])
            i = +2
        else:
            l2.reverse()
            flag = True
    print(l[i + 1:], l2)
    if l[i + 1:] == l2:
        res = True
    else:
        res = A
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=2)))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True))])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    A = False
    l2 = []
    flag = A
    i = 0
    while flag == A and i < len(l) - 1:
        if l[i] < l[i + 1]:
            l2.append(l[i])
            l2.append(l[i + 1])
            i = +2
        else:
            l2.reverse()
            flag = True
    print(l[i + 1:], l2)
    if l[i + 1:] == l2:
        res = True
    else:
        res = A
    return res",,,"def listeSymetrique(l):
    A = True
    res = A
    i = 0
    while A:
        if not (i < len(l) // 2 and res):
            break
        if A:
            0
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",3515,True
"def moyenne(liste):
    if liste == ():
        res = none
    else:
        res = 0
        for i in range(len(liste)):
            x = res + liste[i]
        res = x / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == ():
        res = none
    else:
        res = 0
        for i in range(len(liste)):
            x = res + liste[i]
        res = x / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3517,True
"def moyenne(liste):
    res = None
    if len(liste) > 0:
        res = mean(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='mean', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = None
    if len(liste) > 0:
        res = mean(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if False:
        0
    return res",3518,False
"def moyenne(liste):
    if liste == []:
        res = None
    else:
        res = 0
        cpt = 0
        for i in liste:
            res = res + liste[i]
            cpt = cpt + 1
        res = res / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        res = None
    else:
        res = 0
        cpt = 0
        for i in liste:
            res = res + liste[i]
            cpt = cpt + 1
        res = res / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3537,True
"def maximum(liste):
    max = liste[0]
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[0]
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",3539,False
"def maximum(liste):
    max = 0
    for elem in range(1, len(liste)):
        if liste[elem] > max:
            max = liste[elem]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    for elem in range(1, len(liste)):
        if liste[elem] > max:
            max = liste[elem]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",3553,False
"def motPalindrome(mot):
    B = False
    A = True
    i = 0
    c = A
    while i < len(mot) / 2 and c:
        if mot[i] == mot[len(mot) - i]:
            c = A
        else:
            c = B
    if c == A:
        return A
    else:
        return B",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load())), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Name(id='x_4', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_4', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='x_4', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    B = False
    A = True
    i = 0
    c = A
    while i < len(mot) / 2 and c:
        if mot[i] == mot[len(mot) - i]:
            c = A
        else:
            c = B
    if c == A:
        return A
    else:
        return B",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        if True:
            i += 1
    return ok",3559,True
"def maximum(l):
    res = None
    for i in range(1, len(l)):
        if res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    res = None
    for i in range(1, len(l)):
        if res < i:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",3593,False
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if liste[i] < res:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if liste[i] < res:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",3599,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if res < elem(liste):
            res = elem(liste)
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='elem', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='elem', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if res < elem(liste):
            res = elem(liste)
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",3601,False
"def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = res + elem
        else:
            res = 'None'
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value='None'))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = res + elem
        else:
            res = 'None'
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
        else:
            0
    return max",3606,False
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res // cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res // cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3658,True
"def maximum(l):
    res = 0
    for i in range(len(l)):
        if res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    res = 0
    for i in range(len(l)):
        if res < i:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",3661,False
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res:
            if mot[i] == mot[-i - 1]:
                res = A
            i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res:
            if mot[i] == mot[-i - 1]:
                res = A
            i += 1
    return res",,,"def motPalindrome(mot):
    A = True
    if A:
        ok = A
        i = 0
        while i < len(mot) // 2 and ok:
            if A:
                if mot[i] != mot[-1 - i]:
                    ok = False
                i += 1
        return ok",3666,True
"def maximum(liste):
    res = liste[0]
    for i in liste:
        res < liste[i]
        res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in liste:
        res < liste[i]
        res = liste[i]
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",3670,True
"def maximum(liste):
    res = 0
    if maximum in range(len(liste)):
        res = res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='maximum', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    if maximum in range(len(liste)):
        res = res + liste[i]
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",3673,False
"def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if scores[i] >= scores[i + 1]:
            res = ok
        else:
            res = False
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if scores[i] >= scores[i + 1]:
            res = ok
        else:
            res = False
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",3704,True
"def maximum(liste):
    if []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=List(elts=[], ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3713,True
"def maximum(liste):
    res = liste([1])
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[List(elts=[Constant(value=1)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste([1])
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",3725,False
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3730,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if i > liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if i > liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",3734,True
"def somme(liste):
    res = 0
    for i in range(len(l)):
        res = res + liste[i]
        return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(l)):
        res = res + liste[i]
        return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",3779,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
        else:
            res = res - x
    return None",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Sub(), right=Name(id='x_2', ctx=Load())))])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
        else:
            res = res - x
    return None",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
        else:
            0
    return res",3785,True
"def moyenne(liste):
    res = 0
    y = 0
    x = 0
    for elem in liste:
        y = y + 1
        x = x + elem
        res = x / y
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    y = 0
    x = 0
    for elem in liste:
        y = y + 1
        x = x + elem
        res = x / y
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",3831,False
"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) and ok:
        if scores[i] < scores[i + 1]:
            ok = False
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) and ok:
        if scores[i] < scores[i + 1]:
            ok = False
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",3834,True
"def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if liste[i] > liste[i + 1]:
            res = ok
        else:
            res = False
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if liste[i] > liste[i + 1]:
            res = ok
        else:
            res = False
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",3838,True
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i // 2] == mot[-i // 2]:
                res = A
                i += 1
            if mot[i // 2] != mot[-i // 2]:
                res = False
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=FloorDiv(), right=Constant(value=2)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), op=FloorDiv(), right=Constant(value=2)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i // 2] == mot[-i // 2]:
                res = A
                i += 1
            if mot[i // 2] != mot[-i // 2]:
                res = False
    return res",,,"def motPalindrome(mot):
    ok = True
    if True:
        i = 0
        while i < len(mot) // 2 and ok:
            if mot[i] != mot[-1 - i]:
                ok = False
            i += 1
        return ok
    else:
        0",3847,True
"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-i - 1]:
            ok = False
        i += 1
        return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-i - 1]:
            ok = False
        i += 1
        return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",3850,True
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if mot[i] != mot[j]:
            ok = False
        i = i + 1
        j = j + 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if mot[i] != mot[j]:
            ok = False
        i = i + 1
        j = j + 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",3851,True
"def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = liste[0]
    for elem in liste:
        res = elem
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",3857,False
"def listeDecroissante(scores):
    scorePrec = scores[0]
    ok = True
    i = 1
    while i < len(scores) and ok:
        if scorePrec <= scores[i]:
            ok = False
            i += 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=1)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False)), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    scorePrec = scores[0]
    ok = True
    i = 1
    while i < len(scores) and ok:
        if scorePrec <= scores[i]:
            ok = False
            i += 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",3859,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if i > res:
                res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if i > res:
                res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",3872,True
"def minimum(liste):
    res = liste[0]
    for i in liste:
        if i < res:
            res = i
        else:
            res = None
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = liste[0]
    for i in liste:
        if i < res:
            res = i
        else:
            res = None
    return res",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",3906,False
"def moyenne(liste):
    if len(liste) == 0:
        moy = None
    else:
        moy = 0
    for i in liste:
        moy = moy + i
    moy = moy / len(liste)
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        moy = None
    else:
        moy = 0
    for i in liste:
        moy = moy + i
    moy = moy / len(liste)
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        0
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",3914,False
"def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
    for elem in liste:
        res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
    for elem in liste:
        res = elem
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    maxi = maximum(l[1:])
    if l[0] > maxi:
        return l[0]
    else:
        return maxi",3926,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3934,True
"def moyenne(liste):
    if len(liste) == 0:
        moy = None
    else:
        res = 0
    nb = 0
    for nb in liste:
        res = res + nb
        nb += 1
    moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        moy = None
    else:
        res = 0
    nb = 0
    for nb in liste:
        res = res + nb
        nb += 1
    moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        0
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",3935,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    elif i in range(liste):
        if res < liste[i]:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    elif i in range(liste):
        if res < liste[i]:
            res = liste[i]
    return res",,,"def maximum(a, high=0):
    if not a:
        return high
    elif True:
        test = a.pop()
        if test > high or high == 0:
            return maximum(a, test)
        return maximum(a, high)",3936,False
"def maximum(liste):
    res = 12
    for i in liste:
        if liste < res:
            res = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=12)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 12
    for i in liste:
        if liste < res:
            res = max
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",3947,False
"def moyenne(liste):
    res = 0
    y = 0
    x = 0
    for elem in liste:
        y = y + 1
        x = x + elem
        res = x / y
        if len(liste) == 0:
            res = None
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    y = 0
    x = 0
    for elem in liste:
        y = y + 1
        x = x + elem
        res = x / y
        if len(liste) == 0:
            res = None
    return res",,,"def moyenne(liste):
    if len(liste) == 0 and True:
        0
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",3963,False
"def sommeNPremiersEntiersPairs(n):
    if n <= 0:
        res = 0
    else:
        for n in liste:
            if n % 2 == 0:
                res = n * (n + 1) / 2
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_0', ctx=Store()), iter=Name(id='liste', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='x_0', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))), op=Div(), right=Constant(value=2)))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    if n <= 0:
        res = 0
    else:
        for n in liste:
            if n % 2 == 0:
                res = n * (n + 1) / 2
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    if len(range(1, n + 1)) == 0:
        0
    else:
        for x in range(1, n + 1):
            if x % 2 == 0:
                res += x
    return res",3985,True
"def listeDecroissante(scores):
    ok = True
    i = 0
    if len(scores) > 1:
        while i < len(scores) - 1 and ok:
            if scores[i] > scores[i + 1]:
                ok = False
            i = i + 1
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    i = 0
    if len(scores) > 1:
        while i < len(scores) - 1 and ok:
            if scores[i] > scores[i + 1]:
                ok = False
            i = i + 1
    return ok",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    if True:
        while i < len(scores) - 1 and ok:
            if scores[i] < scores[i + 1]:
                ok = False
            i += 1
        return ok",3987,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 2
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 2
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",3993,True
"def maximum(liste):
    res = 25
    for i in range(len(liste)):
        res = res + liste[i]
    return 25",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=25)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Constant(value=25))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 25
    for i in range(len(liste)):
        res = res + liste[i]
    return 25",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",3997,True
"def moyenne(liste):
    return None",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    return None",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if False:
        0
    return res",4003,False
"def somme(liste):
    res = 0
    for x in range([liste]):
        res += x
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[List(elts=[Name(id='x_0', ctx=Load())], ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for x in range([liste]):
        res += x
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",4010,True
"def listeSymetrique(l):
    i = 0
    n = 0
    while i < len(l / 2) and n == 0:
        if l[i] == l[len(l) - i - 1]:
            i = i + 1
            n = 0
        else:
            n = 1
    if n == 0:
        res = True
    else:
        res = False
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Name(id='x_0', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='x_1', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1))])], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    n = 0
    while i < len(l / 2) and n == 0:
        if l[i] == l[len(l) - i - 1]:
            i = i + 1
            n = 0
        else:
            n = 1
    if n == 0:
        res = True
    else:
        res = False
    return res",,,"def listeSymetrique(l):
    A = False
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = A
        elif A:
            0
        if True:
            i += 1
    return res",4013,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if res < elem:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if res < elem:
            res = elem
    return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",4014,False
"def listeSymetrique(l):
    trouve = False
    i = 0
    j = -1
    while i < len(l) and j <= -len(l):
        if l(i) == l(j):
            trouve = True
        i = i + 1
        j = j - 1
    return trouve",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    trouve = False
    i = 0
    j = -1
    while i < len(l) and j <= -len(l):
        if l(i) == l(j):
            trouve = True
        i = i + 1
        j = j - 1
    return trouve",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",4020,True
"def maximum(liste):
    max = 0
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
        max = max
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
        max = max
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4027,False
"def maximum(liste):
    max = o
    if elem > max in liste:
        max = elem
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='o', ctx=Load())), If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Gt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = o
    if elem > max in liste:
        max = elem
    return max",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",4047,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for e in range(N + 1):
        if e % 2 == 0:
            res = res + e
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='N', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for e in range(N + 1):
        if e % 2 == 0:
            res = res + e
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",4053,True
"def somme(liste):
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    if True:
        return res
    else:
        0",4054,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    if i in range(1, n + 1):
        if i % 2 == 0:
            res = res + i
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='i', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    if i in range(1, n + 1):
        if i % 2 == 0:
            res = res + i
    return res",,,"def sommeNPremiersEntiersPairs(n):
    A = False
    res = 0
    for x in range(1, n + 1):
        if A:
            0
        if x % 2 == 0:
            res += x
        elif A:
            0
    return res",4059,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = range[0]
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='range', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = range[0]
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4061,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = res + liste[i]
        else:
            res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = res + liste[i]
        else:
            res = None
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
        else:
            0
    return max",4079,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = cpt % elem
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = cpt % elem
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4081,True
"def minimum(liste):
    res = l[0]
    for elem in liste:
        if l[0] > elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = l[0]
    for elem in liste:
        if l[0] > elem:
            res = elem
    return res",,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",4084,False
"def moyenne(liste):
    if liste == []:
        res = None
    else:
        x = 0
        cpt = 0
        for i in liste:
            x = x + i
            cpt = cpt + 1
            res = x / cpt
            return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if liste == []:
        res = None
    else:
        x = 0
        cpt = 0
        for i in liste:
            x = x + i
            cpt = cpt + 1
            res = x / cpt
            return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4090,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return my",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='my', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return my",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4117,True
"def motPalindrome(mot):
    palindrome = True
    i = 0
    j = len(mot) - 1
    i = 0
    while i < j and palindrome:
        if mot[i] != mot[j]:
            palindrome = False
    i = i + 1
    j = j - 1
    return palindrome",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    palindrome = True
    i = 0
    j = len(mot) - 1
    i = 0
    while i < j and palindrome:
        if mot[i] != mot[j]:
            palindrome = False
    i = i + 1
    j = j - 1
    return palindrome",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",4142,True
"def sommeNPremiersEntiersPairs(n):
    for elem in range(2, n + 1, 2):
        res = res + elem
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    for elem in range(2, n + 1, 2):
        res = res + elem
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",4157,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in range(len(liste)):
            res = res + i
            cpt = cpt + 1
    res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in range(len(liste)):
            res = res + i
            cpt = cpt + 1
    res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4173,True
"def listeDecroissante(scores):
    res = True
    x = score[0]
    for elem in score:
        if x < elem:
            res = False
        x = elem
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='score', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='score', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_3', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = True
    x = score[0]
    for elem in score:
        if x < elem:
            res = False
        x = elem
    return res",,,"def listeDecroissante(scores):
    A = True
    ok = A
    i = 0
    while i < len(scores) - 1 and ok:
        if A:
            if scores[i] < scores[i + 1]:
                ok = False
            elif A:
                0
            i += 1
    return ok",4174,True
"def maximum(l):
    res = l[0]
    for i in range(len(l)):
        if res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    res = l[0]
    for i in range(len(l)):
        if res < i:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",4192,False
"def sommeNPremiersEntiersPairs(n):
    somme = 0
    for i in range(1, n + 1):
        somme = somme + i
    for elem in liste:
        if elem % 2 == 0:
            somme = somme + elem
    return somme",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='liste', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    somme = 0
    for i in range(1, n + 1):
        somme = somme + i
    for elem in liste:
        if elem % 2 == 0:
            somme = somme + elem
    return somme",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if True:
            0
        else:
            0
        if x % 2 == 0:
            res += x
    return res",4199,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + len(liste)[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + len(liste)[i]
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",4204,True
"def maximum(liste):
    max = 0
    if elem > max in liste:
        max = elem
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Gt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='elem', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    if elem > max in liste:
        max = elem
    return max",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",4212,False
"def somme(liste):
    res = 0
    for x in range(liste):
        res += x
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for x in range(liste):
        res += x
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",4234,True
"def sommeNbPairs(liste):
    for elem in liste:
        if elem % 2 == 0:
            res = res + [i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=List(elts=[Name(id='i', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    for elem in liste:
        if elem % 2 == 0:
            res = res + [i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",4242,True
"def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if liste[i] < res:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if liste[i] < res:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",4248,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        cpt = 0
        res = 0
        for i in range(len(liste)):
            res = res + liste[i]
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        cpt = 0
        res = 0
        for i in range(len(liste)):
            res = res + liste[i]
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4258,True
"def moyenne(liste):
    if len(liste) == 0:
        res = none
    else:
        x = 0
        cpt = 0
        for i in range(len(liste)):
            cpt = cpt + 1
            x = x + liste[i]
        res = x / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_4', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Name(id='x_3', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = none
    else:
        x = 0
        cpt = 0
        for i in range(len(liste)):
            cpt = cpt + 1
            x = x + liste[i]
        res = x / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4265,True
"def maximum(liste):
    if len(liste == 0):
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste == 0):
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",,,"def maximum(l):
    if False:
        0
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",4280,False
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if elem < liste[i]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if elem < liste[i]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",4286,True
"def listeSymetrique(l):
    i = 0
    j = -1
    res = True
    while i < len(l) / 2 and j < -len(l) / 2 and res == True:
        if l[i] != l[j]:
            res = False
        i = i + 1
        j = j - 1
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])), op=Div(), right=Constant(value=2))]), Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    i = 0
    j = -1
    res = True
    while i < len(l) / 2 and j < -len(l) / 2 and res == True:
        if l[i] != l[j]:
            res = False
        i = i + 1
        j = j - 1
    return res",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",4311,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        for elem in liste:
            s += elem
        res = s // len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        for elem in liste:
            s += elem
        res = s // len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4317,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if x % 2 == 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if x % 2 == 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",4319,True
"def minimum(liste):
    min = 0
    for i in liste:
        if liste[i] < liste[i + 1]:
            min = l[i]
        else:
            min = None
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = 0
    for i in liste:
        if liste[i] < liste[i + 1]:
            min = l[i]
        else:
            min = None
    return min",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",4338,False
"def sommeNPremiersEntiersPairs(n):
    res = 1
    for elem in range(2, n + 1, 2):
        res = res + elem
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=2), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 1
    for elem in range(2, n + 1, 2):
        res = res + elem
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",4347,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[1 + i] > liste[i]:
                res = liste[1 + i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = []
        for i in range(len(liste)):
            if liste[1 + i] > liste[i]:
                res = liste[1 + i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4365,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 1, len(liste)
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Tuple(elts=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 1, len(liste)
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4372,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
    for i in range(len(liste)):
        if i >= res:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
    for i in range(len(liste)):
        if i >= res:
            res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        0
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",4374,True
"def maximum(liste):
    res = 0
    if liste in range(len(liste)):
        res = res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    if liste in range(len(liste)):
        res = res + liste[i]
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",4398,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + lenliste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='lenliste', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + lenliste[i]
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",4400,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = elem % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = elem % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4409,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = res + liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",4420,False
"def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
    return ok",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    ok = True
    i = 0
    while i < len(l) and ok:
        if l[i] != l[i - 1]:
            ok = False
        i = i + 1
    return ok",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",4421,True
"def somme(liste):
    res = 0
    if elem in liste:
        res = res + elem
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Name(id='elem', ctx=Load()), ops=[In()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='elem', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    if elem in liste:
        res = res + elem
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    if True:
        return res
    else:
        0",4428,True
"def maximum(liste):
    res = liste[0]
    for i in range(list):
        if res < i:
            return i
    else:
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='list', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(list):
        if res < i:
            return i
    else:
        return res",,,"def maximum(a):
    m = a[0]
    if True:
        for n in a:
            if m < n:
                m = n
        return m",4434,False
"def maximum(liste):
    if len(liste) == 0:
        return none
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
                return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return none
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
                return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4446,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(le(liste)):
            if liste[i] > res:
                res = liste[i]
    return None",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='le', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(le(liste)):
            if liste[i] > res:
                res = liste[i]
    return None",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4447,True
"def motPalindrome(mot):
    res = False
    i = 0
    while i < len(mot) and not res:
        if mot[i] == mot[-1 - i]:
            res = True
        i += 1
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Name(id='x_1', ctx=Load()))]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = False
    i = 0
    while i < len(mot) and not res:
        if mot[i] == mot[-1 - i]:
            res = True
        i += 1
    return res",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",4455,True
"def minimum(liste):
    res = 100
    for i in range(len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=100)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 100
    for i in range(len(liste)):
        if liste[i] < res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",4469,False
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return None",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))])], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return None",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",4487,True
"def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if n % 2 == 0:
                res = res + n
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if n % 2 == 0:
                res = res + n
        return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",4491,True
"def moyenne(liste):
    if len(liste) != 0:
        for elem in liste:
            num += elem
        res = num / len(liste)
        return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Name(id='x_1', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_3', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) != 0:
        for elem in liste:
            num += elem
        res = num / len(liste)
        return res",,,"def moyenne(liste):
    if len(liste) == 0 and False:
        0
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",4492,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in range(len(liste)):
            res = res + i
            cpt = cpt + 1
    moy = res % cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in range(len(liste)):
            res = res + i
            cpt = cpt + 1
    moy = res % cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4521,True
"def listeSymetrique(l):
    l2 = l[int(len(l) / 2):]
    l2.reverse()
    l = l[:int(len(l) / 2) + 1]
    res = False
    if l == l2:
        res = True
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    l2 = l[int(len(l) / 2):]
    l2.reverse()
    l = l[:int(len(l) / 2) + 1]
    res = False
    if l == l2:
        res = True
    return res",,,"def listeSymetrique(l):
    A = False
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = A
        elif A:
            0
        i += 1
    return res",4524,True
"def somme(liste):
    res = 0
    for elem in liste:
        res = res + liste[i]
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elem in liste:
        res = res + liste[i]
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",4541,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] % 2 != 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] % 2 != 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",4554,True
"def maximum(liste):
    max = 0
    for i in range(0, len(liste)):
        if liste[i] > res:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='res', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    for i in range(0, len(liste)):
        if liste[i] > res:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4569,False
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res / cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res / cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4572,True
"def maximum(liste):
    res = 0
    for elen in liste[1]:
        if elen > res:
            res = elen
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elen in liste[1]:
        if elen > res:
            res = elen
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4574,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4580,True
"def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < liste[i + 1]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < liste[i + 1]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",4588,True
"def sommeNbPairs(liste):
    for nb in liste:
        if nb % 2 == 0:
            res = res + nb
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_1', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    for nb in liste:
        if nb % 2 == 0:
            res = res + nb
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",4594,True
"def moyenne(liste):
    if len(liste) != 0:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    else:
        res = 0
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Name(id='x_2', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=FloorDiv(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) != 0:
        s = 0
        for elem in liste:
            s += elem
        res = s // len(liste)
    else:
        res = 0
    return res",,,"def moyenne(liste):
    if len(liste) == 0 and False:
        0
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",4596,False
"def maximum(liste):
    max = liste[0]
    for i in len(liste):
        if max < liste(i):
            max = liste(i)
        elif max > liste(i):
            max = max
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[0]
    for i in len(liste):
        if max < liste(i):
            max = liste(i)
        elif max > liste(i):
            max = max
    return max",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",4598,False
"def minimum(liste):
    if liste == ():
        res = none
    else:
        res = liste[0]
        if res > liste[i]:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == ():
        res = none
    else:
        res = liste[0]
        if res > liste[i]:
            res = liste[i]
    return res",,,"def minimum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    else:
        if mylist[0] > mylist[1]:
            mylist.remove(mylist[0])
            return minimum(mylist)
        mylist.remove(mylist[1])
        return minimum(mylist)",4604,False
"def listeSymetrique(l):
    l2 = l[int(len(l) / 2):]
    l2.reverse()
    l = l[:int(len(l) / 2) + 1]
    res = True
    if l != l2:
        res = False
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[])), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='x_1', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_0', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Div(), right=Constant(value=2))], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[NotEq()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    l2 = l[int(len(l) / 2):]
    l2.reverse()
    l = l[:int(len(l) / 2) + 1]
    res = True
    if l != l2:
        res = False
    return res",,,"def listeSymetrique(l):
    A = False
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = A
        elif A:
            0
        i += 1
    return res",4625,True
"def maximum(liste):
    max = l[0]
    for x in liste:
        if x > max:
            max = x
        return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = l[0]
    for x in liste:
        if x > max:
            max = x
        return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4626,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
        moy = res / cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
        moy = res / cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4632,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(n, 2, -2):
        res = res + i
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load()), Constant(value=2), UnaryOp(op=USub(), operand=Constant(value=2))], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(n, 2, -2):
        res = res + i
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",4633,True
"def maximum(liste):
    max = l[0]
    for i in range(0, len(liste)):
        if max < l[0]:
            max = l[0]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = l[0]
    for i in range(0, len(liste)):
        if max < l[0]:
            max = l[0]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4635,False
"def minimum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",4639,False
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
        return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
        return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",4642,True
"def minimum(liste):
    res = 12
    for elem in liste:
        if res > elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=12)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 12
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",4656,False
"def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if liste[i] >= liste[i + 1]:
            res = ok
        else:
            res = False
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='liste', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='liste', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if liste[i] >= liste[i + 1]:
            res = ok
        else:
            res = False
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        else:
            0
        i += 1
    return ok",4661,True
"def maximum(l):
    if len(l) == 0:
        res == l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    else:
        res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())])), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 0:
        res == l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    else:
        res = None
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    if True:
        return maximum(l)",4664,False
"def minimum(liste):
    res = 0
    for elem in liste:
        if res >= elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = 0
    for elem in liste:
        if res >= elem:
            res = elem
    return res",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",4688,False
"def motPalindrome(mot):
    res = True
    i = 0
    while i < len(mot) // 2 and res:
        if mot[i] != mot[-i - 1]:
            res = False
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=FloorDiv(), right=Constant(value=2))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=UnaryOp(op=USub(), operand=Name(id='x_2', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = True
    i = 0
    while i < len(mot) // 2 and res:
        if mot[i] != mot[-i - 1]:
            res = False
    return res",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",4694,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    for elem in liste:
        if elem < 0:
            res = 0
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if elem > res:
            res = elem
    for elem in liste:
        if elem < 0:
            res = 0
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4696,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        res = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    res = res / cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        res = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    res = res / cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4697,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        for elem in liste:
            res = res + elem
            nb += 1
        moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        for elem in liste:
            res = res + elem
            nb += 1
        moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4701,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",4708,True
"def maximum(liste):
    if liste == 0:
        res = None
    else:
        res = 0
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == 0:
        res = None
    else:
        res = 0
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4711,True
"def listeDecroissante(scores):
    if len(scores) == 0:
        ok = True
    else:
        ok = True
        i = 0
        while i < len(scores) and ok:
            if scores[i] < scores[i + 1]:
                ok = False
    return ok",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    if len(scores) == 0:
        ok = True
    else:
        ok = True
        i = 0
        while i < len(scores) and ok:
            if scores[i] < scores[i + 1]:
                ok = False
    return ok",,,"def listeDecroissante(scores):
    A = True
    if A:
        if A:
            0
        ok = A
        i = 0
        while i < len(scores) - 1 and ok:
            if scores[i] < scores[i + 1]:
                ok = False
            i += 1
        return ok",4733,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if liste[i] > res:
                res = liste[1]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste:
            if liste[i] > res:
                res = liste[1]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4744,True
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for elem in liste:
            if elem < liste[elem]:
                res = liste[elem]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for elem in liste:
            if elem < liste[elem]:
                res = liste[elem]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",4748,True
"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
            return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                max = liste[i]
            return max",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4756,True
"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res = res + 0
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=0)))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res = res + 0
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",4762,True
"def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for elem in liste:
            if elem % 2 == 0:
                res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for elem in liste:
            if elem % 2 == 0:
                res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",4764,True
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",4765,False
"def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i] == mot[-i]:
                res = A
                i += 1
            else:
                res = False
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())])]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Name(id='x_3', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))])], orelse=[])]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = True
    if len(mot) == 0:
        res = A
    else:
        res = A
        i = 0
        while i < len(mot) and res == A:
            if mot[i] == mot[-i]:
                res = A
                i += 1
            else:
                res = False
    return res",,,"def motPalindrome(mot):
    A = False
    if A:
        0
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        i += 1
    if True:
        return ok",4771,True
"def minimum(liste):
    res = l[0]
    for elem in liste:
        if res > elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = l[0]
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",4782,False
"def maximum(liste):
    max = liste[0]
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = l[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[0]
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = l[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4793,False
"def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste[i]:
            if liste[i] < res:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = liste[0]
        for i in liste[i]:
            if liste[i] < res:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",4806,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res < liste[i]
            res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            res < liste[i]
            res = liste[i]
    return res",,,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",4811,False
"def motPalindrome(mot):
    res = False
    if mot(0) == mot(-1):
        res = True
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Constant(value=0)], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = False
    if mot(0) == mot(-1):
        res = True
    return res",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        i += 1
    return ok",4823,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        res = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    return res / cpt",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        res = 0
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    return res / cpt",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4827,True
"def maximum(liste):
    max = 0
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = 0
    for i in range(0, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",4830,False
"def maximum(liste):
    for i in liste:
        res = liste[0]
    if res < i in liste:
        res = liste(i)
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_1', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    for i in liste:
        res = liste[0]
    if res < i in liste:
        res = liste(i)
    return res",,,"def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    else:
        0
    return maximum(l, current_max)",4840,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = elem % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = elem % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4849,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        moy = ''
        for elem in liste:
            res = res + elem
            nb += 1
        moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='')), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        nb = 0
        res = 0
        moy = ''
        for elem in liste:
            res = res + elem
            nb += 1
        moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4863,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in range(len(liste)):
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",4865,True
"def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if len(liste[i]) % 2 != 0:
            res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    res = 0
    for i in range(len(liste)):
        if len(liste[i]) % 2 != 0:
            res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    for x in liste:
        if x % 2 == 0:
            res += x
    return res",4875,True
"def motPalindrome(mot):
    A = False
    res = A
    if mot[0] == mot[-1]:
        res = True
    else:
        res = A
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    A = False
    res = A
    if mot[0] == mot[-1]:
        res = True
    else:
        res = A
    return res",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            if True:
                ok = False
        else:
            0
        i += 1
    return ok",4886,True
"def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if scores[i] >= scores[i + 1]:
            res = ok
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    ok = True
    while i < len(scores) and ok:
        if scores[i] >= scores[i + 1]:
            res = ok
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",4902,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(liste):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(liste):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4908,True
"def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if i >= res:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[GtE()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if i >= res:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",4941,False
"def listeDecroissante(scores):
    i = 0
    ok = True
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), AugAssign(target=Name(id='x_1', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    i = 0
    ok = True
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",4956,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range([liste]):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[List(elts=[Name(id='x_0', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range([liste]):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",4961,True
"def minimum(liste):
    min = liste[0]
    for i in range(1, len(liste), -1):
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = liste[0]
    for i in range(1, len(liste), -1):
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",4968,False
"def maximum(liste):
    max = liste[0]
    for i in liste:
        if max < liste(i):
            max = liste(i)
        elif max > liste(i):
            max = max
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[0]
    for i in liste:
        if max < liste(i):
            max = liste(i)
        elif max > liste(i):
            max = max
    return max",,,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",4969,False
"def listeSymetrique(l):
    A = False
    l2 = []
    flag = A
    i = 0
    while flag == A and i < len(l) - 1:
        if l[i] < l[i + 1] and l[i] >= 0:
            l2.append(l[i])
            l2.append(l[i + 1])
            i = +2
        elif l[i] > l[i + 1] and l[i] < 0:
            l2.append(l[i])
            l2.append(l[i + 1])
            i = +2
        else:
            l2.reverse()
            flag = True
    print(l[i + 1:], l2)
    if l[i + 1:] == l2:
        res = True
    else:
        res = A
    return res",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='x_3', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_1', ctx=Load())]), Compare(left=Name(id='x_4', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=2)))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_4', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='x_4', ctx=Store())], value=UnaryOp(op=UAdd(), operand=Constant(value=2)))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_2', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=True))])])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), Name(id='x_2', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='x_4', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), ops=[Eq()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_5', ctx=Store())], value=Name(id='x_1', ctx=Load()))]), Return(value=Name(id='x_5', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    A = False
    l2 = []
    flag = A
    i = 0
    while flag == A and i < len(l) - 1:
        if l[i] < l[i + 1] and l[i] >= 0:
            l2.append(l[i])
            l2.append(l[i + 1])
            i = +2
        elif l[i] > l[i + 1] and l[i] < 0:
            l2.append(l[i])
            l2.append(l[i + 1])
            i = +2
        else:
            l2.reverse()
            flag = True
    print(l[i + 1:], l2)
    if l[i + 1:] == l2:
        res = True
    else:
        res = A
    return res",,,"def listeSymetrique(l):
    A = False
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = A
        else:
            0
        i += 1
    if A:
        0
    else:
        0
    return res",4977,True
"def listeDecroissante(scores):
    res = True
    if len(scores) == 0:
        return res
    else:
        x = True
        i = 0
        while i < len(scores) and x:
            if scores[i] < scores[i + 1]:
                x = False
            i = i + 1
        return x",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='x_1', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = True
    if len(scores) == 0:
        return res
    else:
        x = True
        i = 0
        while i < len(scores) and x:
            if scores[i] < scores[i + 1]:
                x = False
            i = i + 1
        return x",,,"def listeDecroissante(scores):
    A = True
    if A:
        if A:
            0
        ok = A
        i = 0
        while i < len(scores) - 1 and ok:
            if scores[i] < scores[i + 1]:
                ok = False
            i += 1
        return ok",4981,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if liste[i] > res:
                res = res
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_1', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if liste[i] > res:
                res = res
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5001,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if liste[i] > res:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5021,True
"def somme(liste):
    if liste[i] == 0:
        res = 0
    else:
        res = 0
        for i in range(len(liste)):
            res = res + liste[i]
        return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_1', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def somme(liste):
    if liste[i] == 0:
        res = 0
    else:
        res = 0
        for i in range(len(liste)):
            res = res + liste[i]
        return res",,,"def somme(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for elem in liste:
            res = res + elem
    return res",5026,True
"def moyenne(liste):
    res = 0
    nb = 0
    for nb in liste:
        res = res + nb
        nb += 1
    moy = res / nb
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), AugAssign(target=Name(id='x_2', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    nb = 0
    for nb in liste:
        res = res + nb
        nb += 1
    moy = res / nb
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",5028,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        x = 0
        for elem in liste:
            res = res + elem
            x = x + 1
    moy = x % res
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_4', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_1', ctx=Load()))), Return(value=Name(id='x_4', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        x = 0
        for elem in liste:
            res = res + elem
            x = x + 1
    moy = x % res
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5031,True
"def motPalindrome(mot):
    D = False
    C = 'bcdfghjklmnpqrstvxz'
    B = 'aeiouy'
    A = True
    i = 0
    if len(mot) == 0:
        res = A
        good = A
    else:
        while i < len(mot) - 1 and good == A:
            l1 = mot[i]
            l2 = mot[i + 1]
            if l1 in B and l2 in C or l1 in C and l2 in B:
                res = A
            else:
                res = D
                good = D
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value='bcdfghjklmnpqrstvxz')), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value='aeiouy')), Assign(targets=[Name(id='x_4', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_5', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Name(id='x_4', ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_5', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Compare(left=Name(id='x_7', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_4', ctx=Load())])]), body=[Assign(targets=[Name(id='x_8', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_5', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='x_9', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_5', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='x_8', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())]), Compare(left=Name(id='x_9', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())])]), BoolOp(op=And(), values=[Compare(left=Name(id='x_8', ctx=Load()), ops=[In()], comparators=[Name(id='x_2', ctx=Load())]), Compare(left=Name(id='x_9', ctx=Load()), ops=[In()], comparators=[Name(id='x_3', ctx=Load())])])]), body=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Name(id='x_4', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_6', ctx=Store())], value=Name(id='x_1', ctx=Load())), Assign(targets=[Name(id='x_7', ctx=Store())], value=Name(id='x_1', ctx=Load()))])], orelse=[])]), Return(value=Name(id='x_6', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    D = False
    C = 'bcdfghjklmnpqrstvxz'
    B = 'aeiouy'
    A = True
    i = 0
    if len(mot) == 0:
        res = A
        good = A
    else:
        while i < len(mot) - 1 and good == A:
            l1 = mot[i]
            l2 = mot[i + 1]
            if l1 in B and l2 in C or l1 in C and l2 in B:
                res = A
            else:
                res = D
                good = D
    return res",,,"def motPalindrome(mot):
    A = True
    ok = A
    i = 0
    if A:
        while i < len(mot) // 2 and ok:
            if mot[i] != mot[-1 - i]:
                if A:
                    0
                ok = False
            i += 1
        return ok",5063,True
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Name(id='x_0', ctx=Load()), op=Add(), right=Constant(value=1)), Constant(value=2)], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1, 2):
        if x % 2 == 0:
            res = res + x
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            res += x
    return res",5065,True
"def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if liste[i] > res:
            res = res + liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in range(len(liste)):
        if liste[i] > res:
            res = res + liste[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5077,False
"def minimum(liste):
    min = liste[1]
    for i in liste:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = liste[1]
    for i in liste:
        if i < min:
            min = i
    return min",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",5084,False
"def maximum(liste):
    if len(liste):
        res = None
    else:
        res = 0
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())])), Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste):
        res = None
    else:
        res = 0
        for i in range(1, len(liste)):
            res = len(liste) > res
            res = len(liste)
    return res",,,"def maximum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(-1)
        else:
            list.pop(0)
        return maximum(list)",5087,False
"def maximum(l):
    if len(l) == 0:
        res = None
    else:
        res = l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 0:
        res = None
    else:
        res = l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5118,True
"def motPalindrome(mot):
    res = False
    if mot[0] == mot[-1]:
        res = True
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    res = False
    if mot[0] == mot[-1]:
        res = True
    return res",,,"def motPalindrome(mot):
    A = False
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        elif A:
            0
        i += 1
    return ok",5119,True
"def minimum(liste):
    min = l[0]
    for i in liste:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = l[0]
    for i in liste:
        if i < min:
            min = i
    return min",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",5135,False
"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
        return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
        return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",5146,True
"def sommeNbPairs(liste):
    if liste == []:
        res = 0
    else:
        for i in liste:
            if i % 2 == 0:
                res = res + i
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if liste == []:
        res = 0
    else:
        for i in liste:
            if i % 2 == 0:
                res = res + i
    return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",5172,True
"def maximum(liste):
    if len(liste) == 0:
        return none
        res = liste[0]
    for elem in liste:
        if elem > res:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='none', ctx=Load())), Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        return none
        res = liste[0]
    for elem in liste:
        if elem > res:
            res = elem
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    res = liste[0]
    for i in range(1, len(liste)):
        if liste[i] > res:
            res = liste[i]
    return res",5184,True
"def moyenne(liste):
    somme = 0
    for elem in liste:
        somme = somme + elem
    moy = somme / len(liste)
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    somme = 0
    for elem in liste:
        somme = somme + elem
    moy = somme / len(liste)
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    if True:
        return res",5191,False
"def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste[liste] % 2 == 0:
                res = res + liste[liste]
        return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_0', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if liste == 0:
        res = 0
    else:
        for n in liste:
            if liste[liste] % 2 == 0:
                res = res + liste[liste]
        return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",5211,True
"def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste(i)
        return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]))), Return(value=Constant(value=None))], orelse=[])], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste(i)
        return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",5213,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 1
        cpt = 1
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=1)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 1
        cpt = 1
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5218,True
"def maximum(liste):
    res = 0
    for i in range(len(l)):
        if res < i:
            res = i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(l)):
        if res < i:
            res = i
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5226,False
"def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(0, n, 2):
        res = res + i
    return res",sum_n_first_even,sommeNPremiersEntiersPairs,Returns the sum of the n first even numbers.,assert sommeNPremiersEntiersPairs(1)==0 and sommeNPremiersEntiersPairs(3)==2 and sommeNPremiersEntiersPairs(5)==6 and sommeNPremiersEntiersPairs(-2)==0 and sommeNPremiersEntiersPairs(0)==0 and sommeNPremiersEntiersPairs(10)==30 and sommeNPremiersEntiersPairs(124)==3906 and sommeNPremiersEntiersPairs(-5)==0,False,"Module(body=[FunctionDef(name='sommeNPremiersEntiersPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load()), Constant(value=2)], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNPremiersEntiersPairs(n):
    res = 0
    for i in range(0, n, 2):
        res = res + i
    return res",,,"def sommeNPremiersEntiersPairs(n):
    res = 0
    for x in range(1, n + 1):
        if x % 2 == 0:
            if True:
                0
            elif True:
                0
            res += x
    return res",5237,True
"def maximum(liste):
    res = liste[0]
    for i in liste:
        if res < i:
            return i
    else:
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Return(value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in liste:
        if res < i:
            return i
    else:
        return res",,,"def maximum(a):
    m = a[0]
    if True:
        for n in a:
            if m < n:
                m = n
        return m",5245,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
        if res < i:
            res = i
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
        if res < i:
            res = i
        return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5246,False
"def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for i in range(0, liste):
            if liste[i] % 2 == 0:
                res = res + liste[i]
    return res",sum_even_numbers,sommeNbPairs,Return the sum of the even numbers in a list.,"assert sommeNbPairs([12, 13, 6, 5, 7])==18 and sommeNbPairs([])==0 and sommeNbPairs([13, 15, -3, 711])==0 and sommeNbPairs([1224, -728])==496 and sommeNbPairs([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])==249500",False,"Module(body=[FunctionDef(name='sommeNbPairs', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='x_0', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def sommeNbPairs(liste):
    if len(liste) == 0:
        res = 0
    else:
        res = 0
        for i in range(0, liste):
            if liste[i] % 2 == 0:
                res = res + liste[i]
    return res",,,"def sommeNbPairs(liste):
    res = 0
    if len(liste) == 0:
        0
    else:
        for x in liste:
            if x % 2 == 0:
                res += x
    return res",5264,True
"def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] > scores[1 + i]:
            res = True
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Constant(value=1), op=Add(), right=Name(id='x_2', ctx=Load())), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = False
    if scores == []:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] > scores[1 + i]:
            res = True
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",5273,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = cpt % elem
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Mod(), right=Name(id='x_3', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
            res = cpt % elem
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5280,True
"def maximum(liste):
    res = 0
    for elem in liste:
        if res < elem(liste):
            res = elem(liste)
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='x_2', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if res < elem(liste):
            res = elem(liste)
        return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",5298,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res < i
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res < i
    return res",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",5309,True
"def maximum(liste):
    if len(liste) == 0:
        max = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                res = liste[i]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        max = None
    else:
        max = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > max:
                res = liste[i]",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5311,True
"def maximum(liste):
    res = []
    for x in liste:
        if x > res:
            res = x
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = []
    for x in liste:
        if x > res:
            res = x
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5346,False
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5349,True
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < j and ok:
        if mot[i] != mot[j]:
            ok = False
        i = i + 1
        j = j + 1
    return ok",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_3', ctx=Load())]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < j and ok:
        if mot[i] != mot[j]:
            ok = False
        i = i + 1
        j = j + 1
    return ok",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        i += 1
    return ok",5352,True
"def maximum(liste):
    res = 0
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    if len(liste) == 0:
        res = none
    else:
        res = liste[0]
        for elem in liste:
            res = elem
    return res",,,"def maximum(l):
    if False:
        0
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",5357,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res = res + liste
    res = res / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_0', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res = res + liste
    res = res / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",5360,False
"def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if liste[i] < liste[i + 1]:
                res = liste[i]
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    if liste == []:
        res = None
    else:
        res = liste[0]
        for i in range(1, len(liste) - 1):
            if liste[i] < liste[i + 1]:
                res = liste[i]
    return res",,,"def minimum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] < res:
                res = liste[i]
        return res",5367,True
"def listeDecroissante(scores):
    if scores == [] or res == True:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] <= scores[i + 1]:
            res = False
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), Compare(left=Name(id='x_1', ctx=Load()), ops=[Eq()], comparators=[Constant(value=True)])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[LtE()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    if scores == [] or res == True:
        res = True
    for i in range(len(scores) - 1):
        if scores[i] <= scores[i + 1]:
            res = False
    return res",,,"def listeDecroissante(scores):
    ok = True
    if True:
        0
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",5385,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5420,True
"def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = None
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=None))], orelse=[For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mult(), right=Name(id='x_2', ctx=Load()))), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    res = 0
    cpt = 0
    if len(liste) == 0:
        moy = None
    else:
        for i in liste:
            res = res + i
            cpt = cpt + 1
    moy = res * cpt
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5428,True
"def maximum(l):
    max = l[0]
    for i in range(0, len(l)):
        if l[i] > res:
            res = l[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_3', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(l):
    max = l[0]
    for i in range(0, len(l)):
        if l[i] > res:
            res = l[i]
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5436,False
"def somme(liste):
    res = 0
    for elem in l:
        res = res + elem
    return res",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='l', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elem in l:
        res = res + elem
    return res",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",5445,True
"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",5451,True
"def maximum(liste):
    for i in liste:
        res = liste[0]
    if res < i in liste:
        res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='x_1', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt(), In()], comparators=[Name(id='x_1', ctx=Load()), Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_1', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Name(id='x_2', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    for i in liste:
        res = liste[0]
    if res < i in liste:
        res = liste[i]
    return res",,,"def maximum(l, current_max=None):
    if not l:
        return current_max
    first = l.pop()
    if current_max == None or first > current_max:
        return maximum(l, first)
    else:
        0
    return maximum(l, current_max)",5453,True
"def minimum(liste):
    min = 0
    for i in liste:
        if l[i] < l[i + 1]:
            min = l[i]
        else:
            min = None
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='l', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = 0
    for i in liste:
        if l[i] < l[i + 1]:
            min = l[i]
        else:
            min = None
    return min",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",5463,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res = res + elem
    res = res / len(liste)
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_2', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res = res + elem
    res = res / len(liste)
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    res = 0
    for elem in liste:
        res += elem
    res = res / len(liste)
    return res",5471,False
"def maximum(liste):
    res = 0
    for elem in liste:
        if res < elem:
            res = elem
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], orelse=[])], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for elem in liste:
        if res < elem:
            res = elem
        return res",,,"def maximum(a):
    m = a[0]
    for n in a:
        if m < n:
            m = n
    return m",5475,False
"def listeDecroissante(scores):
    c = True
    i = 0
    while i < len(score) - 1 and c:
        if score[i] < score[i + 1]:
            c = False
        i = i + 1
    return c",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='score', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Name(id='score', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    c = True
    i = 0
    while i < len(score) - 1 and c:
        if score[i] < score[i + 1]:
            c = False
        i = i + 1
    return c",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",5478,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        moy = res / cpt
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    return moy",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load()))), For(target=Name(id='x_4', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_4', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=Name(id='x_3', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        moy = res / cpt
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    return moy",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5480,True
"def maximum(liste):
    res = 0
    for i in range(0, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(0, len(liste)):
        if liste[i] > res:
            res = liste[i]
    if len(liste) == 0:
        res = None
    return res",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    if True:
        return max",5481,False
"def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return None",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = 0
    for i in range(len(liste)):
        res = res + liste[i]
    return None",,,"def maximum(l):
    min = None
    for item in l:
        min = item if min == None or item > min else min
    return min",5484,True
"def maximum(liste):
    if x >= y and x >= z:
        maxi = x
    if y >= x and y >= z:
        maxi = y
    if z >= x and z >= y:
        maxi = z
    return maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Name(id='y', ctx=Load())]), Compare(left=Name(id='x', ctx=Load()), ops=[GtE()], comparators=[Name(id='z', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Name(id='x', ctx=Load())]), Compare(left=Name(id='y', ctx=Load()), ops=[GtE()], comparators=[Name(id='z', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='y', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='z', ctx=Load()), ops=[GtE()], comparators=[Name(id='x', ctx=Load())]), Compare(left=Name(id='z', ctx=Load()), ops=[GtE()], comparators=[Name(id='y', ctx=Load())])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='z', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if x >= y and x >= z:
        maxi = x
    if y >= x and y >= z:
        maxi = y
    if z >= x and z >= y:
        maxi = z
    return maxi",,,"def maximum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_max = maximum(l[1:])
    if tail_max == []:
        return l[0]
    return l[0] if l[0] > tail_max else tail_max",5491,False
"def maximum(liste):
    max = liste[1]
    for i in range(1, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    max = liste[1]
    for i in range(1, len(liste)):
        if liste[i] > max:
            max = liste[i]
    return max",,,"def maximum(s):
    max = s[0]
    for c in s[1:]:
        if c > max:
            max = c
    return max",5495,False
"def listeSymetrique(l):
    trouve = True
    i = 0
    j = -1
    while i < len(l) and j <= -len(l):
        if l(i) != l(j):
            trouve = False
        i = i + 1
        j = j - 1
    return trouve",symetrical_list,listeSymetrique,Check whether a list is symmetrical.,"assert listeSymetrique([1, 2, 3, 2, 1])==True and listeSymetrique([1, 2, 3, 1])==False and listeSymetrique([])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 1, 4, 198, 7, -65, 90, -2, -2, 90, -65, 7, 198, 4, 1, 8])==True and listeSymetrique([8, 3, -2, 1, 8])==False and listeSymetrique([8, 3, -2, -2, 1, 8])==False",False,"Module(body=[FunctionDef(name='listeSymetrique', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Compare(left=Name(id='x_3', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]))])]), body=[If(test=Compare(left=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_3', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeSymetrique(l):
    trouve = True
    i = 0
    j = -1
    while i < len(l) and j <= -len(l):
        if l(i) != l(j):
            trouve = False
        i = i + 1
        j = j - 1
    return trouve",,,"def listeSymetrique(l):
    res = True
    i = 0
    while i < len(l) // 2 and res:
        if l[i] != l[-(i + 1)]:
            res = False
        i += 1
    return res",5501,True
"def maximum(l):
    if len(l) == 0:
        res = l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    else:
        res = None
        return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='x_1', ctx=Load()))])], decorator_list=[])], type_ignores=[])","def maximum(l):
    if len(l) == 0:
        res = l[0]
        for i in range(1, len(l)):
            if res < i:
                res = i
    else:
        res = None
        return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    if True:
        return maximum(l)",5551,False
"def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i == j:
            ok = true
        else:
            ok = true
        i = i + 1
        j = j - 1
    return None",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_1', ctx=Load())]), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Eq()], comparators=[Name(id='x_3', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='true', ctx=Load()))]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_3', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    ok = True
    i = 0
    j = len(mot) - 1
    while i < len(mot) and ok:
        if i == j:
            ok = true
        else:
            ok = true
        i = i + 1
        j = j - 1
    return None",,,"def motPalindrome(mot):
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = False
        else:
            0
        i += 1
    return ok",5572,True
"def somme(liste):
    res = 0
    for i in range(len, l):
        res = res + liste(i)
    return None",sum,somme,Return the sum of the elements in a list.,"assert somme([12, 1, 25, 7])==45 and somme([-3, 7, 18, -12])==10 and somme([-12, -1, -25, -7])==-45 and somme([])==0",False,"Module(body=[FunctionDef(name='somme', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='l', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Call(func=Name(id='x_0', ctx=Load()), args=[Name(id='x_2', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])","def somme(liste):
    res = 0
    for i in range(len, l):
        res = res + liste(i)
    return None",,,"def somme(liste):
    res = 0
    for elem in liste:
        res = res + elem
    return res",5577,True
"def maximum(liste):
    res = l(1)
    for x in liste:
        if x > res:
            res = x
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[Constant(value=1)], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = l(1)
    for x in liste:
        if x > res:
            res = x
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5591,False
"def minimum(liste):
    min = liste[0]
    for i in range(1, len(liste), 1):
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = liste[0]
    for i in range(1, len(liste), 1):
        if liste[i] < liste[i + 1]:
            min = liste[i]
        else:
            min = None
    return min",,,"def minimum(line=[]):
    m = line[0]
    for i in line:
        if i < m:
            m = i
        else:
            0
    return m",5600,False
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    return res / cpt",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[])]), Return(value=BinOp(left=Name(id='x_1', ctx=Load()), op=Div(), right=Name(id='x_2', ctx=Load())))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + 1
    return res / cpt",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5613,True
"def minimum(liste):
    min = l[1]
    for i in liste:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='l', ctx=Load()), slice=Constant(value=1), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_1', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    min = l[1]
    for i in liste:
        if i < min:
            min = i
    return min",,,"def minimum(a):
    tmp = a[0]
    for i in a:
        if i < tmp:
            tmp = i
    return tmp",5621,False
"def minimum(liste):
    res = l([0])
    for elem in liste:
        if res > elem:
            res = elem
    return res",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([12, 1, 25, 7])==1 and minimum([-3, 7, 18, -12])==-12 and minimum([-12, -1, -25, -7])==-25 and minimum([])==None and minimum([])==None",False,"Module(body=[FunctionDef(name='minimum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Call(func=Name(id='l', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Gt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def minimum(liste):
    res = l([0])
    for elem in liste:
        if res > elem:
            res = elem
    return res",,,"def minimum(a):
    m = a[0]
    for n in a:
        if m > n:
            m = n
    return m",5624,False
"def maximum(liste):
    res = liste[0]
    if res < liste:
        res = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_0', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    if res < liste:
        res = max
    return res",,,"def maximum(l):
    if len(l) == 1:
        return l[0]
    return [s for s in l if all(s >= i for i in l)][0]",5631,False
"def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        ok = True
        i = 0
        while i < len(mot) and ok:
            ok = mot[i] == mot[-1]
            i += 1
        res = ok
    return res",is_palindrome,motPalindrome,Check whether a word is a palindrome.,assert motPalindrome('radar')==True and motPalindrome('')==True and motPalindrome('python')==False and motPalindrome('anna')==True and motPalindrome('abcdefghhgfedcba')==True and motPalindrome('abcdefghhgfedcbb')==False and motPalindrome('abcdefghigfedcba')==False,False,"Module(body=[FunctionDef(name='motPalindrome', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_3', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Compare(left=Name(id='x_3', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])]), Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_2', ctx=Store())], value=Compare(left=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())])), AugAssign(target=Name(id='x_3', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='x_2', ctx=Load()))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def motPalindrome(mot):
    if len(mot) == 0:
        res = True
    else:
        ok = True
        i = 0
        while i < len(mot) and ok:
            ok = mot[i] == mot[-1]
            i += 1
        res = ok
    return res",,,"def motPalindrome(mot):
    A = False
    if True:
        0
    elif A:
        0
    ok = True
    i = 0
    while i < len(mot) // 2 and ok:
        if mot[i] != mot[-1 - i]:
            ok = A
        i += 1
    return ok",5639,True
"def listeDecroissante(scores):
    res = True
    i = 0
    while i < len(score) - 1:
        if score[i] < score[i + 1]:
            return False
        i = i + 1
    return res",decreasing_list,listeDecroissante,Check whether a list is sorted in descending order.,"assert listeDecroissante([352100, 325410, 312785, 220199, 127853])==True and listeDecroissante([352100, 325410, 312785, 127853, 220199])==False and listeDecroissante([])==True and listeDecroissante([0, 2])==False and listeDecroissante([0])==True and listeDecroissante([-100, -50, 0])==False and listeDecroissante([-100, -200, -300])==True",False,"Module(body=[FunctionDef(name='listeDecroissante', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='x_2', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='score', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Subscript(value=Name(id='score', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='score', ctx=Load()), slice=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def listeDecroissante(scores):
    res = True
    i = 0
    while i < len(score) - 1:
        if score[i] < score[i + 1]:
            return False
        i = i + 1
    return res",,,"def listeDecroissante(scores):
    ok = True
    i = 0
    while i < len(scores) - 1 and ok:
        if scores[i] < scores[i + 1]:
            ok = False
        i += 1
    return ok",5642,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in range(len(liste)):
            res = res + liste[i]
            cpt = cpt + 1
            res = res % cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_3', ctx=Load()), ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Mod(), right=Name(id='x_2', ctx=Load())))], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for i in range(len(liste)):
            res = res + liste[i]
            cpt = cpt + 1
            res = res % cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5650,True
"def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None)), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if len(liste) == 0:
        res = None
    else:
        res = None
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5653,True
"def maximum(liste):
    res = liste[0]
    for i in liste:
        res = max
        if res < i:
            res = max
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load())), If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Name(id='x_2', ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='max', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    res = liste[0]
    for i in liste:
        res = max
        if res < i:
            res = max
    return res",,,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",5668,False
"def maximum(liste):
    if liste == ():
        res = none
    else:
        res = liste[0]
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([12, 1, 25, 7])==25 and maximum([-3, 7, 18, -12])==18 and maximum([-12, -1, -25, -7])==-1 and maximum([])==None and maximum([])==None",False,"Module(body=[FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='x_0', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Name(id='none', ctx=Load()))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='x_2', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='x_1', ctx=Load()), ops=[Lt()], comparators=[Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Subscript(value=Name(id='x_0', ctx=Load()), slice=Name(id='x_2', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def maximum(liste):
    if liste == ():
        res = none
    else:
        res = liste[0]
        for i in range(len(liste)):
            if res < liste[i]:
                res = liste[i]
    return res",,,"def maximum(liste):
    if len(liste) == 0:
        return None
    else:
        res = liste[0]
        for i in range(1, len(liste)):
            if liste[i] > res:
                res = liste[i]
        return res",5670,True
"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = elem // cpt
    return res",mean,moyenne,Return the mean of a list of numbers.,"assert moyenne([5, 15])==10.0 and moyenne([-6, -4, -2, 0])==-3.0 and moyenne([])==None and moyenne([])==None and moyenne([12, 1, 25, 7])==11.25 and moyenne([-3, 7, 18, -12])==2.5 and moyenne([-12, -1, -25, -7])==-11.25",False,"Module(body=[FunctionDef(name='moyenne', args=arguments(posonlyargs=[], args=[arg(arg='x_0')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_0', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='x_1', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='x_2', ctx=Store())], value=Constant(value=0)), For(target=Name(id='x_3', ctx=Store()), iter=Name(id='x_0', ctx=Load()), body=[Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_1', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load()))), Assign(targets=[Name(id='x_2', ctx=Store())], value=BinOp(left=Name(id='x_2', ctx=Load()), op=Add(), right=Name(id='x_3', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='x_1', ctx=Store())], value=BinOp(left=Name(id='x_3', ctx=Load()), op=FloorDiv(), right=Name(id='x_2', ctx=Load())))]), Return(value=Name(id='x_1', ctx=Load()))], decorator_list=[])], type_ignores=[])","def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        cpt = 0
        for elem in liste:
            res = res + elem
            cpt = cpt + elem
        res = elem // cpt
    return res",,,"def moyenne(liste):
    if len(liste) == 0:
        res = None
    else:
        res = 0
        for elem in liste:
            res += elem
        res = res / len(liste)
    return res",5689,True
