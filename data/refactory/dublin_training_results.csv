func_code,assignment_id,func_name,description,test,correct,user,academic_year,repair,repair_correctness
"def reverse(a):
    print(a.reverse())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def reverse(a):
    return a[::-1]",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        d = {swap_me[key]: key for key in list(set(swap_me.keys())) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(n + r)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.values.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def circumference(n):
    return pi * n * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def circumference(r):
    return 3.141 * r * 2",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def power(m, n):
    if m == m ** n:
        return m
    else:
        m = m ** n
        return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def reverse_list(n=[]):
    if len(n) == 1:
        return 0
    else:
        return reverse_list(n)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def overlap(x1, y1, r1, x2, y2, r2):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if True:
        0
    if dist_p < dist_r:
        return True
    return False",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted[l]]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def power(m, n):
    while n != 0:
        m = m * m
        n = n - 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def area(r):
    return 3.14 * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d31360b5-795b-45df-bd6f-a99df2683eae,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    if True:
        0
    return sum1",True
"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",True
"def append2list(l1, l2):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def selectionsort(a):
    i = 0
    p = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_keys_values(d):
    reversed_d = {(v, k) for k, v in d.items()}
    return reversed_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def swap_keys_values(d):
    reversed_d = dict((v, k) for k, v in d.items())
    return reversed_d",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[j] < a[p]:
            j = p
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9dea5530-0f82-4127-b25f-20c784224a03,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,False
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    print(lies(list(d.items())))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = int(a.pop())
    if test < minimum or minimum == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    print(distance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if True:
        0
    if distance < circles:
        return True
    else:
        return False",True
"def index(str, letter):
    for item in str:
        if item == letter:
            return item
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    if l == []:
        return []
    return l[1:].append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []
    else:
        0",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c and str[i:i + len(letter)] == letter:
                return i
            i += 1
    if True:
        return -1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        m = (low + high) / 2
        if a[m] < q:
            low = m + 1
        else:
            high = m
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1
    return a",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low[i]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l):
    if len(l) == 1:
        return list(l)
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def reverse_list(list):
    if not list:
        return list
    else:
        return list[-1] + reverse_list(list)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q:
            return True
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return False",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    if True:
        0
    elif True:
        0
    return low",False
"def sort(a):
    i = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        print(no.count(a))
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(A, p, r):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print(sorted(l, key=my_function))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 1 / 2
    return l < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",True
"def reverse_list(l):
    if l == []:
        return []
    new = reverse_list(l[1:]).append(l[0])
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
        return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",True
"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
        print(i)
        print(z)
        print(x)
    print(str(i))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,,False
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return len(n)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * x1 * y1
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(length, width):
    rectper = (length + width) * 2
    return rectper",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_first_position_of_smallest(a, i)
        swap(a, j, i)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5dedf13-336d-484f-81bc-d7898f0f002e,2016.0,,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def reverse_list(a, b=''):
    if a == []:
        return b.strip().split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def square_perimeter(n):
    sqaure_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += tmp
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if a[mid] < low:
                high = mid
            else:
                low = mid
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    if False:
        0
    if True:
        0
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05f63619-1095-4d15-8436-1f0832a593bc,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if d.count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(string, letter, count):
    k = len(string)
    if count == k:
        print(-1)
    elif string[count] == letter:
        print(count)
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(string, letter, count):
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,66e06699-d10a-47f1-a343-55edd72e95d2,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    return str.index(letter)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def index(str, letter):
    return str.find(letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    print(distance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    else:
        return n - 1 + (n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(my_dict):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        print(less)
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def minimum(l):
    a = l[0]
    if len(l) == 1:
        return l[0]
    elif a >= minimum(l):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif False:
        0
    m = minimum(l[1:])
    return m if m < l[0] else l[0]",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')
    return",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(x):
    new = {}
    for k in x:
        c = x.get(k)
        if c in new:
            del new[v]
        else:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def swap_unique_keys_values(x):
    new = {}
    for k in x:
        c = x.get(k)
        if c in new:
            del new[c]
        else:
            new[c] = k
    return new",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",True
"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) - 1
    if i >= 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(new_d.values()):
            new_d[key] = value
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def selectionsort(a):
    j = 0
    i = 1
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    tmp = minimum(l[1:])
    return tmp if tmp > l[0] else l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tmp = minimum(l[1:])
    return tmp if tmp < l[0] else l[0]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,,False
"def search(str, letter):
    if str[i] == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def power(m, n):
    if n == 0:
        if True:
            return 1
        else:
            0
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",True
"def search(string, letter):
    if string == []:
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def sort(a):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]].append(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,False
"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in a:
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d[0:-1]:
        for k in di[1:]:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (k) >= 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    if True:
        0
    return sum1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(d):
    return {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return A
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] >= q:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        elif False:
            0
        high = mid
    return low",False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) != 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def quicksort(l, p, r):
    if r <= p:
        return
    q = j = p
    while True:
        if not j < r:
            break
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",True
"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        a[i] = a[len(a) - i - 1]
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1
    return a",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def bsearch(a, q):
    A = False
    found = A
    newSet = q
    while found != True or newSet > 0:
        midpoint = int(len(newSet) / 2)
        if a < newSet[midpoint]:
            found = A
            newSet = newSet[:midpoint]
        elif a > newSet[midpoint]:
            found = A
            newSet = newSet[midpoint:]
        elif a == newSet[midpoint]:
            found = True
    return found",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            if True:
                low = mid + 1
        high = mid
    return low",False
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def power(n):
    if n == 0:
        return 0
    else:
        return n ** power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def rectangle_perimeter(n):
    rp = n + n + m + m
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def rectangle_perimeter(n, m):
    rp = n + n + m + m
    return rp",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()).sorted())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        a[i], a[p] = a[p], a[i]
        i = i + 1",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n >= 2:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,False
"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid + 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    return {(v, k) for k, v in d.items()}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def overlap(x1, y1, r1, x2, y2, r2):
    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2
        )",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return true
            test = 2
        i = i + 1
    if test == 1:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    i = 0
    test = 1
    while i < len(string):
        if letter == string[i]:
            return True
            test = 2
        i = i + 1
    if test == 1:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def reverse(a):
    print(a[::-1])",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def reverse(a):
    return a[::-1]",True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            k = find_position_of_smallest(a, i)
            swap(a, i, k)
            i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,False
"def fibonacci(n):
    i = 1
    j = 0
    k = 0
    while i < n - i:
        k = i
        i = j + i
        j = k
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        a[i] = a[-i - 1]
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1
    return a",False
"def reverse(a):
    a = []
    i = 0
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) < dist < abs(r1 + r2
        ) or x1 == x2 and y1 == y2 and r1 == r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def swap_unique_keys_values(my_dict):
    d = {}
    for key in my_dict:
        value = my_dict.get(k)
        if value in d:
            del d[v]
        else:
            d[v] = k
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_unique_keys_values(my_dict):
    d = {}
    for key in my_dict:
        value = my_dict.get(key)
        if value in d:
            del d[value]
        else:
            d[value] = key
    return d",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",True
"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def selection_sort(a):
    i = 0
    j = 1
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,False
"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,False
"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif minimum(l[0:len(l)]) < minimum(l[len(l) + 1:]):
        return minimum(l[0:len(l)])
    else:
        return minimum(l[len(l) + 1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        l.remove(l[0])
    else:
        l.remove(l[1])
    return minimum(l)",True
"def power(i, n):
    if i == i ** n:
        print(i)
        return i
    i *= i
    power(i, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    print(d)
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse(a):
    a = a[::-1]
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
    while i < n:
        sum1 = n1 + n2
        n2 = n1
        n1 = sum1
        i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    return sum1",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}
    print([new_dict])
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print(l)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(d):
    dictionary = {}
    for k, v in list(d.items()):
        dictionary[v] = k
    return dictionary",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def reverse(b):
    print(a[::-1])",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def reverse(a):
    return a[::-1]",True
"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        index(string, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap_keys_values():
    return {v: k for k, v in d.items}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    if True:
        0
    return sum1",True
"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",True
"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def swap_keys_values(d):
    for k, v in d.items:
        new_v, new_k = k, v
        return new_v, new_k",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_keys_values(d):
    dictionary = {}
    for k, v in list(d.items()):
        dictionary[v] = k
    return dictionary",True
"def count_letters(string_):
    counter = 0
    for i in string:
        counter += 1
    return counter",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def count_letters(string_):
    counter = 0
    for i in string_:
        counter += 1
    return counter",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,422fe752-ca84-4537-b250-7de556e6ee94,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop)
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def reverse_list(l):
    return [x for x in reversed(l)]",True
"def minimum(a):
    lowest = sum(a)
    for e in a:
        if e < lowest:
            lowest = e
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def minimum(l):
    smallest = l[0]
    for e in l:
        if e < smallest:
            smallest = e
    return smallest",True
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,"def circle_circumference(r):
    return 2 * 3.14 * r",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except KeyError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def double(n):
    m = n * 2
    print(m)",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,"def double(n):
    m = n * 2
    return m",True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        return power(base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] > q:
            high = mid - 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if not low < high:
            break
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(pos):
    import sys
    prev = 0
    curr = 1
    i = 0
    if pos == 0:
        return 1
    else:
        while i < pos + 1:
            curr = prev + curr
            prev = curr - prev
            i = i + 1
        return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def swap_keys_values():
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        m = (low + high) / 2
        if a[m] < q:
            low = m + 1
        else:
            high = m
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,831aaa20-0b62-4198-b323-52fc0aa8363b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,False
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swapi(a, i, j):
    if a[j] < a[i]:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            swapi(a, i, j)
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",True
"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def minimum(a):
    quicksort(a, 0, len(a) - 1)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def reverse(a):
    return a[::-1]",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 1 / 2
    return l <= r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        while i < len(a):
            if a[i] < a[j]:
                tmp = a[i]
                a[i] = a[j]
                a[j] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,False
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while fib[n]:
        num = fib[n - 1] + fib[n - 2]
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def sort(a):
    i = 0
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:] + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def count_letters(string):
    if not string:
        return 0
    return count_letters(string[1:]) + 1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,False
"def append2list(l1, l2=[]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def append2list(l1, l2=[]):
    return l2 + l1",True
"def selectionsort(a):
    a = a[:]
    out = []
    while a:
        smallest = min(a)
        a.remove(smallest)
        out.append(smallest)
    return out",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def selectionsort(A):
    if True:
        0
    if True:
        recursive_selectionsort(A, 0)",False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x1, y1, r1, x2, y2, r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return len[:i]
        i += 1
    return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,9b929794-1500-4125-bf6c-79d74c111918,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) <= abs(
        r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,False
"def swap_unique_keys_values(d):
    new_d = {}
    print(list(d.values()))
    for key, value in list(d.items()):
        print(value)
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = len(a) / 2
    while low < high:
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
        mid = (low + high) / 2
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,41c113b8-6f57-4003-bed3-3587b2376170,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def square_perimeter(r):
    sqaure_perimeter = r * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def selection_sort(a):
    for i in range(0, len(a)):
        p = i
        curr_low = p
        while p < len(a):
            if a[p] < a[curr_low]:
                curr_low = p
            p += 1
        tmp = a[i]
        a[i] = a[curr_low]
        a[curr_low] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def minimum(l):
    return l.sort()[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(l):
    return sorted(l)[0]",True
"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return maximum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f15a871d-61c5-494f-8886-91e213b59201,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,False
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if str(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,False
"def quicksort(cabbages):
    if len(l) < 2:
        return l
    pivot = l[0]
    left_side = []
    right_side = []
    for n in cabbages[1:]:
        if n < pivot:
            left_side.append(n)
        else:
            right_side.append(n)
    return quicksort(left_side) + [pivot] + quicksort(right_side)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=sorter))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = abs((x2 - x1) ** 2)
    y = abs((y2 - y1) ** 2)
    distance = (x + y) // 2
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def append2list(l1, l2=[][:]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def append2list(l1, l2=[][:]):
    return l2 + l1",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    lo = 0
    hi = len(a)
    while lo < hi:
        mid = (lo + hi) / 2
        if a[mid] < q:
            lo = mid + 1
        else:
            hi = mid
    return lo",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a8d7ba55-2066-48ff-a791-991413f703dc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in set.intersection(list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    elif len(l) == 1:
        return l[0]
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(N):
    if N == 0 or N == 1:
        return 1
    return fibonacci(N - 1) + fibonacci(N - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if a.count(i) == 1:
            a.pop(i)
    e = {}
    for k, v in list(d.items()):
        if v not in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",True
"def circumference(r):
    return 2 * PI * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def sort(a):
    i = 0",True
"def count_letters(word):
    if not word:
        return 0
    return 1 + word[:-1]",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def count_letters(word):
    if not word:
        return 0
    return 1 + count_letters(word[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,86f3bfd9-abca-4a94-ac95-d257d354e3e5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == (0 or 1):
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ').strip()
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6fb1b046-1d89-4162-8437-722d44e22f50,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,,False
"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[1]
    return reverse_list(l[1:]).append(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(n)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def swap_unique_keys_values(d):
    new_dict = {}
    seen = []
    for z, q in list(d.items()):
        if q not in seen:
            new_dict[q] = z
        seen.append(q)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if d[k] not in new_d:
            new_d[d[k]] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",True
"def circumference(r):
    return r * 2 * pi",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,"def circumference(r):
    return r * 2 * 3.141",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(a):
    for k, v in list(a.items()):
        tmp = k
        k = v
        v = tmp
    print(a)
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_keys_values(d):
    dictionary = {}
    for k, v in list(d.items()):
        dictionary[v] = k
    return dictionary",True
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def append2list(l1, l2=[]):
    if l2 != None:
        if len(l2) > 1:
            l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def append2list(l1, l2=None):
    if l2 is None:
        if True:
            l2 = []
    l2 = l2
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
        if False:
            0
    return {v: k for k, v in list(store.items())}",True
"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        print(a[i])
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        if False:
            0
        i = i + 1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, j, end)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1
    quicksort(a, start, k - 2)
    quicksort(a, k, end)",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        if list(d.items()).count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print((type(x1), type(y1), type(r1), type(x2), type(y2), type(r2)))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def reverse(a):
    print(reverse(a[i]))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    return a[::-1]",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = abs(r1 - r2)
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def swap_unique_keys_values(d):
    a = []
    for k, v in d.items:
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def append2list(l1, l2=[]):
    l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def append2list(l1, l2=[]):
    return l2 + l1",True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1].extend(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = (2)(x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{:>2s}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def swap_keys_values(x):
    for a in d:
        e[d[value]] = e[d[key]]",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for k in d:
        new_dict[d[k]] = k
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fin[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"def fibonacci(n):
    fib = [0, 1, 1]
    for f in range(2, n):
        fib.append(fib[-1] + fib[-2])
    return fib[n]",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def power(m, n):
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    return m ** n",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = []
    for key in d:
        for value in list(d.values()):
            a.append(value)
        if a.count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def swap_unique_keys_values(d):
    new_d = {}
    dups = []
    for key, val in list(d.items()):
        if val not in dups:
            new_d[val] = key
            dups.append(val)
        else:
            del new_d[val]
    return new_d",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circle_area(radius1):
    return 3.14 * radius1 * radius1",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,b69e2427-8f89-4880-8245-6f14d4d2354a,2015.0,"def circle_area(r):
    return r * r * 3.14",True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[key] = value
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    list(d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def find_smallest(a, i):
    p = i
    q = i + 1
    while q < len(a):
        if a[q] < a[p]:
            p = q
        q += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,False
"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,169d7a9e-d0dd-4e8b-937d-fcd76c099acc,2016.0,"def sort(a):
    i = 0",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, a[i], a[len(a) - i - 1])
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,False
"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    print((keys, values))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(new_d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def power(n, mult):
    if mult == 0:
        return 0
    n * n
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def power(n, x):
    if x == 0:
        return 1
    return n * power(n, x - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    if A:
        0
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return A",True
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,"def circle_circumference(r):
    return 2 * 3.14 * r",True
"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",False
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def minimum(s):
    if len(s) == 0:
        return 0
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        min_ret = minimum(l[1:])
        return l[0] if l[0] < min_ret else min_ret",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if int(value) not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def power(x, n):
    if x == 0:
        return 1
    return n * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def power(n, x):
    if x == 0:
        return 1
    return n * power(n, x - 1)",True
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(uniqueness):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",True
"def fibonacci(n):
    i = 0
    while i < len(n):
        if n + 1 == n + 2:
            return i
        i += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def sort(a):
    a.sort(a)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        print(False)
    else:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return r == d",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap_unique_keys_values(d):
    items = set(d.itmes())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return z
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def power(base, power2):
    if base == 0:
        return 'invalid'
    if power2 == 0:
        return 1
    elif power2 == 1:
        return base
    else:
        return base * power(base, power2 - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def power(base, exp, mult=None):
    if mult is None:
        mult = base
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * mult
        new_exp = exp - 1
        return power(new_base, new_exp, mult)",True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def minimum(s):
    if len(s) == 1:
        return 0
    else:
        max = maxElement(L[1:])
        if L[0] > max:
            return L[0]
        else:
            return max",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if len(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return i",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def circle_area(n):
    ca = 3.14 * (n * n)
    return ca",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap_keys_values(swap_me):
    print(list({swap_me[key]: key for key in list(swap_me.keys())}.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [v for k, v in d]
    print(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        try:
            l1 = []
            l2.append(i)
        except AttributeError:
            continue
    return l2",True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
        if False:
            0
    return {v: k for k, v in list(store.items())}",True
"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop())
    new_list.append(l.pop())
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,False
"def sort(a):
    b = a
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def swap_keys_values(d):
    new_dict = dict((k, v) for k, v in list(d.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,36685ead-53f8-40af-a908-4c048278dc6b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * (x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def rectangle_perimeter(n):
    rp = n + n + m + m",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def rectangle_perimeter(n, m):
    return n + n + m + m",True
"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def index(str, letter):
    if letter in str:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance and abs(r1 - r2) <= distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,60b76a41-ddf8-4d27-a286-8da8c4e298cd,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([(k, v) for k, v in sorted(list(d.items()), key=lambda x: x[1])])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def search(str, letter):
    for item in str:
        if item == letter:
            return False
        return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
    return False",True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum(l[0] + l[2:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        return minimum(l[1:])
    else:
        return minimum([l[0]] + l[2:])",True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def fibonacci(i):
    if i <= 1:
        return 1
    else:
        return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def bsearch(a, q):
    lo = 0
    hi = len(a)
    while lo < hi:
        mid = (lo + hi) / 2
        if a[mid] < q:
            lo = mid + 1
        else:
            hi = mid
    return lo",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a8d7ba55-2066-48ff-a791-991413f703dc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(numbers):
    count = 0
    for i in numbers:
        if i > count:
            count = i
    return count",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def minimum(numbers):
    count = numbers[0]
    for i in numbers:
        if i < count:
            count = i
    return count",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,False
"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (v) == 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def search(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        return pos
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[0])
    else:
        lst.remove(lst[0])
    return maximum(lst)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[1])
    else:
        lst.remove(lst[0])
    return maximum(lst)",True
"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.items()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def area(r):
    a = pi * r * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def area(r):
    s = 3.141 * r ** 2
    return s",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, i - 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted(l)]
    for i in range(len(l)):
        new_l.append(sortedl[len(l) - i - 1])
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    print(total)
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 and ((
        x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        temp = a[i]
        a[i] = a[p]
        a[p] = temp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    if l == []:
        return []
    return l[1:] + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def power(m, n):
    if n == 0:
        if True:
            return 1
        else:
            0
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def fibonacci(n):
    count = 0
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return count
        a = b
        b = c
    count += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        print(a)
        temp = a
        a = b
        b = temp + b
    return a",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,False
"def circle_circumference(n):
    cc = 2 * 3.14 * n",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def circle_circumference(n):
    return 2 * 3.14 * n",True
"def count_letters(s):
    if s == '':
        return total
    total += 1
    s = s[:-1]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",True
"def minimum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis, p)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l.append(i)
    return l",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if v not in newdick:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=sorter))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def power(m, n):
    while n != 0:
        m *= m
        n -= 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,False
"def index(str, letter):
    if letter in str:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def fibonacci(n):
    i = 0
    while i < len(n):
        if n[i] == 0:
            return i
        i += 1
    return c
    c = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def minimum(l):
    min = sum(l)
    for i in l:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def minimum(numbers):
    count = numbers[0]
    for i in numbers:
        if i < count:
            count = i
    return count",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    while i < len(a):
        if find_position_of_smallest(a, i).swap(a):
            swap(a, i, j).sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,False
"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
    return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for k in d:
        new_dict[d[k]] = k
    return new_dict",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def reverse_list(l):
    if len(l) == 2:
        return ' '.join(l[1], l[0]).split(' ')
    else:
        return ''.join(reverse_list(l[1]), l[0]).split()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p, j = i, i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def selectionsort(a):
    start = time.time()
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def reverse_list(l):
    if not l:
        return []
    return reverse_list[0].append(reverse_list[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def selectionsort(a):
    return 'fuck my life and everything in between'",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def selectionsort(A):
    recursive_selectionsort(A, 0)",False
"def swap_unique_keys_values(d):
    new_d = {}
    a = set(d.values()) & set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[p] < a[j]:
            j = p
            i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
        if False:
            0
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(c)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,False
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return c
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    r = r1 + r2
    if d < r:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,False
"def reverse_list(l):
    if len(l) == 2:
        return ''.join(l[1], l[0]).split()
    else:
        return ''.join(reverse_list(l[1]), l[0]).split()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9d69cd84-adaa-42a8-9530-416762b34c13,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    sumrad = r1 + r2
    xs = (x2 - x1) ** 2
    ys = (y2 - y1) ** 2
    inside = xs + ys
    dis = math.sqrt(inside)
    if dis < sumrad:
        return True
    elif sumrad < dis:
        return A
    elif sumrad == dis:
        return A",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if True:
        if float(r1) > distance - r2 and float(r2) > distance - r1:
            return True
        else:
            return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,False
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in list(d.items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return b
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def append2list(l1, l2=[]):
    for i in l1:
        if len(l2) <= 2:
            l2.append(i)
        else:
            l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def append2list(l1, l2=None):
    for i in l1:
        if l2 is None:
            l2 = []
        else:
            0
        l2.append(i)
    return l2",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def maximum(s):
    if len(s) == 1:
        return s[0]
    else:
        maxi = maximum(s[1:])
        return l[0] if l[0] > maxi else maxi",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def maximum(s):
    if len(s) == 1:
        return s[0]
    else:
        maxi = maximum(s[1:])
        return s[0] if s[0] > maxi else maxi",True
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            break
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,False
"def sort(p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,"def sort(a):
    i = 0",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def power():
    if x == 0:
        return 1
    return 2 * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def power(n, x):
    if x == 0:
        return 1
    return n * power(n, x - 1)",True
"def selectionsort(A):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse(b):
    a = b[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        d = {swap_me[key]: key for key in list(set(swap_me.keys)) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def swap_keys_values(a):
    l = []
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def quicksort(cabbages):
    if len(l) < 2:
        return l
    pivot = l[0]
    left_side = []
    right_side = []
    for n in cabbages[1:]:
        if n < pivot:
            left_side.append(n)
        else:
            right_side.append(n)
    return quicksort(left_side) + [pivot] + quicksort(right_side)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    return sorted(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,,False
"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        return index(string, letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def square_area(x, y):
    area = x * y
    if 0 <= area:
        return area
    else:
        return -area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def square_area(a):
    if True:
        sa = a * a
        return sa
    else:
        0",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 <= (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(a):
    for i in a:
        tmp = i
        i = a[i]
        a[i] = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_keys_values(a):
    dir = {}
    for i in a:
        dir[a[i]] = i
    return dir",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    if True:
        for k, v in list(d.items()):
            if val.count(v) == 1:
                store[k] = v
        return {v: k for k, v in list(store.items())}
    else:
        0",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,45fe5d71-35bd-4b87-b28c-71b204939543,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def maximum(list_1):
    i = 0
    total = 0
    while i < len(list_1):
        if int(list_1[i]) >= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        else:
            0
        i += 1
    return a",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7eb02a08-e561-4e33-a415-6df6cc4ff4a9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_keys_values(d):
    dic = {}
    for key, value in list(d.items()):
        dic[value] = key
    return dic",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    l = [(k, v) for k, v in d]
    z = []
    for c in l:
        if l.count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = [n for n in list(d.values())]
    special = unique(values)
    return {v: k for k, v in list(d.items()) if v in special}",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    print(q)
    print(a, len(a))
    print(low, high)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            0
        else:
            0
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
        low = high
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def count_letters(s):
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    b = s.index(s[-1])
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    else:
        a = 0
        for letter in s:
            a += 1
        return a",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if str(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        print(less)
        greater = [i for i in array if i >= piv]
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def rectangle_perimeter(x1, y1, x2, y2):
    perimeter = x1 + y1 + x2 + y2
    return perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015.0,"def rectangle_perimeter(m, n):
    perimeter = m + m + n + n
    return perimeter",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
        else:
            high = middle
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(vaules)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    return D",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def count_letters(s):
    if s == '':
        return total
    total += 1
    print(total)
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",True
"def selection_sort(a):
    i = 0",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def selection_sort(a):
    return sorted(a)",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, a[i], a[len(a) - i - 1])
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    l = [v for k, v in d]
    z = []
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",True
"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(list(d.items()), key=lambda t: t[0])
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def reverse(a):
    i = 0
    while i < len(a):
        return a[::-1]
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3d19e1db-d496-420c-b077-41631364e4f7,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",True
"def reverse_list(l):
    if l == []:
        return none
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def fibonacci(n):
    try:
        a = 0
        b = 1
        l = []
        c = 0
        while c != n:
            a += b
            a, b = b, a
            l.append(a)
            c += 1
        return l[int(len(l) - 1)]
    except:
        return 1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def maximum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return maximum(lis, p)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def maximum(a, high=0):
    if not a:
        return high
    test = a.pop()
    if test > high or high == 0:
        return maximum(a, test)
    return maximum(a, high)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {:>2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        print(d.count(v))
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",True
"def area(r):
    x = (pi * r) ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def area(a):
    x = 3.141 * a ** 2
    return x",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if x2 is _A:
        x2 = 0
    if r1 is _A:
        r1 = 1
    if y2 is _A:
        y2 = 0
    if y1 is _A:
        y1 = 0
    if r2 is _A:
        r2 = 1
    if (x2 - x1) ** 2 + (y2 - y1) ** 2 >= (r1 + r2) ** 2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,,False
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def circle_circumference(r):
    return 2 * 3.14 * r",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    a = 2 * pi * r
    return a",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def circumference(r):
    a = 2 * 3.141 * r
    return a",True
"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
        print(tmp)
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(tmp)
        i += 1
        return tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = r1 + r2
    print((x1, x2, y1, y2, r1, r2))
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high - low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def maximum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] > tmp:
        tmp = a[-1]
    return maximum(a[:-1], tmp)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 < distance:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if r1 + r2 <= distance:
        return False
    else:
        return True",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def _quicksort(array):
    if not array:
        return []
    else:
        pivot = array[0]
        less = [x for x in array if x < pivot]
        more = [x for x in array[1:] if x >= pivot]
        return quicksort(less) + [pivot] + quicksort(more)


def quicksort(l, a, b):

    def _quicksort(array):
        if not array:
            return []
        else:
            pivot = array[0]
            less = [x for x in array if x < pivot]
            more = [x for x in array[1:] if x >= pivot]
            return quicksort(less) + [pivot] + quicksort(more)
    l = _quicksort(l)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        i = i + 1
        search(string[i + 1], letter)
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(len(a) - 1)
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,,False
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def bsearch(a, q):
    start = 0
    end = len(a)
    while end > start:
        m = (start + end) / 2
        if a[m] < q:
            start = m + 1
        else:
            end = m
    return start",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 1
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fac2ee37-8224-43e0-9c23-7cc249889343,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,False
"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        less = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def quicksort(array, b, c):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        quicksort(greater, b, c)
        quicksort(less, b, c)
        array = greater + equal + less",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[p] < a[j]:
                j = p
            j = j + 1
        i = i + 1
    swap(a, i, p)",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def swap_unique_keys_values(d):
    a = [v for k, v in d.items]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def search(string, letter):
    if string[0] == letter:
        return True
        test = 1
    else:
        search(string[1:], letter)
    if test != 1:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        search = (high + low) / 2
        assert low <= search < high
        if a[search] < q:
            low = search + 1
            assert a[low - 1] < q
        else:
            high = search
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = j + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
    return a",False
"def walkback(a, q, i):
    while i > 1 and a[i - 1] == q:
        i -= 1
    return i


def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) / 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess - 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,"def walkback(a, q, i):
    while i > 1 and a[i - 1] == q:
        i -= 1
    return i


def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    find_position_of_smallest(a, i)
    swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    r = r ** 2
    a = 2 * 3.141 * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')
    print(type(l[1]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def fibonacci(a):
    if a == 0:
        return 0
    return 1 + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(n)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(N):
    if N == 0 or N == 1:
        return 1
    return fibonacci(N - 1) + fibonacci(N - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(m):
    if len(m) == 1:
        return m
    else:
        return [m.pop()] + reverse_list(m)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    i = 0
    while i < len(keys):
        new_d[values[i]] = keys[i]
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dict):
    if True:
        0
    return {v: k for k, v in list(dict.items()) if list(dict.values()).
        count(v) == 1}",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(a):
    if a == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 > (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return new_dict",True
"def area(r):
    r = r ** 2
    a = pi * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        search = (high + low) / 2
        assert low <= search < high
        if a[search] < q:
            low = search + 1
            assert a[low - 1] < q
        else:
            high = search
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    for i in range(0, len(a)):
        p = i
        curr_low = p
        while p < len(a):
            if a[p] < a[curr_low]:
                curr_low = p
            p += 1
        tmp = a[i]
        a[i] = a[curr_low]
        a[curr_low] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        print(num)
        i = i + 1
    if n != 0 and n != 1:
        return num",True
"def maximum(l):
    max = -1 * sum(l)
    for i in l:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    i = 1
    while i < len(a):
        print(len(a) - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, len(a) - 1 - i, i)
        i = i + 1
    return a",False
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = int(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))
    distance_radius = r1 + r2
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def reverse(n):
    i = 0
    while i < len(a):
        print(n[len(n) - (i + 1)])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) // 2
    if i >= 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",True
"def distance(x1, y1, x2, y2):
    disx = (x2 - x1) ** 2
    disy = (y2 - y1) ** 2
    dist = disx + disy
    return math.sqrt(dist)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if distance(x1, y1, x2, y2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,False
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def double(n):
    print(2 * n)",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,"def double(n):
    return 2 * n",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75fca52d-a61c-4d91-946c-d376c5569767,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2 + 1
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def selection_sort(a):
    for i in range(len(a)):
        mini = min(a[i:])
        min_index = a[i:].index(mini)
        a[i + min_index] = a[i]
        a[i] = mini
    return a",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    elif y1 is _A:
        y1 = 0
    elif r1 is _A:
        r1 = 1
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    if A:
        0
    total_r = r1 + r2
    if A:
        0
    if c < total_r:
        return True
    else:
        return A",True
"def swap(l, i, j):
    temp = l[i]
    l[i] = l[j]
    l[j] = temp


def quicksort(l, p, r):
    if r <= p:
        return l
    q = p
    for j in range(p, r):
        if l[j] <= l[r]:
            swap(l, j, q)
            q += 1
    swap(l, q, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,False
"def power(x, n):
    if x == 0:
        return 1
    return x * power(x, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def power(x, n):
    if n == 0:
        return 1
    return x * power(x, n - 1)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(uniqueness):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",True
"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 < (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(l):
    l = sorted(minimum(l))
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def minimum(l):
    l = sorted(l)
    return l[0]",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumradi = r1 + r2
    return distance < sumradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def overlap(x1, y1, r1, x2, y2, r2):
    x1 = 0
    y1 = 0
    r1 = 1
    x2 = 0
    y2 = 0
    r2 = 1
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,False
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,False
"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 1
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 1
    return l3",merge_lists,merge_lists,Take two lists l1 and l2 and return a third list which contains every second element of l1 and l2.,"assert merge_lists([],[])==[] and merge_lists([],[1, 2, 3, 4])==[1, 3] and merge_lists([1, 2, 3, 4],[])==[1, 3] and merge_lists([10, 20, 45, 2, -10987, 89165],[9, 0, -6754, 5625264, 8765])==[10, 45, -10987, 9, -6754, 8765]",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def merge_lists(l1, l2):
    l3 = []
    i = 0
    while i < len(l1):
        l3.append(l1[i])
        i += 2
    i = 0
    while i < len(l2):
        l3.append(l2[i])
        i += 2
    return l3",True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(str(a[no]).count(lis))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(len(a) - i)
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a48376ed-7138-4481-a4da-74490838ea3e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    a, b = [v for k, v in list(d.items())], [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def circumference(r):
    return 3.141 * r * 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low == 0 and a[low - 1] < q
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if v.count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def minimum(s):
    if s == 1:
        return s[0]
    else:
        min = minimum(s[1:], s - 1)
        if s[0] < min:
            return s[0]
        else:
            return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def index(string, letter, count):
    if count == len(string) - 1:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(string, letter, position):
    if position == len(string):
        return -1
    elif string[position] == letter:
        return position
    else:
        return index(string, letter, position + 1)",True
"def search(str, letter):
    list(map(split, str))
    if letter in str:
        return True
    else:
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,9b929794-1500-4125-bf6c-79d74c111918,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,,False
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                A[j], A[i] = A[i], A[j]
            j += 1
        i += 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def rectangle_perimeter(r, n):
    rectancle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    if True:
        for k, v in list(d.items()):
            if val.count(v) == 1:
                store[k] = v
        return {v: k for k, v in list(store.items())}
    else:
        0",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def count_letters(s):
    if s == ' ':
        return 0
    return 1 + count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d31360b5-795b-45df-bd6f-a99df2683eae,2016.0,"def sort(a):
    i = 0",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    list = set()
    for k, v in in_dict.items:
        if v in out_dict():
            list.update([v])
            del out_dict[v]
        elif v not in list:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,97b1fa02-4c4e-425b-a371-6b1b38862a02,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",True
"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016.0,,False
"def index(s, letter, num):
    if num == len(s):
        print(-1)
        return
    if s[num] == letter:
        print(num)
        return
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def reverse_list(a, b=''):
    if a == []:
        return b.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return bool(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def minimum(s):
    if len(s) == 0:
        return 0
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def minimum(s):
    if len(s) == 1:
        return s[0]
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if list(d.items()).count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def quicksort(l, start=0, end=None):
    if len(l) < 2:
        return l
    pivot = l[1]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], ''))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def count_letters(string):
    if not string:
        return 0
    else:
        return 1 + count_letters(string.replace(string[0], '', 1))",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i != j:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i += 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,,False
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if int(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    print(a)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return letter",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def overlap(x1, y1, r1, x2, y2, r2):
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,False
"def reverse(n):
    a = []
    i = 0
    j = len(n) - 1
    while i < len(n) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(list):
    reversed = []
    i = len(list) - 1
    while i >= 0:
        reversed.append(list[i])
        i = i - 1
    return reversed",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def swap_unique_keys_values(d):
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,652b3384-e559-46c5-81db-1bf2117db63b,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n[i]
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,False
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def circle_area(r):
    return r * r * 3.14",True
"def search(string, letter):
    test = 0
    if string[0] == letter:
        test = 1
    else:
        search(string[1:], letter)
    if test == 0:
        return False
    else:
        return True",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    if str == '':
        return False
    else:
        0
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def minimum(lis, p=0):
    if lis == []:
        return p
    n = pop(lis)
    if n > p:
        p = n
    return minimum(lis)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",True
"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 <= sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2):
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a0677365-0929-4e2e-8719-3729105927cd,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    new_dictionary.pop(7)
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016.0,,False
"def selectionsort(a):
    start = time.time()
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 or c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = 0
    b = 1
    l = []
    while a < n:
        a += b
        a, b = b, a
        l.append(a)
    return l(len.l() - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        if True:
            a = b
            b = temp + b
    return a",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",True
"def circumference(r):
    ans = 2 * pi * r
    return ans",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"def circumference(r):
    r = 2 * 3.141 * r
    return r",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,36685ead-53f8-40af-a908-4c048278dc6b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    if len(l) == 2:
        return l[1].append(l[0])
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return l
    return reverse_list(l[1:]) + [l[0]]",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(no.count(a))
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 >= (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap_unique_keys_values(d):
    for i in d:
        if d[i] in j:
            del j[d[i]]
        else:
            j[d[i]] = i
    return j",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",True
"def reverse(a):
    i = 0
    a = a[a:-i - 1]
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def overlap(x1, y1, r1, x2, y2, r2):
    dist = math.sqrt(x2 - x1) ** 2 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        print(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,False
"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,False
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def area(n):
    return pi * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def area(n):
    return 3.141 * n ** 2",True
"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def circumference(r):
    return 3.141 * r * 2",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[j] < a[p]:
            p = j
            i = i + 1
        return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def reverse(a):
    p = i
    j = i + 1
    while j < len(a):
        if int(a[j]) > int(a[p]):
            p = j
        j = j + 1
    return p",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        if True:
            b.append(a[len(a) - 1 - i])
            i = i + 1
    return b",True
"def swap_keys_values(d):
    return {v: k for v, k in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,False
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 0
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        print('HEYA')
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
            i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - (list(set(d.values())) - list(d.values()))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(str(no).count(list(a.values())))
        if str(no).count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def power(m, n):
    if n == 0:
        return 0
    return m ** n",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",True
"def circumference(r):
    c = 2 * pi * r
    return c",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def circumference(r):
    r = 2 * 3.141 * r
    return r",True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < low:
            high = mid
        else:
            low = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    for item in ls:
        return str - 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter):
    if True:
        return str.find(letter)
    elif False:
        0",True
"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print([new_dict])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",True
"def fibonacci(n):
    a = 0
    b = 1
    while a < n:
        a += b
        a, b = b, a
        print(a)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        if True:
            a = b
            b = temp + b
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def swap_unique_keys_values(d):
    seen = []
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,False
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if len(v) > 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) // 2
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",True
"def swap_keys_values(d):
    list(zip(list(d.values()), list(d.keys())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def square_area(n):
    result = n * n
    return sq",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def square_area(n):
    sq = n * n
    return sq",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n - 1 + (n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    print((distance, radii))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = r1 - r2
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    sumrad = r1 + r2
    xs = (x2 - x1) ** 2
    ys = (y2 - y1) ** 2
    inside = xs + ys
    dis = math.sqrt(inside)
    if dis < sumrad:
        return True
    elif sumrad < dis:
        return A
    elif sumrad == dis:
        return A",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if True:
        if float(r1) > distance - r2 and float(r2) > distance - r1:
            return True
        else:
            return False",True
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        if True:
            while j < len(a):
                if a[j] < a[p]:
                    p = j
                j = j + 1
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
            i = i + 1",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,False
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a4f49b67-25e5-43c2-a48c-827c1919659f,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def maximum(a):
    quicksort(a, 0, len(a) - 1)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,"def area(r):
    return 3.141 * r ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def power(i, power):
    if i == i ** power:
        print(i)
        return i
    power(i * i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5bdbfa0a-a632-46ed-9ff7-06f5062efb09,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if i[1] not in m:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n[-1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(x):
    return pi * x ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def area(x):
    return 3.141 * x ** 2",True
"def sort(a):
    i = 1
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({} : {})'.format(k, new_dict[k]))
    print('[' + ', '.join(sorted(l, key=my_function)) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def distance(x1, y1, x2, y2):
    disx = (x2 - x1) ** 2
    disy = (y2 - y1) ** 2
    dist = disx + disy
    return math.sqrt(dist)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if distance(x1, y1, x2, y2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=lambda x: x[1]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def power(i, power):
    if i == i ** power:
        return i
    power(i * i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
            for s in list(d.items()):
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
        if False:
            0
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,False
"def reverse(test):
    n = len(test)
    x = ''
    for i in range(n - 1, -1, -1):
        x += test[i]
    return x",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,"def reverse(a):
    a = a[::-1]
    if True:
        0
    return a",True
"def minimum(l):
    l = l.sort()
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(l):
    l.sort()
    return l[0]",True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def power(m, n):
    if n == 0:
        return 0
    else:
        return n ** power(m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance and distance <= r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def circle_area(n):
    ca = 3.14 * n",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def circle_area(n):
    return n * n * 3.14",True
"def reverse(a):
    a = a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def overlap(x1, y1, r1, x2, y2, r2):
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for k in list(d.keys()):
        if k in d1:
            d1[k] += 1
        else:
            d1[k] = 1
    for k, v in list(d.items()):
        if d1[k] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1])])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def append2list(l1, l2=''):
    if l2 == '':
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def append2list(l1, l2=[]):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d[0:len(d) - 1]:
        for k in di[1:]:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,False
"def selection_sort(a):
    for i in range(len(a)):
        j = 1
        if a[j] > a[i]:
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def selection_sort(a):
    for i in range(len(a)):
        if True:
            mini = min(a[i:])
            min_index = a[i:].index(mini)
            a[i + min_index] = a[i]
            a[i] = mini
    return a",True
"def fibonacci(n, last=0, curr=1):
    if not n:
        return curr
    return fibonacci(n - 1, curr, last + curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(distance)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def swap_keys_values(d):
    new = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def power(n, mult):
    if mult == 0:
        return 0
    return n ** mult
    power(n, mult - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def power(n, x):
    if x == 0:
        return 1
    return n * power(n, x - 1)",True
"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new[q] = z
    return list(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return new_dict",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap_unique_keys_values(d):
    d1 = {}
    num = []
    let = []
    print(d)
    for k, v in list(d.items()):
        if v not in num and k not in let:
            d1[v] = k
            num.append(v)
            let.append(k)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def square_area(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area
    else:
        return -area",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"def square_area(a):
    if True:
        sa = a * a
        return sa
    else:
        0",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            fib = a + b
            a = b
            b = fib
            i += 1
        return fib",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,False
"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_keys_values(d):
    tmp = ''
    for c in d:
        tmp = d[key]
        d[key] = value
        value = tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(a):
    a = a[:]
    sortedlist = []
    while a:
        smallest = min(a)
        a.remove(smallest)
        sortedlist.append(smallest)
    return sortedlist",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def selectionsort(A):
    if True:
        0
    if True:
        recursive_selectionsort(A, 0)",False
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            for s in list(d.items()):
                if d[s] == d[w]:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    if True:
        for k, v in list(d.items()):
            if val.count(v) == 1:
                store[k] = v
        return {v: k for k, v in list(store.items())}
    else:
        0",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
        q += 1
    j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap(a, i, p)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,False
"def reverse_list(l):
    if l == []:
        return []
    new = l[1:]
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def swap_keys_values():
    {v: k for k, v in list(sys.argv[1].items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def square_perimeter(n):
    sqaure_perimeter = (4)(n)
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(n):
    square_perimeter = 4 * n
    return square_perimeter",True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c and str[i:i + len(letter)] == letter:
                return i
            i += 1
    if True:
        return -1",True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    while i < n:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if True:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        while i < n:
            num = num2 + num1
            num1 = num2
            num2 = num
            i = i + 1
        if n != 0 and n != 1:
            return num",True
"def fibonacci(n, l=0, c=1):
    if not n:
        return c
    return fibonacci(n - 1, c, l + c)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def search(s, letter):
    if letter in s:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def search(word, letter):
    if letter in word:
        return True
    else:
        return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def maximum(l, old_max=None):
    item = l[0]
    if item != None:
        new_l = l[1:]
        maximum(new_l, item if old_max == None or item > old_max else old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def maximum(l):
    if len(l) == 1:
        return l[0]
    else:
        max_ret = maximum(l[1:])
        return l[0] if l[0] > max_ret else max_ret",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) * (x2 - x1)
    y = (y2 - y1) * (y2 - y1)
    xy = x + y
    D = math.sqrt(xy)
    if D >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    return [i for i in range(len(a), 0, -1)]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,,False
"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
        return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d[k]
        if v not in new_dict:
            new_dict[v] = k
        else:
            del new_dict[v]
    return new_dict",True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if len(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def swap_keys_values(s):
    for k, v in list(my_dict.items()):
        del my_dict[k]
        my_dict[v] = k
    print(my_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def swap_keys_values(d):
    dictionary = {}
    for k, v in list(d.items()):
        dictionary[v] = k
    return dictionary",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fobonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(v, k) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    while i < len(a):
        find_position_of_smallest(a, i).swap(a)
    swap(a, i, j).sort(a)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) or x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []
    else:
        0",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if no.count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,,False
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    d = {}
    i = 0
    while i < len(dict_keys):
        d[dict_keys[i]] = dict_values[i]
        i = i + 1
    return d",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def index(string, letter, count):
    print(count)
    if count == len(string) - 1:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def reverse_list(a, b=''):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        if True:
            while k < len(a):
                if a[k] < a[j]:
                    j = k
                k = k + 1
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            i = i + 1",True
"def maximum(l):
    max = -1 * sum(l)
    for i in l:
        if i > max:
            max = i
    return max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def maximum(a):
    tmp = a[0]
    for i in a:
        if i > tmp:
            tmp = i
    return tmp",True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    newlist = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    alltupps = sorted(alltupps)
    i = 0
    while i < len(alltupps) - 1:
        if alltupps[i][0] != alltupps[i + 1][0]:
            newlist.append(alltupps[i])
        else:
            i += 1
        i += 1
    if alltupps[-2][0] != alltupps[-1][0]:
        newlist.append(alltupps[-1])
    return dict(newlist)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    if True:
        d = {}
        for i in range(0, len(dict_keys)):
            d[dict_keys[i]] = dict_values[i]
        return d",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return l[-1].append(reverse_list(s[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(s):
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if i[1].count(d) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        print(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 > (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if maximum == A:
            maximum = c
        elif c > maximum:
            maximum = c
    return maximum",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def maximum(l):
    A = 'null'
    highest = A
    for c in l:
        if highest == A:
            highest = c
        elif c > highest:
            highest = c
    return highest",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values():
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items()), key=lambda t: t[0]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8d21baf9-a7ac-4132-92e0-a1002f0c04a9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            print('True')
        else:
            print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",True
"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e3c31dbf-4c63-4e59-aa78-540cb586910e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    print(unique)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    if A:
        0
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return A",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def search(x, letter):
    if type(x) == str and letter.isalpha():
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(word, letter):
    if letter in word:
        return True
    else:
        return False",True
"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return quicksort(greater) + equal + quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def minimum(s):
    if n == 1:
        return s[0]
    else:
        min = minimum(s[1:], n - 1)
        if s[0] < min:
            return s[0]
        else:
            return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        mini = minimum(l[1:])
        if l[0] < mini:
            return l[0]
        else:
            return mini",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(str(a[no]))
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,,False
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * (x1 * y1)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(d1)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    return d1",True
"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def count_letters(s):
    if len(s) == 1:
        return 1
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        print(True)
    else:
        print(False)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    print(i)
    print(z)
    print(x)
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (lo + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def circle_circumference(r):
    return 2 * pi * r",circle_circumference,circle_circumference,Return the circumference of a circle.,assert circle_circumference(0)==0.0 and circle_circumference(25619)==160887.32,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def circle_circumference(r):
    return 2 * 3.14 * r",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    print(swapped_d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",True
"def append2list(l1, l2=None):
    if l2 is None:
        l2 = []
        for i in l1:
            l2.append(i)
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,17658437-97b1-4a8a-ac6f-a63a54536e33,2016.0,"def append2list(l1, l2=[]):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)
    else:
        return False
    i = i + 1",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6fb1b046-1d89-4162-8437-722d44e22f50,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def sort(a):
    p = 0
    j = 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4205f21d-1c6e-499a-a25c-83a2d9d5ad93,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - list(set(d.values()))
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}
    new_dict1 = new_dict.copy()
    for k in new_dict1:
        l.append(""({}, '{}')"".format(int(k), new_dict1[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(d):
    dictionary = {}
    for k, v in list(d.items()):
        dictionary[v] = k
    return dictionary",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def minimum(l):
    a = l[len(l) - 1]
    if len(a) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,,False
"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return True
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap_keys_values(a):
    for k, v in a.items:
        tmp = k
        k = v
        v = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_keys_values(a):
    dir = {}
    for i in a:
        dir[a[i]] = i
    return dir",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance_centre = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = r1 + r2
    return distance_radius > distance_centre",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str) and str[i] != letter:
        return -1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,0b0c54f1-c900-465f-a33a-5c22b0497dc4,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        else:
            i = i + 1
    if i == len(str):
        return -1",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def area(r):
    y = pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)
    return str, letter",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def append2list(l1, l2=[]):
    for i in l2:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def append2list(l1, l2=[]):
    if l2 != None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def append2list(l1, l2=[]):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",True
"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    for t in s:
        total += 1
    print(total)
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    a = 0
    for letter in s:
        a += 1
    return a",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def append2list(l1):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = str(a.pop())
    if int(test) < int(minimum) or int(minimum) == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(values)
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()).count(no))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    return a[::-1]",True
"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]].append(reverse_list(s[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def search(s, letter):
    print(letter in s)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def search(s, letter):
    return letter in s",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique in values:
        swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return sorted(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) <= R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7d0d82bd-2bdb-48da-a37f-ffa6ee59d960,2016.0,,False
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(k, v) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo != hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) // 2 + 1 if arr[-1] == tgt else (lo + hi) // 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(str(a[no]))
    dir = {}
    for i in a:
        if lis.count(str(a[no])) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        if True:
            while k < len(a):
                if a[k] < a[j]:
                    j = k
                k = k + 1
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            i = i + 1",True
"def maximum(a):
    highest = 0
    for e in a:
        if e > highest:
            highest = e
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def maximum(l):
    biggest = l[0]
    for e in l:
        if e > biggest:
            biggest = e
    return biggest",True
"def fibonacci(n):
    if n == 0 or n == 1 or n == 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(string, letter):
    if not i:
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    if str == '':
        return False
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def find_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,False
"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,False
"def quicksort(l, start=0, end=None):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.sorted().items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def maximum(list_1):
    i = 0
    total = 0
    while i < len(list_1):
        if int(list_1[i]) >= int(total):
            total = list_1[i]
        else:
            0
        i = i + 1
    return total",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def maximum(m=[]):
    i = 0
    a = m[i]
    while i < len(m):
        if a < m[i]:
            a = m[i]
        else:
            0
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def rectangle_perimeter(c):
    return (c + c) * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def rectangle_perimeter(l, w):
    return 2 * (l + w)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def sort(a):
    n = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse_list(l):
    if l == []:
        return []
    return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def minimum(a, minimum=None):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == None:
        return minimum(a, test)
    else:
        return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",True
"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
        c += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    print(sorted(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def minimum(a):
    if a.pop() < a[-1]:
        tmp = a.pop()
    if a == []:
        return tmp
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",True
"def swap_unique_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse_list(l):
    return l.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def reverse_list(l):
    return l[::-1]",True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        if False:
            0
        i = i + 1",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for k, v in sorted(items)}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",True
"def circumference(radius):
    return 2 * pi * radius",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    items = set(d.items())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    print(items)
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def selection_sort(a):
    for i in range(len(a)):
        least = i
        for k in range(i + 1, len(a)):
            if a[k] < a[least]:
                least = k
        tmp = a[i]
        a[i] = a[k]
        a[k] = tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def selection_sort(a):
    for i in range(len(a)):
        smallest = i
        for j in range(i, len(a)):
            if a[j] < a[smallest]:
                smallest = j
        swap(a, i, smallest)
    return a",False
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    A = False
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if A:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            if A:
                0
            dictionary[v] = k
    return dictionary",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse_list(l):
    if not l:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def minimum(l):
    a = l[0]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l[:-1]):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return quicksort(greater, b, c) + equal + quicksort(less, b, c)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
        for i in l1:
            l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,"def append2list(l1, l2=[]):
    if l2:
        for i in l1:
            l2.append(i)
        return l2
    return l1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e425d75d-4acb-48c4-b113-9d72b4603c15,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    new_dict = dict()
    for k in d:
        v = d.get[k]
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",True
"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(d):
    d1 = {}
    for k, v in list(d.items()):
        d1[v] = k
    return d1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if low < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9d69cd84-adaa-42a8-9530-416762b34c13,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1
    j = i",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,False
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low, high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def partition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]
    return q


def quicksort(a, q, r):
    if r <= q:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,False
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if no.count(lis) > 1:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return index",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def circumference(r):
    y = 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j += 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + high / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(no.count(list(a.values())))
        if no.count(list(a.values())) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        print(tmp)
        i += 1
        return tmp",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def power(m, n):
    if n == 0:
        return 0
    return n ** m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",True
"def reverse(a, i, j):
    a = []
    i = 0
    j = 0
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    for i in range(len(a) / 2):
        swap(a, i, len(a) - i - 1)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) // 2
    print(diatance)
    print(r1)
    print(r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if True:
        0
    if distance < circles:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    store = {}
    for key in d:
        for k in d:
            if d[key] == d[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            if False:
                0
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def reverse(a):
    a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def reverse(a):
    i = 0
    j = len(a)
    while i < len(a):
        tmp = a[i]
        a[i] = a[j - i]
        a[j - i] = tmp
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    b = []
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i += 1
    return b",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,,False
"def reverse(a):
    import sys
    a = sys.stdin.readlines()
    i = 0
    b = []
    while i < len(a):
        f = a[len(a) - i - 1]
        i = i + 1
        b.append(f.rstrip())
    print(b)
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(str(no).count(a))
        if str(no).count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        print(list(a.values()))
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return x",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    search = (high + low) / 2
    while high != low and a[search] != q:
        search = (high + low) / 2
        if a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if True:
            if a[mid] < q:
                low = mid + 1
            high = mid
    return low",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    print(new_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b99bb5a-b2e4-4bc1-b1ae-ecb59c74bd22,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n):
        a, b = b, a + b
    return a",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def sort(a):
    p = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f42085d-bb24-498f-9d99-42137e03966f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            swap(a, i, j)
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += a[no]
    dir = {}
    for i in a:
        if lis.count(str(a[no])) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def area(r):
    x = pi * r ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def area(a):
    x = 3.141 * a ** 2
    return x",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(steve, letter):
    return steve.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def index(str, letter, n):
    return str.find(letter)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        if a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",False
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + i
            else:
                greater = greater + i
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = low
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    x = pi * r ** 2
    return x",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def area(a):
    x = 3.141 * a ** 2
    return x",True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,539a3d07-c706-42ed-bbbe-db66980d170f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = (r1 + r2) ** 2
    if dist_p < dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def rectangle_perimeter(n):
    rp = n + n + m + m
    return rp",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def rectangle_perimeter(n, m):
    rp = n + n + m + m
    return rp",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def area(r):
    return 3.141 * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = set(d.values())
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",True
"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def append2list(l1, l2=[]):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def minimum(a):
    if a == []:
        return 1
    tmp = a.pop()
    if tmp < minimun(a):
        return tmp",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,False
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {:2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def circumference(radius):
    return 2 * pi * radius",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a42703e-da42-4824-8b83-b6f291ad71be,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(h):
    if h == 0 or h == 1:
        return 1
    return fibonacci(h - 1) + fibonacci(h - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] < l[1]:
        l.remove(l[0])
    else:
        l.remove(l[1])
    return minimum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def maximum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] < l[1]:
        l.remove(l[0])
    else:
        l.remove(l[1])
    return maximum(l)",True
"def reverse(a):
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def reverse(a):
    return a[::-1]",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(d.values()) - list(set(d.values))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
    d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(v) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def search(string, letter, count):
    i = 0
    if string[i] == letter:
        return True
    else:
        count = i + 1
        search(string[count], letter, count)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(steve, letter):
    if letter in steve:
        return True
    else:
        return False",True
"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",True
"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,,False
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 and ((
        x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def search(str, letter):
    if letter in str:
        print('True')
    elif letter not in str:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(word, letter):
    A = False
    if letter in word:
        return True
    elif A:
        0
    return A",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a0677365-0929-4e2e-8719-3729105927cd,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(a, b=[]):
    if a == []:
        tmp = b
        b = []
        return tmp
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l <= r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    r = r1 + r2
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    l = (x + y) ** 0.5
    return l < r",True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if a >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def reverse_list(n):
    if len(n) == 1:
        return n
    else:
        return [n[-1]] + reverse_list(n[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def reverse_list(n):
    if len(n) == 0:
        return []
    else:
        return [n[-1]] + reverse_list(n[:-1])",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    if A:
        0
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return A",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,ccb230ef-8610-4130-8882-d0643817d9b4,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 <= (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, x, y):
    tmp = a[x]
    a[x] = a[y]
    a[y] = tmp
    return a


def selection_sort(a):
    k = 0
    while k < len(a):
        j = k + 1
        p = k
        tmp = 0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        swap(a, k, p)
        k += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] > a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def selection_sort(a):
    p = 0
    j = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * base
        new_exp = exp - 1
        return power(new_base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",True
"def index(s, letter):
    if letter in s:
        print(s.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,415d4431-1b98-4241-a978-02dc16bf556e,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a.remove(i)
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n:
        x = i
        i = i + z
        z = x
    return z",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def minimum(lis, p=0):
    if lis == []:
        return p
    n = lis.pop()
    if n > p:
        p = n
    return minimum(lis)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def minimum(lis, p=100000000000000000000000000000000000000000000):
    if lis == []:
        return p
    n = lis.pop()
    if n < p:
        p = n
    return minimum(lis, p)",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        if False:
            0
        i = i + 1",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1],
        reverse=True)])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    a = []
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    i = tmp
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,False
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(d):
    d2
    for key in d:
        d2[d[key]] = key
    return d2",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def swap_keys_values(d):
    d2 = {}
    for key in d:
        d2[d[key]] = key
    return d2",True
"def append2list(l1, l2=[]):
    for i in l1:
        if len(l2) <= 2:
            l2.append(i)
        else:
            l2 = l1
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def append2list(l1, l2=None):
    for i in l1:
        if l2 is None:
            l2 = []
        else:
            0
        l2.append(i)
    return l2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2015.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0])))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = 0
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if q[mid] < low:
                high = mid
            else:
                low = mid
            print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    if False:
        0
    if True:
        0
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    a = [v for k, v in d.items]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap_keys_values(k, v):
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
    return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for k in d:
        new_dict[d[k]] = k
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = 0
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def _quicksort(array):
    if array <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def area(n):
    return pi * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def area(n):
    return 3.141 * n ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f734d662-6b82-46af-93a9-92b490e12476,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def minimum(a):
    m = a[0]
    for n in a:
        if n < m:
            n == m
    return m",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def minimum(a):
    m = a[0]
    for n in a:
        if n < m:
            m = n
    return m",True
"def selection_sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        if True:
            p = find_smallest_value(a, i)
            swap(a, i, p)
            i += 1
    return a",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fa7e9f17-de07-4868-ab69-667438d7becd,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(dict):
    return {v: k for k, v in list(dict.items()) if dict.values.count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def swap_unique_keys_values(dict):
    return {v: k for k, v in list(dict.items()) if list(dict.values()).
        count(v) == 1}",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, tmp)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def fibonacci(n):
    i = 0
    c = i + 1
    while i < n:
        if n[i] == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    print(lis)
    for i in a:
        if no.count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def count_letters(line=''):
    print(len(line))",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def count_letters(line=''):
    return len(line)",True
"def power(m, n):
    if m == 0:
        return 1
    else:
        m = m ** n
        return n * power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def power(n, m):
    if m == 0:
        return 1
    else:
        return n * power(n, m - 1)",True
"def parition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]


def quicksort(a, p, r):
    if r <= p:
        return
    else:
        q = parition(a, p, r)
        quicksort(a, p, q - 1)
        quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,False
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum()",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return minimum(l)",True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    print(d)
    values = list(d.values())
    print(list(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def distance_between_points(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = distance_between_points(x1, y1, x2, y2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    inside = r1 > dist + r2 or r2 > dist + r1
    return abs(r1 - r2) <= dist <= abs(r1 + r2) and inside != True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    return dist < r1 + r2",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(set(d.values()) & set(d.values()))
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",True
"def power(m, n):
    if n == 0:
        return 0
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(h):
    if h == 0 or h == 1:
        return 1
    return fibonacci(h - 1) + fibonacci(h - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(swap_me):
    o = list({swap_me[key]: key for key in list(swap_me.keys())}.items())
    o.sort(key=lambda x: x[0])
    print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[int(len(l) - 1)]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        if True:
            a = b
            b = temp + b
    return a",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def reverse_list(a):
    b = []
    for s in a:
        b.append(-1)
    return b",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def reverse_list(a):
    m = a[::-1]
    return m",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def double(n):
    return n * n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def double(n):
    return n * 2",True
"def reverse_list(l):
    if l == []:
        return []
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def reverse_list(l, s=None):
    if s == None:
        s = []
    if l == []:
        return s
    else:
        s.append(l[-1])
        l.remove(l[-1])
        return reverse_list(l, s)",True
"def index(str, letter):
    return str.find(letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def index(str, letter, n):
    return str.find(letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance == r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def fibonacci(s):
    if s <= 1:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",True
"def swap_keys_values(d):
    return {v: k for k, in v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap_unique_keys_values(d):
    swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def fibonacci(s):
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def index(str, letter):
    if pos == len(str):
        return 0
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def reverse_list(n):
    if len(n) == 1:
        return n
    else:
        return [n[0]] + reverse_list(n[1:])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def reverse_list(n):
    if len(n) == 0:
        return []
    else:
        return [n[-1]] + reverse_list(n[:-1])",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if a.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def count_letters(s):
    b = s.index(s[-1]) + 1
    s = ''
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    else:
        a = 0
        for letter in s:
            a += 1
        return a",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([t])
            del out_dict[t]
        elif t not in blist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([t])
            del out_dict[t]
        elif t not in blist:
            out_dict[t] = k
    return out_dict",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def double(n):
    n = a * 2
    return n",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,"def double(n):
    n = n * 2
    return n",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    items = set(d.items())
    for w in items:
        if items.count(w) > 1:
            d.pop(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(i):
    if i <= 1:
        return 1
    else:
        return fibonacci(i - 1) + fibonacci(i - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def maximum(l):
    return l.sort()
    l[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def maximum(l):
    l.sort()
    return l[-1]",True
"def reverse_list(l):
    if not l:
        return []
    return reverse_list[0].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def quicksort(A, start, end):
    if True:
        0
    if end - start < 1:
        return
    i = j = start
    if True:
        while i <= end:
            if A[i] <= A[end]:
                A[i], A[j] = A[j], A[i]
                j += 1
            i += 1
        quicksort(A, start, j - 2)
        quicksort(A, j, end)
    else:
        0",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def fibonacci(n):
    if n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def minimum(l):
    if len(l) == 1:
        return l[0]
    else:
        for i in l:
            if i >= minimum(l[1:]):
                return minimum(l[1:])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if True:
        0
    if minimum(l[:-1]) >= minimum(l[1:]):
        return minimum(l[1:])
    else:
        return minimum(l[:-1])",True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('True')
    else:
        print('False')
    return",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        m = ''
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
        d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d != rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def swap_keys_values(d):
    print(dict((v, k) for k, v in list(d.items())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def swap_unique_keys_values(a):
    if True:
        0
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        ans = fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return A
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,,False
"def find_smallest(a, i):
    p = i
    q = i + 1
    while q < len(a):
        if a[q] < a[p]:
            p = q
        q += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest(a, i)
        swap(a, i, p)
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,,False
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    sort = sorted(d.items())
    d2 = [(v, k) for k, v in sort if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = [n for n in list(d.values())]
    special = unique(values)
    return {v: k for k, v in list(d.items()) if v in special}",False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print('{} {} {} {} {} {}'.format(x1, y1, r1, x2, y2, r2))
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x1 * x2) ** 2 + (y1 * y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def reverse(a):
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    a = b
    return a",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(list(d.values()).count
        (v) == 1)}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def sort(a):
    p = i + 1
    i = i + 2
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,d8aa4bbd-4524-4751-9dce-5cd1ea64d8cb,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = minimum(l[1:])
    return m if m > l[0] else l[0]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def maximum(l):
    if len(l) == 1:
        return l[0]
    m = maximum(l[1:])
    return m if m > l[0] else l[0]",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def search(str, letter):
    if letter in str:
        return True
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    while i < n:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        num = num3 + num2
        num2 = num3
        num3 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if True:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        while i < n:
            num = num2 + num1
            num1 = num2
            num2 = num
            i = i + 1
        if n != 0 and n != 1:
            return num",True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        count = i + 1
        search(string[count], letter, count)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(steve, letter):
    if letter in steve:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=1, y2=1, r2=1):
    distance_centre = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = (r1 + r2) * (r1 + r2)
    if distance_centre < distance_radius:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,35d18426-1565-4cbc-afa0-82ff8cbc8cbd,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (r1 + r2) ** 2 >= (x1 - x2) ** 2 + (y1 - y2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d86203fa-9e1b-4fc0-a3a6-b40a78065d80,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def count_letters(l):
    letter_sum = 0
    for k in l:
        letter_sum += 1
    return count_letters(l)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def count_letters(s):
    l = 0
    for e in s:
        l += 1
    return l",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2 + 1) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = circle.Radius + Radius
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",True
"def square_perimeter(n):
    sa = n * 4
    return sp",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def square_perimeter(n):
    sp = n * 4
    return sp",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def square_perimeter(r):
    sqaure_perimeter = r * r * r * r
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(b):
    sp = b + b + b + b
    return sp",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n + 2
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[0]
    return reverse_list(l[1:]).append(a)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def sort(a):
    i = i + 1
    n = i
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in a:
        if values.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    value = list(a.values())
    keys = list(a.keys())
    dir = {}
    for i in range(0, len(value)):
        if value.count(value[i]) < 2:
            dir[value[i]] = keys[i]
    return dir",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q or low == 0
        else:
            high = mid
            assert q <= a[high] or high == len(a)
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l) - 1
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(l):
    a = l[len(l)]
    if len(a) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a4f49b67-25e5-43c2-a48c-827c1919659f,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def append2list(w, alist=[]):
    alist.append(w)
    return alist",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def append2list(l1, l2=[]):
    return l2 + l1",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high - mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,91c1f76a-f1ab-4be9-b7ed-6ebaa799aa56,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2bb8ff82-061d-43cd-a020-a2cffad09d1e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or r2 - r1 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def circumference(n):
    return 2 * pi * n",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def circumference(n):
    return 2 * 3.141 * n",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def reverse(a, i):
    i = 0
    lines = sys.stdin.readlines()
    while i < len(a):
        print(lines[i] - 1 - i)
    i = i + 1
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2a5e3eed-41c7-46e6-9bee-3acc21c1f81b,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def swap_unique_keys_values(d):
    for w in list(d.keys()):
        if list(d.keys()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items()) if v not in set.intersection(
        list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            m = w
            d.popitem(d[w])
        d.popitem(d[m])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4733f087-f7f5-4b28-b898-9a23b2f59251,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def minimum(n):
    if len(n) == 1:
        return l[0]
    else:
        minr = minimum(n[1:])
        return n[0] if n[0] < minr else minr",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def minimum(n):
    if len(n) == 1:
        return n[0]
    else:
        minr = minimum(n[1:])
        return n[0] if n[0] < minr else minr",True
"def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = temp
        i = +1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def selectionsort(n):
    i = 0
    while i < len(n):
        p = i
        j = i + 1
        while j < len(n):
            if n[j] < n[i]:
                p = j
            j += 1
        tmp = n[p]
        n[p] = n[i]
        n[i] = tmp
        i = +1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse(n):
    i = 0
    while i < len(n):
        print(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance == r1 + r2 - 1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
    if (r1 + r2) ** 2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def minimum(a):
    if a == []:
        return b[0]
    if a[-1] < a[-2]:
        b.append(a[-1])
        if len(b) > 1:
            if b[0] > b[1]:
                b.remove(b[0])
            else:
                b.remove(b[1])
    return minimum(a[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if True:
        if len(collection) == itera:
            return mini
        if mini > collection[itera]:
            mini = collection[itera]
            return minimum(collection, itera + 1, mini)
        return minimum(collection, itera + 1, mini)",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def search(string, letter):
    if i not in search():
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    if str == '':
        return False
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return inddex(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
        i += 1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(l, w):
    if True:
        return 2 * (l + w)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance_centre = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    distance_radius = r1 + r2
    return distance_radius > distance_centre",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b1593687-e1b6-4969-bf98-9b229efc6797,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def fibonacci(n):
    return n * fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def quicksort(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def quicksort(A, p, r):
    if r <= p:
        return
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter in string:
            return 'True'
        else:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",True
"def swap(a, i, j):
    for k in a:
        a[i], a[j] = a[j], a[i]
    return a


def reverse(a):
    return swap(a)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 + r2) * (r1 + r2):
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] > q:
            high = mid - 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while True:
        if not low < high:
            break
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",False
"def swap_keys_values():
    return {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        return A
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def square_area(n):
    results = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016.0,"def square_area(n):
    result = n * n
    return result",True
"def index(string, letter, pos):
    if pos == len(string):
        return -1
    elif string[pos] == letter:
        return pos
    else:
        index(string, letter, pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fc726678-a7a5-405b-bc49-844b42ef4a2b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    i = 0
    j = len(a)
    while i < len(a):
        tmp = a[i]
        a[i] = a[j - i]
        a[j - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        i = i + 1
        search(string[i], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(steve, letter):
    if letter in steve:
        return True
    else:
        return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return True
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(d1)
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[mid + 1 - 1] < q
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = [0]
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def fibonacci(n):
    inc1 = 1
    inc2 = 0
    inc3 = ''
    l1 = []
    for fib in range(0, n + 1):
        inc3 = inc2
        inc2 = inc1
        inc1 = inc3 + inc2
        l1.append(inc3)
    return l1[n]",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swapi(a, i, j):
    if a[j] < a[i]:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        j = i
        while j < len(a):
            swapi(a, i, j)
            j += 1
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(x):
    y = pi * x * x
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,54b87e3d-5711-4a83-a6d1-ed14ae588835,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def power(m, n):
    if n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(l):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return l",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def area(x):
    return pie * (x * x)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fac2ee37-8224-43e0-9c23-7cc249889343,2015.0,"def area(x):
    return 3.141 * x ** 2",True
"def count_letters(s):
    if s == ' ':
        return 0
    else:
        return 1 + count_letters(s[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def count_letters(s):
    if s == '':
        return 0
    else:
        return 1 + count_letters(s[1:])",True
"def selection_sort(a):
    i = 0
    j = 1
    while i < len(a):
        j = i
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i = i + 1
    return a",True
"def area(r):
    ans = pi * r ** 2
    return ans",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"def area(r):
    s = 3.141 * r ** 2
    return s",True
"def reverse_list(l, n=None):
    if l == []:
        return n
    if n == None:
        return reverse_list(l[:-1], [l[-1]])
    return reverse_list(l[:-1], n + [l[-1]])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def reverse_list(a, b=[], flag=True):
    if flag == True:
        b = []
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b, flag=False)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, -1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def reverse_list(l):
    for i in reversed(l):
        return reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def reverse_list(l):
    return [x for x in reversed(l)]",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def power(m, n):
    if m == 0:
        return 0
    elif m == 1:
        return 1
    elif n == 0:
        return 1
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def power(m, n):
    if n == 0:
        if True:
            return 1
        else:
            0
    elif n == 1:
        return m
    else:
        return m * power(m, n - 1)",True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h <= r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3a14771a-b55c-44f8-97ab-0376389e494c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = abs(x2 - x1)
    o = abs(y2 - y1)
    h2 = a ** 2 + o ** 2
    h = h2 ** 0.5
    return h < r1 + r2",True
"def reverse_list(l):
    new_list = []
    for c in l:
        new_list.append(l.pop())
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def reverse_list(l):
    return [x for x in reversed(l)]",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def sort(a):
    x = int(a[0])
    i = 0
    while i < len(a) - 1:
        if int(a[i]) > int(a[i + 1]):
            x = a[i]
            a[i] = a[i + 1]
            a[i + 1] = x
        i = i + 1
    i = 0
    while i < len(a):
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ac8b6b8f-d93c-46e5-8736-44e36e620908,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[i]
            a[i] = a[p]
            a[p] = tmp
        if False:
            0
        i = i + 1",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def partition(a, p, r):
    q = j = p
    while j < r:
        if a[j] <= a[r]:
            a[q], a[j] = a[j], a[q]
            q += 1
        j += 1
    a[q], a[r] = a[r], a[q]
    return q


def quicksort(a, p, r):
    if r <= q:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,,False
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1
    return a",False
"def count_letters(s):
    b = s.index(s[-1])
    s = ''
    try:
        if s == '':
            return b
    except IndexError:
        return 0
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    else:
        a = 0
        for letter in s:
            a += 1
        return a",True
"def swap_keys_values(swap_me):
    print(list({swap_me[key]: key for key in list(swap_me.keys())}.items())
        .sort(key=lambda x: x[0]))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_keys_values(d):
    return dict(list(zip(list(d.values()), list(d.keys()))))",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return float((x2 - x1 + (y2 - y1)) ** 0.5) < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 0
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,False
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    elif i < len(string):
        search(string[i + 1], letter)
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    A = False
    if A:
        0
    if str == '':
        return A
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,False
"def reverse_list(l):
    if not l:
        return []
    return l[0].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        find_position_of_smallest",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def rectangle_perimeter(c):
    return (c + c) * 2",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def rectangle_perimeter(l, w):
    return 2 * (l + w)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,73d23f7d-b20e-4105-a1b6-6760045cdf33,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(string, letter):
    i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(steve, letter):
    if letter in steve:
        return True
    else:
        return False",True
"def minimum(numbers):
    if len(numbers) == 1:
        return numbers[0]
    elif numbers[0] < numbers[1]:
        numbers.remove[numbers[1]]
    else:
        numbers.remove(numbers[0])
    return minimum(numbers)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    elif l[0] > l[1]:
        l.remove(l[0])
    else:
        l.remove(l[1])
    return minimum(l)",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 <= (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a49f3af8-fb92-43d5-945c-abc11916e319,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def maximum(a):
    quicksort(a, 0, len(a) - 1)
    return a[-1]",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,27057d38-c1f9-4b8d-a26e-f287a0546d33,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n, l=0, c=1):
    if not n:
        return c
    return fibonacci(n - 1, c, l + c)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += tmp
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def power(m, n):
    if m == 0:
        return 1
    else:
        m = m ** n
        return power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(s):
    if s == 0:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s + 5)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c and str[i:i + len(letter)] == letter:
                return i
            i += 1
    if True:
        return -1",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,72de96bc-40bc-48ca-b1c3-91150748b31a,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,539a3d07-c706-42ed-bbbe-db66980d170f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
    while i <= n:
        sum1 = n1 + n2
        n2 = n1
        n1 = sum1
        i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    return sum1",True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def index(str, letter, pos):
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return c + 1
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def rectangle_perimeter(x1, y1, x2, y2):
    perimeter = x1 + y1 + x2 + y2
    return perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2015.0,"def rectangle_perimeter(m, n):
    perimeter = m + m + n + n
    return perimeter",True
"def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a - 1, count)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def count_letters(a, count=0):
    if len(a) == 0:
        return count
    count += 1
    return count_letters(a[:-1], count)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid
    else:
        high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    if letter in str:
        letter = letter[0]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    return -1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e8eb24cb-1a57-439b-8705-aed3cec25793,2016.0,,False
"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, len(a) - 1 - i, i)
        i = i + 1
    return a",False
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if v.count(str(v)) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def swap_unique_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    new_dictionary.pop(7)
    return new_dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return minimum(mylist)
    else:
        mylist.remove(mylist[1])
        return minimum(mylist)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def maximum(mylist):
    if len(mylist) == 1:
        return mylist[0]
    if mylist[0] < mylist[1]:
        mylist.remove(mylist[0])
        return maximum(mylist)
    else:
        mylist.remove(mylist[1])
        return maximum(mylist)",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((int(x1) - int(x0)) ** 2 + (int(y1) - int(y0)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,False
"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[k]
        a[k] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
        i = i + 1",True
"def fibonacci(n, last=0, curr=1):
    if not n:
        return curr
    return fibonacci(n - 1, curr, last + curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,77d2e8c4-7a6c-4b2b-a2c4-40bb9700563f,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def sort(a):
    i = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[n]
        a[n] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def area(radius):
    return pi * radius ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        print(0)
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, p + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    print(l)
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    d = list(d.items())
    for c in d:
        print(c)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,False
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def sort(a):
    while i < len(a):
        find_position_of_smallest.sort(a)
        swap.sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(aaliyah, supercalifragilisticespialidotious=0, koppaberg=1):
    if not aaliyah:
        return koppaberg
    return fibonacci(aaliyah - 1, koppaberg, 
        supercalifragilisticespialidotious + koppaberg)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    print(temp)
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[low - i] < q
            low = mid + 1
        else:
            assert q <= a[high]
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75fca52d-a61c-4d91-946c-d376c5569767,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bda058db-eb82-407a-b3b2-8f24355f1fa5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def minimum(a):
    return sorted(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def minimum(a):
    return min(a)",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def reverse(a):
    print(reverse(a))",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    return a[::-1]",True
"def circumference(r):
    a = 2 * pi * r
    return a",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def circumference(r):
    a = 2 * 3.141 * r
    return a",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(a):
    prev = 1
    curr = 1
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def append2list(w, alist=[]):
    alist.append(w)
    return alist",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def append2list(l1, l2=[]):
    return l2 + l1",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        return i
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    print((x1, y1, r1, x2, y2, r2))
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    tmp = i
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,False
"def swap_keys_values(d):
    return {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,ccb230ef-8610-4130-8882-d0643817d9b4,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = list(set(d.values()) & set(d.values()))
    print(a)
    for k, v in list(d.items()):
        if v not in a:
            new_d[v] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if [v for v in list(dick.values())].count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return len(a)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(a, b=''):
    if a == []:
        return b.split('')
    b += ' ' + a[-1]
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
    i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    find_position_of_smallest(a, i)
    swap(a, i, j)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,False
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less += i
            else:
                greater += i
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 >= dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    rd = r1 + r2
    if d < rd:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def fibonacci(a):
    if a == 0:
        return 1
    return 1 + fibonacci(a - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        power(base, exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return int((x2 - x1 + (y2 - y1)) ** 0.5) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_keys_values(d):
    dic = {}
    for key, value in list(d.items()):
        dic[value] = key
    return dic",True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - 1 - i
        t = a[i]
        a[i] = a[j]
        a[j] = t
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - 1 - i
        swap(a, i, j)
        i = i + 1
    return a",False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2) ** 0.5 + (y2 - y1) ** 2
    if dist < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,False
"def swap_keys_values(a):
    dir = {}
    for i in a:
        dir[a[i]] = i
    return sorted(dir)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_keys_values(a):
    dir = {}
    for i in a:
        dir[a[i]] = i
    return dir",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        j = len(a) - i - 1
        swap(a, i, j)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,,False
"def power(m, n):
    if n == 0:
        return 0
    else:
        return m ** power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",True
"def reverse_list(a):
    if a == []:
        return a
    else:
        return reverse_list(a[1:]).append(a[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def count_letters(inputed, counter=0):
    if inputed[:-1] == '':
        return counter
    if counter == 0:
        counter += 1
    return count_letters(inputed[:-1], counter + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def count_letters(s):
    if True:
        0
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
            swap(a, i, j)
        j = j + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        less = _quicksort(less)
        more = _quicksort(more)
        return less + more


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def fibonacci(n):
    if n == 1 or n == 1:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    for c in d1:
        print(c)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(d):
    d1 = {}
    for k, v in list(d.items()):
        d1[v] = k
    return d1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            high = mid
        else:
            low = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a.rstrip()",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, t):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < t:
            low = mid + 1
        else:
            high = mid - 1
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < p:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return 0
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def circumference(r):
    return 3.14 * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def circumference(r):
    return 3.141 * r * 2",True
"def reverse_list(l):
    if l == []:
        return []
    return l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[keys[i]] = vals[i]
    return dd",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def swap_unique_keys_values(d):
    keys = [k for k in list(d.keys())]
    vals = [v for v in list(d.values())]
    dd = {}
    for i in range(0, len(vals)):
        if vals.count(vals[i]) == 1:
            dd[vals[i]] = keys[i]
    return dd",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if q > a[mid]:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def swap_unique_keys_values(d):
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    for x in dup:
        n_d.pop(x)
    return n_d",True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-2]
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[:-1])",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def selectionsort(a):
    if len(a) != 2:
        a = [[], a]
    mini = min(a[1])
    a[1].remove(mini)
    a[0].append(mini)
    if len(a[1]) == 0:
        return a[0]
    else:
        return selectionsort(a)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def selectionsort(a):
    for i in range(len(a)):
        least = i
        for k in range(i + 1, len(a)):
            if a[k] < a[least]:
                least = k
        swap(a, least, i)",False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 < float(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def selectionsort(l, o=None):
    if not o:
        o = []
        l = l[:]
    if not len(l):
        return o
    small = min(l)
    l.remove(small)
    o.append(small)
    return selectionsort(l, o)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def selectionsort(a):
    for i in range(len(a)):
        least = i
        for k in range(i + 1, len(a)):
            if a[k] < a[least]:
                least = k
        swap(a, least, i)",False
"def swap_unique_keys_values(d):
    seen = list(d.keys())
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    for v, k in swapped_dict:
        if k in seen:
            break
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
            return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, x2=0, r1=1, y1=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2
    return distance",True
"def reverse_list(l):
    if len(l) == 2:
        return list(''.join(l[1], l[0]))
    else:
        return list(''.join(reverse_list(l[1:]), l[0]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i <= j:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4733f087-f7f5-4b28-b898-9a23b2f59251,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def fibonacci(s):
    if s == 0:
        return 0
    if s in (0, 1):
        return 1
    return fibonacci(s - 1) + fibonacci(s - 2)",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [(v, k) for k, v in d if d.count(c[1]) == 1]
    print(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e0141b22-9477-459d-8e1c-18f5d5ef6624,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def minimum(l):
    min = sum(l)
    for i in l:
        if i < min:
            min = i
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def minimum(numbers):
    count = numbers[0]
    for i in numbers:
        if i < count:
            count = i
    return count",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap_unique_keys_values(d_0):
    d = {}
    for key in d_0:
        d[d_0[key]] = key
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        k = dir[a[i]]
        if k not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,False
"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)


def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def minimum(l):

    def quicksort(A, p, r):
        if r <= p:
            return
        q = partition(A, p, r)
        quicksort(A, p, q - 1)
        quicksort(A, q + 1, r)

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    return quicksort(l, 0, len(l) - 1)[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,,False
"def double(n):
    n = n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def double(n):
    return n * 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif a[mid] == q:
            return mid
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    radii = r1 + r2
    return radii > dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def selectionsort(a):
    a = a[:]
    out = []
    if a:
        smallest = min(a)
        a.remove(smallest)
        out.append(smallest)
    return out",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def selectionsort(A):
    if True:
        recursive_selectionsort(A, 0)",False
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    for k, v in list(d.items()):
        if values.count(v) == 1:
            d2[v] = k
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    if True:
        0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        high = mid
    return low",False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e61abe18-8ddf-4e11-ab3b-38a68f156ea0,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return list(listt[-1]) + reverse_list(listt[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def reverse_list(listt):
    if not listt:
        return listt
    else:
        return [listt[-1]] + reverse_list(listt[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q and a[search - 1] != q:
            return search
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    if True:
        0
    elif True:
        0
    return low",False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if (k, v) not in set.
        intersection(list(d.items()))}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if [v for v in list(d.values()
        )].count(v) == 1}",True
"def count_letters(s):
    try:
        b = s.index(s[-1]) + 1
    except IndexError:
        return 0
    s = ''
    if s == '':
        return b
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(item, length=0):
    try:
        item[0]
    except IndexError:
        return length
    if True:
        item = item[1:]
        length += 1
        return count_letters(item, length)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9dea5530-0f82-4127-b25f-20c784224a03,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter, x):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    new = {}
    for k in d:
        v = d.get(k)
        if v in new:
            del ne[v]
        else:
            new[v] = k
    return new",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    new = {}
    for k in d:
        v = d.get(k)
        if v in new:
            del new[v]
        else:
            new[v] = k
    return new",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j = j + 1
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    deli = []
    for k, v in list(d.items()):
        unique.append(v)
    for v in unique:
        if unique.count(v) > 1:
            deli.append(v)
    for v in unique:
        try:
            if v in deli:
                del unique[v]
        except:
            continue
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    B = True
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        if B:
            0
        unique.append(B)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    if B:
        j = 0
        while j < len(unique):
            if unique[j]:
                swapped_unique_d[values[j]] = keys[j]
            j += 1
        return swapped_unique_d",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,17658437-97b1-4a8a-ac6f-a63a54536e33,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * (n, m - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,"def power(n, m):
    if m == 1:
        return n
    if m == 0:
        return 1
    return n * power(n, m - 1)",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maximum(n[1:])
    return n[0] if n[0] > maxr else minr",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maximum(n[1:])
    return n[0] if n[0] > maxr else maxr",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    p = i
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,False
"def swap_keys_values(d):
    e = {}
    for k, v in d:
        e[v] = k
    return e",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"def swap_keys_values(d):
    e = {}
    for k, v in list(d.items()):
        e[v] = k
    return e",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2f42085d-bb24-498f-9d99-42137e03966f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = [(v, k) for k, v in items if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def count_letters(string_):
    len(string_)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def count_letters(str):
    return len(str)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,794362b7-cbcd-4bea-bafb-7967c266e248,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def reverse(a):
    print(a[::-1])",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    if A:
        0
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return A",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    rad = (r1 + r2) ** 2
    xs = (x1 - x2) ** 2
    ys = (y1 - y2) ** 2
    both_x_y = xs + ys
    if rad > both_x_y:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def power(base, exp):
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        base *= base
        new_exp = exp - 1
        power(base, new_exp)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def power(x, n):
    if n == 0:
        return 1
    elif n == 1:
        return x
    else:
        return x * power(x, n - 1)",True
"def minimum(l):
    min = inf
    for item in l:
        min = item if item < min else min
    return min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def minimum(l):
    min = None
    for item in l:
        min = item if min == None or item < min else min
    return min",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    print((x1, y1, r1, x2, y2, r2))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def append2list(l1, l2):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 >= dis:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(l):
    if not l:
        return []
    return [l[0]].append(reverse_list(l[1:]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,False
"def selectionsort(array):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    A = True
    if x1 == x2 and y1 == y2 and r1 == r2:
        return A
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if abs(distance) <= r1:
        return A
    if abs(distance) <= r2:
        return A
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    if A:
        0
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return A",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 <= r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[low - i] < q
            low = mid + 1
        else:
            assert q <= a[high]
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
    while k < len(a):
        if a[k] < a[j]:
            j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return k",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        if True:
            while k < len(a):
                if a[k] < a[j]:
                    j = k
                k = k + 1
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            i = i + 1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def reverse_list(l):
    if l == []:
        return []
    return l.append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def reverse_list(list_1):
    return list_1[::1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def reverse_list(list_1):
    return list_1[::-1]",True
"def reverse_list(l):
    if l == []:
        return []
    temp = reverse(l[1:])
    temp.append(l[0])
    return temp",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",True
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return string",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def rectangle_perimeter(r, n):
    rectancle_perimeter = 2 * (r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def power(m, n):
    while n > 0:
        m = m * m
        n = n - 1
        print(n)
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",True
"def area(r):
    y = 3.141 * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def area(r):
    s = 3.141 * r ** 2
    return s",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if dir[a[i]] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def swap_unique_keys_values(d):
    new_d = {}
    keys = list(set(d.keys()))
    values = list(set(d.values()))
    i = 0
    while i < len(keys):
        new_d[values[i]] = keys[i]
        i = i + 1
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dict):
    if True:
        0
    return {v: k for k, v in list(dict.items()) if list(dict.values()).
        count(v) == 1}",True
"def search(str, sub):
    i = 0
    while i < len(str):
        if sub == str[i]:
            return i
        i = i + 1
    return -1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        i = i + 1
    return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return bool(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        find_position - of - smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,False
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    deli = []
    for k, v in list(d.items()):
        unique.append(v)
    for v in unique:
        if unique.count(v) > 1:
            deli.append(v)
    for v in unique:
        if v in deli:
            del unique[v]
    for k, v in list(d.items()):
        if v in unique:
            dictionary[v] = k
    return dictionary",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        counter.append(v)
    for c in counter[:int(len(counter) / 2)]:
        if counter.count(c) == 1:
            new.append(c)
    for c in counter[int(len(counter) / 2):]:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            dictionary[v] = k
    return dictionary",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def _quicksort(array):
    less = []
    greater = []
    equal = []
    if len(array) > 0:
        piv = array[0]
        less = [i for i in array if i < piv]
        greater = [i for i in array if i > piv]
        equal = [i for i in array if i == piv]
        return _quicksort(greater) + equal + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def reverse(i, j, k):
    a = a[::-1]
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def reverse(a):
    i = 0
    while i < len(a):
        print(len(a) - i)
    i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, len(a) - 1 - i, i)
        i = i + 1
    return a",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a998fa29-b3b1-437f-9555-da670b1ae43b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    sd = sorted(d.items())
    print(sd)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def area(r):
    return (r * pi) ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    if x1 == x2 and y1 == y2 and r1 == r2:
        return True
    distance = (x2 - x1 + (y2 - y1)) ** 0.5
    if abs(distance) < r1 or abs(distance) < r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return A",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,09e5a143-ae3a-4611-8cfa-45d52e07b2c6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        else:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
        else:
            high = middle
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                continue
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    l = 0
    while l < len(a):
        p = find_position_of_smallest(a, l)
        swap(a, l, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,,False
"def power(m, n):
    if n == 0:
        return 1
    return m * power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(s):
    if s == 0:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_dict = print(sorted(dict([(v, k) for k, v in d.items() if list(d.
        values()).count(v) == 1])))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def reverse(a):
    i = 0
    while i < len(a):
        print(a[len(a) - i - 1])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,72504244-3803-4754-91e3-5c7732106556,2015.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",True
"def swap_keys_values():
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,,False
"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def power(m, n):
    if n == 1:
        return m
    if n == 0:
        return 1
    return n * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def power(m, n):
    if n == 1:
        return m
    if n == 0:
        return 1
    return m * power(m, n - 1)",True
"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    index(s, letter, num + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter, num):
    if num == len(s):
        return -1
    if s[num] == letter:
        return num
    n = index(s, letter, num + 1)
    return n",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def reverse_list(l):
    if len(l) == 1:
        return l
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def reverse_list(l):
    if not l:
        return l
    else:
        temp = reverse_list(l[1:])
        temp.append(l[0])
        return temp",True
"def sort(a):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,"def sort(a):
    i = 0",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2 - 1
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",False
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,False
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            print('True')
        else:
            print('False')
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if d.count(v) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def minimum(a):
    if len(a) == 1:
        return a
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 == distance or abs(r1 - r2) == distance and distance < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def search(str, letter):
    if len(str) == 0:
        return 'False'
    elif str[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(list(d.items())))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def swap_unique_keys_values(d):
    tempd = {}
    for k, v in list(d.items()):
        if v.count(v) < 2:
            tempd = {k: v}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    l = 0
    while l < len(a):
        p = find_position_of_smallest(a, l)
        swap(a, p, l)
    l = l + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,29ee2b4b-4fb7-46c9-986d-b715bcee0fbe,2016.0,,False
"def swap_keys_values(dict):
    new_dict = {v: k for k, v in list(dict.items())}
    print(list(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maxi(n[1:])
    return n[0] if n[0] > maxr else minr",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def maximum(n):
    if len(n) == 1:
        return n[0]
    maxr = maximum(n[1:])
    return n[0] if n[0] > maxr else maxr",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,93426de2-87e4-4c00-9910-de51627bd576,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(lis(val))
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    val = list(a.values())
    for no in val:
        print(val)
        if val.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def find_position_of_smallest(a, i):
    track = 0
    tempnum = a[i + track]
    while track != len(a) - i:
        if a[i + track] == tempnum:
            tempnum = a[i + track]
        track = track + 1
    return tempnum


def sort(a):
    i = 0
    j = 0
    while i != len(a):
        j = find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    i = 0
    while low != high:
        mid = (high + low) / 2
        if a[mid] < q:
            high = mid
        else:
            low = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    i = 0
    c = i + 1
    while i < n:
        if n == 0:
            return i
        i += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    for i in range(0, len(a) / 2):
        swap(a, i, len(a) - i - 1)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,,False
"def power(m, n):
    m = m ** n
    return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def power(m, n):
    m = m ** n
    return m",True
"def power(x, y):
    if y == 0:
        return x
    return power(x ** y, y - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def power(x, y):
    if y == 0:
        return 1
    return x * power(x, y - 1)",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def parition(a, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]


def quicksort(a, p, r):
    if r <= p:
        return
    else:
        q = parition(a, p, r)
        quicksort(a, p, q - 1)
        quicksort(a, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,,False
"def reverse_list(l):
    return l[-1] + reverse_list(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def reverse_list(l):
    return l[::-1]",True
"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def quicksort(l, p, r):
    if r <= p:
        return
    q = j = p
    while True:
        if not j < r:
            break
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,30a4c165-17bc-4bdf-a096-e2a252a403eb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        fibN_2 = 0
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",True
"def swap_keys_values(x):
    for a in d:
        e[d[value]] = e[d[key]]
    return e",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,93426de2-87e4-4c00-9910-de51627bd576,2016.0,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",True
"def reverse(a):
    return a.reverse()",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in sorted(d.items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",True
"def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    find_position_of_smallest(a, i)
    i = tmp
    a[0] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    d1 = list(d.items())
    print(d1)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in d.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def reverse(n):
    i = 0
    while i < len(n) / 2:
        print(n[len(n) - i - 1])
    i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = collections.OrderedDict(sorted(list(d.items()), key=lambda t: t[0]))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l):
    if l == []:
        return None
    return l[::-1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selectionsort(array):
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if arr[i] > arr[j]:
                arr[i], arr[j] = arr[j], arr[i]",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",True
"def swap_unique_keys_values(d):
    new_dict = {value: key for key, value in list(d.items()) if value not in
        new_dict}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse(n):
    a = []
    i = 0
    while i < len(n):
        print(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4788f2f7-8b97-41a8-88ee-697183f85246,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    return fibonacci[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap(a, i, j):
    y = a[j]
    a[j] = a[i]
    a[i] = y


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,,False
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def swap_unique_keys_values(d):
    swapped_dict = set(dict(list(zip(list(d.values()), list(d.keys())))))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",True
"def reverse(a, i, j):
    a = []
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def square_perimeter(n):
    sp = n + n + n + n",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def square_perimeter(n):
    return n + n + n + n",True
"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[q])
    else:
        lst.remove(lst[0])
    return maximum(lst)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,05f63619-1095-4d15-8436-1f0832a593bc,2016.0,"def maximum(lst):
    if len(lst) == 1:
        return lst[0]
    if lst[0] > lst[1]:
        lst.remove(lst[1])
    else:
        lst.remove(lst[0])
    return maximum(lst)",True
"def find_position_of_smallest(a, i):
    x = i
    while i < len(a):
        if a[i] < a[x]:
            x = i
        i = i + 1
    return x


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2016.0,,False
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return index(str, letter, i - 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(a, flag=True):
    if a == []:
        return tmp
    if flag == True:
        tmp = a.pop()
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], flag=False)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    if tail_min == []:
        return l[0]
    return l[0] if l[0] < tail_min else tail_min",True
"def reverse_list(l):
    if len(l) == 2:
        return l[1] + l[0]
    else:
        return reverse_list(l[1:]) + l[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for k in list(d.keys()):
        if k in d:
            d1[k] += 1
        else:
            d1[k] = 1
    for k, v in list(d.items()):
        if d1[k] == 1:
            d2[v] = k
        else:
            continue
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def swap_unique_keys_values(d):
    d1 = {}
    d2 = {}
    unique = []
    for v in list(d.values()):
        if v in d1:
            d1[v] += 1
        else:
            d1[v] = 1
    for k, v in list(d.items()):
        if d1[v] == 1:
            d2[v] = k
        else:
            continue
    return d2",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i]
        a[len(a) - i] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,00ee78cc-7a00-47a7-85bb-9c524dad656c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.avlues()).count(v) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            print('True')
        i = i + 1
    print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def append2list(l1, l2='none'):
    for i in l1:
        l2.append(i)
    return l2",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    d1 = {v: k for k, v in list(d.items()) if len(d[v]) > 1}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 / 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        elif a[mid] >= q:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0f25ed97-3bfd-4793-bb56-26c57236aeda,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if a[mid] < q:
            low = mid + 1
        elif False:
            0
        high = mid
    return low",False
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    print(sorted(d.items()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def quicksort(l, first, last):
    if first >= last:
        return
    i, j = first, last
    pivot = l[random.randint(first, last)]
    while i <= j:
        while l[i] < pivot:
            i += 1
        while l[j] > pivot:
            j -= 1
        if i <= j:
            l[i], l[j] = l[j], l[i]
            i, j = i + 1, j - 1
    quicksort(l, first, j)
    quicksort(l, i, last)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def quicksort(l, p, r):
    if r <= p:
        return
    q = j = p
    while True:
        if not j < r:
            break
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def power(n, x):
    if x == 0:
        return 1
    return n * power(x - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def power(n, x):
    if x == 0:
        return 1
    return n * power(n, x - 1)",True
"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",True
"def swap_unique_keys_values(d):
    new_dict = {}
    for pair in list(d.items()):
        if pair[1] not in new_dict:
            new_dict[pair[1]] = pair[0]
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    i = 0
    j = 0
    while j < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,1952771b-859e-46c9-8146-448dc8ef5870,2016.0,,False
"def reverse_list(n):
    if n == 1:
        return 0
    else:
        return reverse_list(n)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",True
"def reverse_list(a):
    if len(a) == 1:
        return []
    else:
        return [a[-1]] + reverse_list(a[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def reverse_list(a):
    if len(a) == 0:
        return []
    else:
        return [a[-1]] + reverse_list(a[:-1])",True
"def circle_area(n):
    ca = 2 * 3.14 * n
    return cc",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def circle_area(n):
    ans = n * n * 3.14
    return ans",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    print(new_dict)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def circumference(r):
    return 2 * r * pi",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,db184e8e-e02b-4772-b74b-547b88d21933,2016.0,,False
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def fibonacci(n):
    i = 0
    while n > i:
        n",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append(""({}, '{}')"".format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-3))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= [high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    d2 = {}
    values = list(d.values())
    d2 = [(v, k) for k, v in list(sorted(d).items()) if values.count(v) == 1]
    print(d2)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    lst = [x for x in list(d.values())]
    new_dict = {v: k for k, v in list(d.items()) if lst.count(v) == 1}
    return new_dict",True
"def fibonacci(n):
    i = 0
    x = 1
    c = i + x
    while i < n:
        if n == 0:
            return i
        i += 1
    c += 1
    return c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    for t in s:
        total += 1
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    a = 0
    for letter in s:
        a += 1
    return a",True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif t not in blist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([t])
            del out_dict[t]
        elif t not in blist:
            out_dict[t] = k
    return out_dict",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    store = {}
    for key in d:
        for k in d:
            if d[key] == d[k]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    d2 = {}
    for key in d:
        if d[key] in d2:
            if False:
                0
            del d2[d[key]]
        else:
            d2[d[key]] = key
    return d2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2 - 1) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def fibonacci(value):
    if value == 1 or value == 0:
        return 1
    return fibonacci(value - 1) + fibonacci(value - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d63d843-7e5d-4c24-a378-1056c311dfd2,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    for c in str:
        if letter == c:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def index(str, letter):
    for item in ls:
        return str - 1
    return index",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(steve, letter):
    if True:
        return steve.find(letter)
    elif True:
        0",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def reverse(a):
    i = 0
    tmp = ''
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2015.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = low
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,8487432c-a440-40f5-afcb-ad0e762b9edb,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def maximum(l):
    biggest = l[0]
    for e in l:
        if e < biggest:
            biggest = e
    return biggest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def maximum(l):
    biggest = l[0]
    for e in l:
        if e > biggest:
            biggest = e
    return biggest",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def circle_area(n):
    ca = 3.14 * (n * n)
    return ca",True
"def swap_keys_values(d):
    return {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def sort(a):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def sort(a):
    i = 0",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'
    search()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) or x0 + x1 + (y0 + y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def minimum(a):
    if len(a) == 1:
        return a
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def minimum(a):
    if len(a) == 1:
        return a[0]
    else:
        if a[0] < a[1]:
            del a[1]
        else:
            del a[0]
        return minimum(a)",True
"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if a.count(i) == 1:
            a.remove(i)
    e = {}
    for k, v in list(d.items()):
        if v not in a:
            e[v] = k
    return e",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"def swap_unique_keys_values(d):
    a = [v for k, v in list(d.items())]
    for i in a:
        if 1 < a.count(i):
            a = [j for j in a if j != i]
    e = {}
    for k, v in list(d.items()):
        if v in a:
            e[v] = k
    return e",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if a.count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if dir[a[i]] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def power(a, b):
    if b == 0:
        return 1
    return a * power(b - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def power(a, b):
    if b == 0:
        return 1
    return a * power(a, b - 1)",True
"def selection_sort(a):
    p = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def reverse(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if int(a[j]) > int(a[p]):
            p = j
        j = j + 1
    return p",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        if True:
            b.append(a[len(a) - 1 - i])
            i = i + 1
    return b",True
"def reverse(a):
    import sys
    a = sys.stdin.readlines()
    i = 0
    b = []
    while i < len(a):
        f = a[len(a) - i - 1]
        i = i + 1
        b.append(f.rstrip())
    print(b)
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2015.0,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,61106f0d-7c7b-4b7a-a3d3-5ba1af9aacf4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def count_letters(l):
    return 1 + count_letters(s[1:]) if l else 0",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def count_letters(l):
    return 1 + count_letters(l[1:]) if l else 0",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i = i + 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    if True:
        0
    return sum1",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(list(d.items()), key=lambda t: t[0])
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        j = j + 1
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = 0.5 ** ((x1 - x2) ** 2 + (y1 - y2) ** 2)
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def area(r):
    y = pi * r ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def area(r):
    s = 3.141 * r ** 2
    return s",True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += a[no]
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q or low == 0
        else:
            high = mid
            assert q <= a[high] or high == len(a)
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1d4a4b3b-be4e-49dc-96cc-fceb60ad22a1,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    swap(a, i, j)
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return 1
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, p + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,,False
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)
    return",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if (R0 - R1) ** 2 < (x0 - x1) ** 2 + (y0 - y1) ** 2 < (R0 + R1) ** 2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((int(x1) - int(x0)) ** 2 + (int(y1) - int(y0)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) != 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[i] = tmp",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def swap_keys_values(d):
    new_d = d((v, k) for k, v in list(d.items()))
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3a86cbea-7925-4e8e-9baa-3505dd2219c7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[-i - 1]
        a[-i - 1] = tmp
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i += 1
    return a",True
"def countdown(num):
    while num >= 1:
        print(num)
        num = num - 1
        time.sleep(0.1)


def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')


def index(str, letter):
    i = 0
    if letter in str:
        letter = letter[0]",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    sumofradi = r1 + r2
    return distance < sumofradi",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        swap(a, i, find_position_of_smallest + i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,557b99ed-3c48-4070-b887-de4b2d06ac8d,2016.0,,False
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items())}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
    if a[mid] < q:
        low = mid + 1
    else:
        high = mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1e76a94c-89e1-4ef2-b3bb-9e98e7be1a2c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('ok')
    else:
        print('false')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted(l)]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]
    return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def reverse_list(a):
    m = a[::-1]
    return m",True
"def power(x, n):
    if x == 0:
        return 1
    return x * power(n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def power(x, n):
    if n == 0:
        return 1
    return x * power(x, n - 1)",True
"def swap_unique_keys_values(d):
    seen = list(d.keys())
    swapped_dict = dict(list(zip(list(d.values()), list(d.keys()))))
    print(list(swapped_dict.values()))
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return list(new_dict.items())",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for z, q in list(d.items()):
        new_dict[q] = z
    return new_dict",True
"def power(m, n):
    if n == 0:
        return m
    return m * power(m, n - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m * power(m, n - 1)",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(str, letter, num):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'
    index()",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def find_position_of_smallest(a, i):
    j = i
    while i < len(a):
        if a[i] < a[j]:
            j = i
        i = i + 1
    return j


def sort(a):
    i = 0
    while i < len(a):
        k = find_position_of_smallest(a, i)
        swap(a, i, k)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    assert low == 0 or a[low - 1] < q
    assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,False
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def square_perimeter(r):
    sqaure_perimeter = r * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,5aa80855-56ed-43aa-9b33-19faef108ec0,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    print(list(d.keys()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    internal = r1 + r2
    external = abs(r1 - r2)
    return internal == dist or external == dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def circle_area(r):
    return r * r * 3.14",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,False
"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def quicksort(A, start, end):
    if True:
        0
    if end - start < 1:
        return
    i = j = start
    if True:
        while i <= end:
            if A[i] <= A[end]:
                A[i], A[j] = A[j], A[i]
                j += 1
            i += 1
        quicksort(A, start, j - 2)
        quicksort(A, j, end)
    else:
        0",True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique in values:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2 - 1:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f565987c-8fbf-4b95-b405-cf1a3ccac8f5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def circle_area(r):
    return r * r * 3.14",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def _quicksort(array):
    if len(array) > 0:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)
    else:
        return []


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def fibonacci(n):
    old = 1
    cur = 1
    i = 1
    while i < n:
        cur, old, i = cur + old, cur, i + 1
    return cur",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 >= dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    newlist = []
    for k, v in list(d.items()):
        alltupps.append((v, k))
    alltupps = sorted(alltupps)
    i = 0
    while i < len(alltupps) - 1:
        if alltupps[i][0] != alltupps[i + 1][0]:
            newlist.append(alltupps[i])
        else:
            i += 1
        i += 1
    if alltupps[-2][0] != alltupps[-1][0]:
        newlist.append(alltupps[-1])
    return dict(newlist)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    keys = []
    values = []
    dict_keys = []
    dict_values = []
    dump = []
    for k, v in list(d.items()):
        keys.append(k)
        values.append(v)
    for num in values:
        test = num
        values = values[1:]
        if test in values:
            dump.append(test)
        elif test not in values and test not in dump:
            dict_keys.append(test)
            dict_values.append(keys[0])
        keys = keys[1:]
    if True:
        d = {}
        for i in range(0, len(dict_keys)):
            d[dict_keys[i]] = dict_values[i]
        return d",True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",True
"def swap_unique_keys_values(d):
    new_dict = {value: key for key, value in list(d.items()) if value not in
        new_dict}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == 0:
        return minimum(a, test)
    return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",True
"def reverse(a):
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    print(a.rstrip())
    print(tmp)
    print(a[i])",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,e84d5440-bfc2-41cd-a020-f2cd55cb79b4,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def reverse(a):
    a = []
    i = 0
    while i < len(a):
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = a[i]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    else:
        return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    if True:
        return -1",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if x2 is _A:
        x2 = 0
    if r1 is _A:
        r1 = 1
    if y2 is _A:
        y2 = 0
    if y1 is _A:
        y1 = 0
    if r2 is _A:
        r2 = 1
    if (x2 - x1) ** 2 + (y2 - y1) ** 2 >= (r1 + r2) ** 2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2157ade0-6890-435b-8669-a884e3233bc7,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        search = (high + low) / 2
        if a[search] == q:
            return search
        elif a[search] > q:
            high = search
        else:
            low = search
            if low == search:
                low += 1
    return search",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dd2b828e-e813-417d-b910-df48d2f89ccc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    if True:
        0
    elif True:
        0
    return low",False
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = [(v, k) for k, v in list(d.items())]
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = []
    for k, v in list(d.items()):
        alltupps.append(v, k)
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def minimum(s):
    if len(s) == 1:
        return 0
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def minimum(s):
    if len(s) == 1:
        return s[0]
    else:
        min_ret = minimum(s[1:])
        return s[0] if s[0] < min_ret else min_ret",True
"def reverse(a, i, j):
    a = []
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def swap_unique_keys_values(d):
    d = list(d.items())
    l = [v for k, v in d]
    z = []
    for c in l:
        if l.count(c) == 1:
            z.append(c)
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    store = {}
    va = list(d.values())
    print(va)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - x1) ** 2) ** 0.5
    if hypotenuse > r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def swap_unique_keys_values(d):
    return set({v: k for k, v in list(d.items())})",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((int(x0) - int(x1)) ** 2 + (int(y0) - int(y1)) ** 2
            ) < int(R0) + int(R1):
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def area(r):
    r = r ** 2
    a = pi * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e4dcdad8-3da9-41c5-bbd1-3df3433e270d,2016.0,"def area(r):
    r = r ** 2
    r = 3.141 * r
    return r",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2
        ) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if d.count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def swap_unique_keys_values(d):
    m = {}
    for i in list(d.items()):
        if list(d.values()).count(i[1]) == 1:
            m[i[1]] = i[0]
    return m",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb523aa9-260c-45a0-8676-45ed3ab261ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    l = [(k, v) for k, v in list(d.items()) if values.count(v) == 1]
    print(sorted(l))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def distance(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,,False
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += pev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50aef720-52de-4735-8874-78f5a311b939,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def swap_unique_keys_values(a):
    if True:
        0
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(sorted(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,1ea53a09-863b-4396-bbe3-e75221238368,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] <= q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,70e78257-bdc0-4e89-b7cb-a49beaca5b77,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) <= dist <= abs(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    print(distance)
    print(r1 + r2)
    print(r1 - r2)
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_keys_values(swap_me):
    o = {swap_me[key]: key for key in list(swap_me.keys())}
    o = list(o.items())
    o = list(o)
    o.sort(key=lambda x: x[0])
    print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(type(sorted(new_dict.items())))
    return new_dict",True
"def fibonacci(n):
    prev = 0
    cur = 1
    i = 0
    while i < n:
        tmp = cur
        cur = cur + prev
        prev = tmp
        i = i + 1
    return cur",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        if True:
            a = b
            b = temp + b
    return a",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < a
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fa2c47e6-9c25-4040-9985-e5ab62711be6,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    p = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6a42703e-da42-4824-8b83-b6f291ad71be,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        return _quicksort(greater) + _quicksort(less)


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 // 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6a72520c-4c39-4c03-b7cf-5550dbde3147,2016.0,"def reverse(a):
    i = 0
    j = -1
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[j]
        a[j] = tmp
        i = i + 1
        j = j - 1
    return a",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    return (x1 - x2) ** 2 + (y1 - y2) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = i
        i = i + 1
        while i < len(a):
            if a[i] < a[p]:
                p = i
            i = i + 1
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,False
"def area(r):
    return r ** 2 * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, {:>2s})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,,False
"def reverse_list(l):
    if l == []:
        return []
    return l.append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return l[::-1]",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = True
        if math.sqrt((int(x0) - int(x1)) ** 2 + (int(y0) - int(y1)) ** 2
            ) < int(R0) + int(R1):
            overlap = A
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def circle_area(radius1):
    return 3.14 * radius1 * radius1",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,b69e2427-8f89-4880-8245-6f14d4d2354a,2015.0,"def circle_area(r):
    return r * r * 3.14",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance or r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    overlap = False
    if math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) < r1 + r2:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0f49aa06-8917-4312-903b-8a4431682b21,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,False
"def index(str, letter, pos):
    pos = 0
    if letter == str[pos]:
        return pos
    else:
        index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if dist - r1 - r2 < 0:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if dis < r1 + r2:
        return True
    else:
        return False",True
"def search(string, letter):
    if letter in string:
        return 'True'
    else:
        return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def circle_area(r):
    return r * r * 3.141",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,03141ef3-f364-4b7c-9f52-990a173ac162,2016.0,"def circle_area(r):
    return r * r * 3.14",True
"def sort(a):
    i = 0
    n = 0
    while i < len(a):
        if a[i] < a[n]:
            n = i
        i = i + 1
        tmp = a[i]
        a[i] = a[n]
        a[n] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_keys_values(swap_me):
    if swap_me is not None:
        o = {swap_me[key]: key for key in list(swap_me.keys())}
        o = list(o.items())
        o = list(o)
        o.sort(key=lambda x: x[0])
        print(o)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bf8435-64be-48cb-be81-139956827989,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(n):
    i = 0
    while i < len(n):
        print(n[len(n) - (i + 1)])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,,False
"def swap_unique_keys_values(d):
    values = list(d.values())
    unique = [x for x in values if values.count(x) == 1]
    swapped_dict = 0
    if unique == True:
        swapped_dict = {v: k for k, v in list(d.items())}
    return swapped_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def swap_unique_keys_values(d):
    store = {}
    print(list(d.values()))
    for k, v in list(d.items()):
        print(d.count(v))
        if d.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    store = {}
    va = list(d.values())
    print(va)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
    i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = 0
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    overlap = False
    if R0 - R1 <= x0 - x1 + (y0 - y1) < R0 + R1:
        overlap = True
    return overlap",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7b251fef-3898-4dec-aa70-18b4a70042a3,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,73cbe3a2-8a2b-4c7f-8b9e-a7db4b1d6f36,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def power(i, power):
    if i == i ** power:
        return i
    i *= i
    power(i, power)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def power(m, n):
    if n == 0:
        return 1
    return m ** n",True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return d >= r or d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def circumference(x):
    return 2 * pie * x",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fac2ee37-8224-43e0-9c23-7cc249889343,2015.0,"def circumference(x):
    return 2 * 3.141 * x",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def power(base, power2):
    if base == 0:
        return 'invalid'
    if power2 == 0:
        return 1
    elif power2 == 1:
        return base
    else:
        return base * power(base, power2 - 1)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def power(base, exp, mult=None):
    if mult is None:
        mult = base
    if exp == 0:
        return 1
    elif exp == 1:
        return base
    else:
        new_base = base * mult
        new_exp = exp - 1
        return power(new_base, new_exp, mult)",True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def search(x, letter):
    if letter.isalpha() and type(x) == str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selectionsort(a):
    i = 0
    p = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
            i = i + 1
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    if len(l2) < 2:
        return l2
    else:
        l2.remove(l2[0])
        l2.remove(l2[0])
        return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def append2list(l1, l2):
    for i in l1:
        l2.append(i)
    return l2
    if l2 is None:
        l2 = []
    else:
        0",True
"def maximum(l, c=None):
    if c == None:
        return minimum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return minimum(l[1:], l[0])
    else:
        return minimum(l[1:], c)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def maximum(l, c=None):
    if c == None:
        return maximum(l[1:], l[0])
    if l == []:
        return c
    if l[0] > c:
        return maximum(l[1:], l[0])
    else:
        return maximum(l[1:], c)",True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    A = False
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if A:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            if A:
                0
            dictionary[v] = k
    return dictionary",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def search(str, letter):
    if letter in str:
        return True
    return False",True
"def partition(l, p, r):
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    return q


def quicksort(l, p, r):
    if r <= p:
        return l
    q = partition(l, p, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,False
"def fibonacci(n):
    if n == 1:
        return 1
    elif n == 2:
        return 1
    elif n > 2:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,False
"def append2list(l1, l2=[]):
    return l1 + l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def append2list(l1, l2=[]):
    return l2 + l1",True
"def dist(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r1 + r2 > dist(x1, y1, x2, y2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,False
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(l1)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def append2list(l1, l2=None):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def maximum(a):
    highest = 0
    for e in a:
        if e > highest:
            highest = e
    return highest",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def maximum(l):
    biggest = l[0]
    for e in l:
        if e > biggest:
            biggest = e
    return biggest",True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    return r != d",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = low + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    i = 0
    while i < len(a):
        if a[i] < a[j]:
            i = i + 1
        return i


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def swap_unique_keys_values(d):
    new_d = {}
    for key, value in list(d.items()):
        if value not in list(d.values()):
            new_d[value] = key
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",weird_case,weird_case,Takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower.,assert weird_case('au0x6')==Au0X6 and weird_case('F:BnJ')==F:bNj,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def weird_case(some_str):
    new_str = ''
    i = 0
    lc = 0
    while i < len(some_str):
        if some_str[i].isalpha():
            if lc % 2 == 0:
                new_str += some_str[i].upper()
            else:
                new_str += some_str[i].lower()
            lc += 1
        else:
            new_str += some_str[i]
        i = i + 1
    return new_str",False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    i = p
    p = i
    i = i + 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i += 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9413c2ae-94cc-4b45-8180-0919de97fe15,2016.0,,False
"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c:
                if str[i:i + len(letter)] == letter:
                    return i
            i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"def index(s, letter, num):
    if True:
        if num == len(s):
            return -1
        if True:
            if s[num] == letter:
                return num
            n = index(s, letter, num + 1)
            return n",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    p = i
    find_position_of_smallest(a, i)
    swap(a, i, p)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,,False
"def minimum(l):
    a = l[0]
    if len(l) == 2:
        if l[1] >= l[0]:
            return l[0]
        else:
            return l[1]
    if a >= minimum(l[:-1]):
        return minimum(l[:-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if not l:
        return l
    if len(l) == 1:
        return l[0]
    else:
        tail_min = minimum(l[1:])
        if True:
            0
        if tail_min == []:
            return l[0]
        return l[0] if l[0] < tail_min else tail_min",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high - low) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e4629340-a577-4a87-bbfb-8adf98c283ef,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[p] >= a[j]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,"def circle_area(r):
    return r * r * 3.14",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def fibonacci(value):
    if value == 1 or value == 0:
        return 1
    return fibonacci(value - 1) + fibonacci(value - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
    if a[mid] < q:
        low = mid + 1
        assert a[low - 1] < q
    elif a[mid] == q:
        return mid
    else:
        high = mid
        assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    if True:
        return low",True
"def search(string, letter, pos):
    if pos == len(string):
        return False
    elif string[pos] == letter:
        return True
    else:
        search(string, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def minimum(l):
    if l == []:
        return []
    temp = minimum(l[1:])
    if len(temp) == 0 or l[0] > temp[0]:
        temp = [l[0]]
    return temp[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    tmp = i
    while i < len(a):
        if a[i] < a[tmp]:
            tmp = i
        i = i + 1
    return tmp


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,18ee9049-5f05-43b2-ac53-518e3b23c3c3,2016.0,,False
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    distanceX = x1 - x2
    distanceY = y1 - y2
    radiusSum = r1 + r2
    return (distanceX * distanceX + distanceY * distanceY <= radiusSum *
        radiusSum)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = x2 - x1
    y = y2 - y1
    r = r1 + r2
    distance = (x * x + y * y) ** 0.5
    return r > distance",True
"def reverse(test):
    n = len(test)
    x = ''
    for i in range(n - 1, -1, -1):
        x += test[i]
    return x",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,"def reverse(a):
    a = a[::-1]
    if True:
        0
    return a",True
"def swap_keys_values(a):
    for k, v in list(a.items()):
        tmp = k
        k = v
        v = tmp
    return sorted(a)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_keys_values(d):
    dictionary = {}
    for k, v in list(d.items()):
        dictionary[v] = k
    return dictionary",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    A = False
    try:
        overlap = A
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except TypeError:
        print(A)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2016.0,,False
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo != hi:
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,109505d5-be18-4a61-8318-5d522de4300e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def append2list(l1, l2=[]):
    if len(l2) > 1:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,f69c7616-4d20-4dbe-b3f8-0d10db7adfe4,2016.0,"def append2list(l1, l2=[]):
    if l2 == None:
        l2 = []
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_keys_values(d):
    new_d = {}
    for key, val in d:
        new_d[val] = key
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def swap_keys_values(d):
    new_d = {}
    for key, val in list(d.items()):
        new_d[val] = key
    return new_d",True
"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val = va.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    for k, v in list(d.items()):
        if va.count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def swap(a, x, y):
    tmp = a[x]
    a[x] = a[y]
    a[y] = tmp
    return a


def selection_sort(a):
    k = 0
    while k < len(a):
        j = k + 1
        p = k
        tmp = 0
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        swap(a, k, p)
        k += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,,False
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    for k in d:
        v = d.get(k)
        if v in new_dict:
            del new_dict[v]
        else:
            new_dict[v] = k
    return new_dict",True
"def fibonacci(a):
    prev = 1
    curr = 1
    tmp = 0
    i = 0
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return curr",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                break
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def search(s, letter, pos):
    if pos == len(s):
        print('-1')
    elif s[pos] == letter:
        print(pos)
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def search(str, letter):
    if letter in str:
        print('True'.rstrip())
    else:
        print('False'.rstrip())",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = circles ** 1 / 2
    length = r1 + r2
    if distance <= length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",True
"def swap_keys_values(my_dict):
    my_dict = {v: k for k, v in list(my_dict.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,False
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    A = False
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if A:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            if A:
                0
            dictionary[v] = k
    return dictionary",True
"def index(str, letter):
    for item in str:
        return str - 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter):
    if True:
        return str.find(letter)
    elif False:
        0",True
"def fibonacci(pos):
    import sys
    prev = 0
    curr = 1
    i = 0
    if pos == 0:
        return 1
    else:
        while i < pos + 1:
            curr = prev + curr
            prev = curr - prev
            i = i + 1
        return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'False'
    else:
        return 'True'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            assert a[low - 1] < q
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,652b3384-e559-46c5-81db-1bf2117db63b,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if uniqueness[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,"def swap_unique_keys_values(d):
    A = False
    keys = []
    values = []
    unique = []
    swapped_unique_d = {}
    for key in d:
        keys.append(key)
        values.append(d[key])
    for item in keys:
        unique.append(True)
    i = 0
    while i < len(keys):
        p = i + 1
        while p < len(values):
            if values[i] == values[p]:
                unique[i] = A
                unique[p] = A
            p += 1
        i += 1
    j = 0
    while j < len(unique):
        if unique[j]:
            swapped_unique_d[values[j]] = keys[j]
        j += 1
    return swapped_unique_d",True
"def reverse(a):
    i = 0
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    print(a)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def fibonacci(n):
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,False
"def quicksort(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def quicksort(A, p, r):
    if r <= p:
        return
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",True
"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[1])
    return maximum(l)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def maximum(l):
    if len(l) == 1:
        return l[0]
    if l[0] > l[1]:
        l.remove(l[1])
    else:
        l.remove(l[0])
    return maximum(l)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,919f743b-c8d6-4955-bb0f-9ca7c9bbe1be,2016.0,,False
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A):

    def partition(A, p, r):
        q = j = p
        while j < r:
            if A[j] <= A[r]:
                A[q], A[j] = A[j], A[q]
                q += 1
            j += 1
        A[q], A[r] = A[r], A[q]
        return q
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,,False
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(k) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def rectangle_perimeter(r, n):
    rectangle_perimeter = (2)(r + n)
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def rectangle_perimeter(r, n):
    rectangle_perimeter = 2 * (r + n)
    return rectangle_perimeter",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,0d8d49aa-e213-4ab4-bcc1-440a0397585c,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) < dist < abs(r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def search(str, letter, pos):
    if letter in str:
        return True
    else:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def swap_unique_keys_values(d):
    tempd = {}
    alltupps = [(v, k) for k, v in d]
    return alltupps",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def swap_unique_keys_values(d):
    items = set(d.items())
    print(items)
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - i - 1)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    for i in range(len(a)):
        j = 1
        if a[j] > a[i]:
            tmp = a[i]
            a[i] = a[j]
            a[j] = tmp
        j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def selection_sort(a):
    for i in range(len(a)):
        if True:
            mini = min(a[i:])
            min_index = a[i:].index(mini)
            a[i + min_index] = a[i]
            a[i] = mini
    return a",True
"def reverse_list(a):
    return reverse_list(a[1:]) + a[0]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(a):
    return a[::-1]",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circle_area(radius):
    cirarea = 3.14 * radius * radius
    return cirarea",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,80965c2d-45d9-440d-b3c3-403c112145e9,2015.0,"def circle_area(r):
    circle_area = r * r * 3.14
    return circle_area",True
"def search(string, letter):
    if 'i' not in locals():
        i = 0
    if string[i] == letter:
        return True
    else:
        search(string[i + 1], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    if str == '':
        return False
    if str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def minimum(l):
    a = l[len(l) - 1]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l[:-1]):
        return minimum(l[-1])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print([k for k, v in sorted(list(d.items()), key=lambda x: x[1],
        reverse=True)])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    a = [v for k, v in list(d.items())]
    return {v: k for k, v in list(d.items())}",True
"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return minimum(collection, itera + 1, mini)
    else:
        return minimum(collection, itera + 1, mini)",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def maximum(collection, itera=0, mini=None):
    if itera == 0:
        mini = collection[0]
    if len(collection) == itera:
        return mini
    if mini < collection[itera]:
        mini = collection[itera]
        return maximum(collection, itera + 1, mini)
    else:
        return maximum(collection, itera + 1, mini)",True
"def search(str, letter):
    for item in str:
        return True
    return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def search(str, letter):
    if letter in str:
        return True
    return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if r1 + r2 - 1 == distance or abs(r1 - r2) == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,,False
"def reverse(a):
    rev = a[len(a) - i - 1]
    return rev",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def reverse(a):
    while i < len(a):
        return len(a) - 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,2d5a247c-29b2-4cc2-a956-669a2206edc8,2016.0,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(d):
    {v: k for k, v in d.items}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (low + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(a):
    lowest = sum(a)
    for e in a:
        if e < lowest:
            lowest = e
    return lowest",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def minimum(l):
    smallest = l[0]
    for e in l:
        if e < smallest:
            smallest = e
    return smallest",True
"def circumference(x):
    y = 2 * pi * x
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,54b87e3d-5711-4a83-a6d1-ed14ae588835,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,9de68f60-663e-4929-b3e2-88948f90a669,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,False
"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i])
        i = i + 1
    a = temp
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c601c339-f2b7-4564-a96b-2de852eabb7b,2016.0,"def reverse(a):
    temp = []
    i = 0
    while i != len(a):
        temp.append(a[len(a) - i - 1])
        i = i + 1
    a = temp
    return a",True
"def fibonacci(n):
    n = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def index(steve, letter, n):
    if letter != steve[n]:
        index(steve, letter, n + 1)
    else:
        return n",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,0cf3795f-3d4f-4c32-b52b-4a8e4a33e09a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-2]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    s = s[1:]
    return 1 + count_letters(s)",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    print(lis)
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({},  {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
    print(str(i))",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    find_position_of_smallest(a, i)
    swap(a, i, j)
    j = j + 1
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    fibonacci = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
    return fibonacci[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    {v: k for k, v in d}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)
    return A",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m * power(m, n - 1)",True
"def index(str, letter, pos):
    if pos == len(str):
        return 0
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def index(str, letter):
    a = len(str) - 1
    b = -1
    if letter == str[a]:
        return start
    else:
        a -= 1
        index(str, letter)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    if str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7c3b55b1-74b7-4570-8484-5a4354d497aa,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def seen(k, v):
    global skip
    if v in skip:
        return k, v
    else:
        return v, k


def swap_unique_keys_values(d):
    global skip
    check = []
    for x in list(d.keys()):
        if d[x] not in check:
            check.append(d[x])
        else:
            skip.append(d[x])
    d = [seen(k, v) for k, v in list(d.items())]
    print(d)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    print(list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def index(str, letter):
    i = 0
    while i < len(str) and str[i] != letter:
        i += 1
    if letter in str:
        print(i)
    else:
        print('-1')
    return str, letter",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def dist(x1, y1, x2, y2):
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r1 + r2 > dist(x1, y1, x2, y2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,7a72123c-6850-4e9f-b407-211283f04a4c,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4788f2f7-8b97-41a8-88ee-697183f85246,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def reverse_list(l):
    if l == []:
        return []
    return [1, 2].append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance > radii",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def find_position_of_smallest(a, i):
    x = i
    while i < len(a):
        if a[i] < a[x]:
            x = i
        i = i + 1
    return x


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, j)
        swap(a, j, p)
        j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,3aed57e0-c2a2-49b2-afaf-23d3d77478fb,2016.0,,False
"def swap_keys_values(d):
    print(dict((v, k) for k, v in d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return dict((v, k) for k, v in d.items())",True
"def selection_sort(a):
    i = 0
    j = 1
    while j < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            if i != 0:
                i -= 1
                j -= 1
        else:
            i += 1
            j += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def area(r):
    return pi * (r * r)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return reverse_list(l[1:]) + [l[0]]",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {k: v for k, v in sorted(items)}
    return d2",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return


def reverse(a):
    return swap(a, 2, 3)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,68f143f9-a076-4b95-afe1-e3828c2d0f4e,2016.0,,False
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = str(a.pop())
    if int(test) < int(minimum) or int(minimum) == 0:
        return minimum(a, int(test))
    return minimum(a, int(minimum))",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(a, mini=0):
    if not a:
        return mini
    test = a.pop()
    if test < mini or mini == 0:
        return minimum(a, test)
    return minimum(a, mini)",True
"def swap_keys_values(d):
    return {k: v for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x2 - x1 + (y2 - y1)) ** 0.5 / 2
    radii = r1 + r2
    print((distance, radii))",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"def square_perimeter(n):
    sqaure_perimeter = n * 4
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(n):
    square_perimeter = n * 4
    return square_perimeter",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def swap_unique_keys_values(d):
    c = {}
    e = []
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] += 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def swap_unique_keys_values(d):
    A = False
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if A:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    for k, v in list(d.items()):
        if v in new:
            if A:
                0
            dictionary[v] = k
    return dictionary",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def reverse_list(l):
    new_l = []
    sortedl = [i for i in sorted[l]]
    for i in range(len(l)):
        new_l += sortedl[len(l) - i - 1]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    a, b = 1, 1
    for i in range(n - 1):
        a, b = b, a + b
    if True:
        return a",True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,12d00542-0a26-4a35-a142-ccd508484c14,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        new_l = []
        sortedl = [i for i in sorted(l)]
        for i in range(len(l)):
            new_l.append(sortedl[len(l) - i - 1])
        return new_l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def swap_keys_values(d):
    d1 = {v: k for k, v in list(d.items()).sorted()}
    print(list(d1.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = sorted(d)
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e84cb3e0-5b98-4543-816e-a3570ba72e05,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def partition(l, p, r):
    q = j = p
    while j < r:
        if l[j] <= l[r]:
            l[q], l[j] = l[j], l[q]
            q += 1
        j += 1
    l[q], l[r] = l[r], l[q]
    return q


def quicksort(l, p, r):
    if r <= p:
        return l
    q = partition(l, p, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,b13f3dba-a06b-4528-a4d8-c2ee1a5bb34d,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a758f933-ec7a-444d-b3d2-f685ac9d9563,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    return swap(a)",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    while low != high:
        if high < low:
            return -1
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            return mid",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3299788f-7847-4a87-af83-a4ce95b853ee,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        if a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= [high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,57b690d2-56f4-4fcf-abf7-8719f8802aae,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == 0:
        return 1
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    if True:
        0
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n + 1):
        c = a + b
        return n
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,86f3bfd9-abca-4a94-ac95-d257d354e3e5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    swapped_dict = {v: k for k, v in list(d.items())}
    return set(swapped_dict)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,48db4273-a21e-41be-bca6-9b6444a15cbf,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 + y2) ** 2) ** 0.5
    if r1 + r2 > dis and dis != 0:
        return True
    elif dis == 0 and r1 == r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a493c80e-3567-462a-bcbe-7bd974d52d8a,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f278f0d6-3389-497b-a30b-f0d8ecebb7e1,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(a):
    prev = 1
    curr = 1
    for i in range(0, a):
        tmp = curr
        curr = prev + curr
        prev = tmp
    return prev",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        a = b
        b = temp + b
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    if (r1 + r2 == distance or abs(r1 - r2) == distance
        ) and distance <= r1 + r2 - 1:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    item1 = (x2 - x1) ** 2
    item2 = (y2 - y1) ** 2
    item3 = item1 + item2
    distance = item3 ** (1 / 2)
    radiusd = r1 + r2
    if distance < radiusd:
        return True
    else:
        return False",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1
    return selectionsort(A)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[i]:
                p = j
            j += 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = +1",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def overlap(x0=0, y0=0, R0=1, x1=0, y1=0, R1=1):
    try:
        overlap = False
        if math.sqrt((x0 - x1) ** 2 + (y0 - y1) ** 2) < R0 + R1:
            overlap = True
        return overlap
    except KeyError:
        print(True)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def swap_keys_values(my_dict):
    d = {v: k for k, v in list(d.items())}
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def swap_keys_values(d):
    d = {v: k for k, v in list(d.items())}
    return d",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    print(q)
    print(a, len(a))
    print(low, high)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        print(q)
        print(a, len(a))
        print(low, mid, high)
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,553c9a10-8e3d-401b-8100-2094287197ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def area(r):
    return PI * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (y2 - y1) ** 2 + (x2 - x1) ** 2 < (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,72de96bc-40bc-48ca-b1c3-91150748b31a,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def overlap(x1=0, x2=0, r1=1, y1=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return distance < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return dist < r1 + r2",True
"def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return distance(x1, y1, x2, y2) < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,False
"def circle_area(n):
    ca = 3.14 * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def circle_area(n):
    ca = 3.14 * (n * n)
    return ca",True
"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        print(-1)
    elif string[count] == letter:
        print(count)
    else:
        index(string, letter, count + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(string, letter, count):
    print(count)
    k = len(string)
    if count == k:
        return -1
    elif string[count] == letter:
        return count
    else:
        return index(string, letter, count + 1)",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return c
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def reverse_list(l, i=None):
    if i is None:
        i = len(l)
    if i > 0:
        return reverse_list(l[1:] + [l[0]], i - 1)
    else:
        return l",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(l, new_l=None):
    if new_l is None:
        new_l = []
    if len(l) > 0:
        i = l[0]
        l = l[1:]
        new_l = [i] + new_l
        return reverse_list(l, new_l)
    else:
        return new_l",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,106d34e0-d03c-42ab-a67a-b88759ff6307,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def reverse_list(l):
    new_list = []
    i = 0
    while len(l) > i:
        new_list.append(l.pop())
        i += 1
    return new_list",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def reverse_list(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a.pop())
    i = i + 1
    return b",True
"def swap(l, i, j):
    temp = l[i]
    l[i] = l[j]
    l[j] = temp


def quicksort(l, p, r):
    if r <= p:
        return l
    q = p
    for j in range(p, r):
        if l[j] <= l[r]:
            swap(l, j, q)
            q += 1
    swap(l, q, r)
    quicksort(l, p, q - 1)
    quicksort(l, q + 1, r)
    return l",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,,False
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def reverse_list(a):
    return reverse_list(a[1:]) + [a[0]]",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def reverse_list(l):
    return reverse_list(l[1:]) + [l[0]] if l else []",True
"def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def count_letters(s, c=0):
    if s == '':
        return c
    s = s[1:]
    c = c + 1
    return count_letters(s, c)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = math.sqrt(circles)
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    total_radius = r1 + r2
    if distance < total_radius:
        return True
    else:
        return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            assert low == 0 or a[low - 1] < q
            assert high == len(a) or q <= a[high]
        else:
            mid = low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_d = {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def index(string, letter):
    if letter in string:
        i = 0
        while i < len(string):
            if letter == string[i]:
                return i
            i += 1
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter):
    i = 0
    if letter in str:
        c = letter[0]
        for ch in str:
            if ch == c and str[i:i + len(letter)] == letter:
                return i
            i += 1
    if True:
        return -1",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def index(word, letter):
    i = 0
    while i < len(word):
        if letter not in word:
            return -1
        elif word[i] == letter:
            return i
        else:
            i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,1caca58f-3988-4910-af7d-3a09c8ed5647,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if False:
            0
        if str[i] == letter:
            return i
        else:
            i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        elif a[mid] == q:
            return mid
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,05bc0114-9d34-4210-bb9b-07af403e11ed,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        guess = low + (high - low) // 2
        if a[guess] == q:
            return walkback(a, q, guess)
        elif a[guess] < q:
            low = guess + 1
        else:
            high = guess
    return low",False
"def fibonacci(n):
    a = 0
    b = 1
    l = []
    c = 0
    while c != n:
        a += b
        a, b = b, a
        l.append(a)
        c += 1
    return l[-1]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        if True:
            a = b
            b = temp + b
    return a",True
"def reverse(a):
    i = 0
    while i < len(a):
        print(a[len(a) - i - 1])
        i = i + 1",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,72504244-3803-4754-91e3-5c7732106556,2015.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - i - 1])
        i = i + 1
    return b",True
"def square_area(n):
    sa = n + n
    return sa",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def square_area(n):
    sa = n * n
    return sa",True
"def count_letters(s):
    for t in s:
        total = 0
        total += 1
    if s == '':
        return total
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    total = 0
    for x in s:
        total += 1
    if True:
        return total",True
"def sort(a):
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def index(str, letter):
    if letter in str:
        pos = str.index(letter)
        return pos
    else:
        return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def reverse(n):
    a = []
    i = 0
    while i < len(n):
        a.append(n)
        i = i + 1
    print(a)",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def reverse(a):
    b = []
    i = 0
    while i < len(a):
        b.append(a[len(a) - 1 - i])
        i = i + 1
    return b",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i = i + 1
        j = j - 1
    return a",False
"def swap_unique_keys_values(d):
    new_dict = {}
    seen = []
    for z, q in list(d.items()):
        if q not in seen:
            new_dict[q] = z
        seen.append(q)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def power(m, n):
    while n > 0:
        m = m * m
        n = n - 1
    return m",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        print(True)
    else:
        print(False)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e5db5e57-0261-4967-963a-42d1a98c03de,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    try:
        overlap = False
        if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
            overlap = True
        return overlap
    except TypeError:
        pass",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,6ae36e81-5a79-4a87-a484-a86635591a14,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    A = False
    if A:
        0
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return A
    else:
        return True",True
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    while i < n - i:
        x = i
        i = i + z
        z = x
        print(i)
        print(z)
        print(x)
    print(i)",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,329aa290-1bfb-4cf3-82e0-ca13ee54db0f,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        tmp = int(fib[i - 2]) + int(fib[i - 1])
        fib.append(tmp)
        i += 1
    return fib[n]",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    from math import sqrt
    print((x1, y1, r1, x2, y2, r2))
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    print(dist < r1 + r2)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def _quicksort(array):
    if len(array) <= 1:
        return array
    else:
        piv = array[0]
        less = []
        greater = []
        for i in array:
            if i < piv:
                less = less + [i]
            else:
                greater = greater + [i]
        less = _quicksort(less)
        greater = _quicksort(greater)
        return less + greater


def quicksort(array, a, b):
    array = _quicksort(array)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def fibonacci(s):
    if s <= 1:
        return 1
    else:
        return fibonacci(s - 1) + fibonacci(s - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0412928d-97c6-46f2-980b-7d98214b9765,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    pprint(sorted(new_dict.items()))
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def fibonacci(n):
    i = 0
    while i < len(n - 1):
        if n + 1 == n + 2:
            return i
        i += 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if j < p:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def fibonacci(a, curr=1):
    if a == 0:
        return curr
    return curr + fibonacci(a - 1, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def partition(A, p, r):
    q = j = p
    while j < r:
        if A[j] <= A[r]:
            A[q], A[j] = A[j], A[q]
            q += 1
        j += 1
    A[q], A[r] = A[r], A[q]
    return q


def quicksort(A, p, r):
    if r <= p:
        return ()
    q = partition(A, p, r)
    quicksort(A, p, q - 1)
    quicksort(A, q + 1, r)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,,False
"def circumference(r):
    return r * pi * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def circumference(r):
    return 3.141 * r * 2",True
"def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,6cbd9686-8a3c-4d12-8a1a-70c661732027,2016.0,,False
"def fibonacci(n):
    i = 1
    z = 0
    x = 0
    if n > 0:
        while i < n:
            x = i
            i = i + z
            z = x
        return i
    else:
        return 0",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,7c96bda5-98ec-4cff-a3e4-0118a7fafe5d,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 > distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if key == k:
                break
            if di[k] == d[key]:
                continue
            else:
                store[key] = d[k]
    return {v: k for v, k in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,2f34a0ed-0d6a-447e-8e47-6a90f11d53a7,2016.0,"def swap_unique_keys_values(a):
    if True:
        0
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,41abe035-c2cd-41c3-ba39-497868b0334d,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"_A = None


def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        maximum(new_l, item if old_max == _A or item > old_max else old_max)
    else:
        return old_max",maximum,maximum,Return the maximum element in a list of numbers.,"assert maximum([0])==0 and maximum([67, 1, 2, -2, 0])==67 and maximum([0, -2, 2, 1, 67])==67 and maximum([-10, -23, -45, -9, -45617])==-9",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def maximum(l, old_max=_A):
    try:
        item = l[0]
    except IndexError:
        item = _A
    if item is not _A:
        new_l = l[1:]
        return maximum(new_l, item if old_max == _A or item > old_max else
            old_max)
    else:
        return old_max",False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def sort(a):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,dbbf7e1a-95ff-4b8a-b26d-18d6ccae623c,2016.0,"def sort(a):
    i = 0",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    for key, value in list(d.items()):
        if value not in new_dict:
            new_dict[value] = key
        else:
            del new_dict[value]
    return new_dict",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p <= dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",True
"def index(string, letter):
    i = 0
    test = -1
    while i < len(string):
        if letter == string[i]:
            test = i
        i = i + 1
    return test",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            assert a[mid + 1 - 1] < q
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,20997107-3eee-4a62-bc0c-56e29ffe0c3d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_d = {}
    for k in d:
        if d[k] not in new_d:
            new_d[d[k]] = k
    return new_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def swap_unique_keys_values(d):
    new_d = {}
    for key in d:
        if list(d.values()).count(d[key]) == 1:
            new_d[d[key]] = key
    return new_d",True
"def index(str, letter):
    start = len(str) - 1
    end = -1
    while start > end:
        if letter == str[start]:
            return start
        else:
            start -= 1
    return end",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return False
    else:
        return True",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def power(m, n):
    return power(m - 1, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def power(m, n):
    return m ** n",True
"def fibonacci(n):
    if n < 2:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    for i in a:
        j = 0
        while j < len(a):
            if i < a[j]:
                a[j] = i
            j += 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def reverse(a_string):
    new_string = ''
    index = len(a_string)
    while index:
        index -= 1
        new_string += a_string[index]
    return new_string",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,c45598e5-3acc-4052-b18a-228b6bd842f6,2016.0,"def reverse(a):
    b = []
    while len(a) != 0:
        b.append(a.pop())
    return b",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    j = 0
    while j < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, j)
    j = j + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,03324848-d1b1-4b00-9ab7-93d76a61a9c0,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if d.values.count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def minimum(a):
    a_sorted = sorted(a)
    return a",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def minimum(a):
    a = sorted(a)
    return a[0]",True
"def fibonacci(n):
    if n == 0:
        return 1
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    for c in str:
        if c == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse(a):
    a = a[::a - 1]
    return a",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6bdfefac-1fa3-44c6-b066-9e1536e0210e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    values = list(d.values())
    items = list(d.items())
    l = {v: k for k, v in items if values.count(v) == 1}
    return sorted(l)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    items = [(y, x) for x, y in list(d.items())]
    d2 = {v: k for v, k in sorted(items) if values.count(v) == 1}
    return d2",True
"def square_area(n):
    sq = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016.0,"def square_area(n):
    sq = n * n
    return sq",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0af1b08-7254-49f0-8cc4-d63a85c9199d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def search(string, letter):
    if len(string) == 0:
        return 'False'
    elif string[0] == letter:
        return 'True'
    else:
        return search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    return reverse_list(l).append(l[:-1])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    area = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(l, w):
    if True:
        return 2 * (l + w)",True
"def swap_keys_values(d):
    return {(v, k) for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort():
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,f1f904a5-bcf8-461e-8792-f0a8d0db3f47,2016.0,,False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = ij = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i < n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return n
    elif n == 1:
        return n
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            sum1 = a + b
            a = b
            b = sum1
            i += 1
        return sum1",True
"def count_letters(s):
    if s == '':
        return total
    for t in s:
        total = 0
        total += 1
    print(total)
    s = ''
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    a = 0
    for letter in s:
        a += 1
    return a",True
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[0:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def overlap(x1, y1, r1, x2, y2, r2):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if d >= r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def overlap(x1, y1, r1, x2, y2, r2):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            fib = a + b
            a = b
            b = fib
            i += 1
        return fib",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,995eab58-b496-45c9-aacf-4878531bfc6f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    global skip
    check = []
    for x in list(d.keys()):
        if d[x] not in check:
            check.append(d[x])
        else:
            skip.append(d[x])
    return skip",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    for keys in list(d.keys()):
        temp = d[keys]
        if temp in new_dict:
            del new_dict[temp]
        else:
            new_dict[temp] = keys
    return new_dict",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    for char in str:
        if char == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
        return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,46954879-c4e4-4ce6-87d4-00184c62b522,2015.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1
    return a",False
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(s, letter, pos):
    if pos == len(s):
        return '-1'
    elif s[pos] == letter:
        return pos
    else:
        return index(s, letter, pos + 1)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
    j = i
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,639d0a36-d89c-469e-a1ae-4cadc99d8827,2016.0,,False
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    length = len(n)
    return length",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return count_letters(s[1:]) + 1",True
"def selection_sort(a):
    return a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def selection_sort(a):
    return sorted(a)",True
"def area(r):
    y = pi * r ** 2
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,"def area(r):
    s = 3.141 * r ** 2
    return s",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def area(r):
    y = pi * r * r
    return y",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def area(r):
    y = 3.141 * int(r) ** 2
    return y",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return (x2 - x1 + (y2 - y1)) ** 0.5 / 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    print(list(swapped_d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2bcea2a1-925b-4db5-8403-2d8af9d0bb46,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3bcffc16-908f-42c5-9ac3-f685ae6eca33,2015.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            print(v)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9ae0539b-3842-4209-9c3e-252c74db087e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse():
    a = a[::-1]",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def reverse(a):
    return a[::-1]",True
"def swap_unique_keys_values(d):
    print(list(d.items()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
            for s in list(d.items()):
                if d[s] == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    if True:
        for k, v in list(d.items()):
            if val.count(v) == 1:
                store[k] = v
        return {v: k for k, v in list(store.items())}
    else:
        0",True
"def fibonacci(aaliyah, supercalifragilisticespialidotious=0, koppaberg=1):
    if not aaliyah:
        return koppaberg
    return fibonacci(aaliyah - 1, koppaberg, 
        supercalifragilisticespialidotious + koppaberg)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,False
"def swap_keys_values(d):
    new_d = {}
    for key, val in d.items:
        new_d[val] = key
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,"def swap_keys_values(d):
    new_d = {}
    for key, val in list(d.items()):
        new_d[val] = key
    return new_d",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,712c50ed-0c17-44f1-a863-183f2d9a5e14,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def area(radius):
    return pi * radius ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(string, letter, pos=0):
    if string == '':
        return '-1'
    elif string[0] == letter:
        return pos
    else:
        pos += 1
        return index(string[1:], letter, pos=pos)",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,813b8c22-4514-4fed-ac48-d5a7a4b068dd,2016.0,"def index(str, letter, pos):
    if pos == len(str):
        return -1
    elif str[pos] == letter:
        return pos
    else:
        return index(str, letter, pos + 1)",True
"def swap_unique_keys_values():
    d1 = {v: k for k, v in list(d.items()) if d.count(d[v]) == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a2b86688-0a82-4779-8335-a584906257b0,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f15a871d-61c5-494f-8886-91e213b59201,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    tempd = {}
    tempd = {k: v for k, v in list(d.items()) if list(v).count(v) < 2}
    new_dict = {v: k for k, v in list(tempd.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    b = 0
    j = 1
    while j < len(a):
        if a[j] < a[b]:
            p = j
        j = j + 1
    return b",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,065cc64f-1be3-42fb-9f2e-8280c11aa573,2016.0,"def sort(a):
    i = 0
    p = 0
    while i < len(a):
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def area(n):
    p * n ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,17658437-97b1-4a8a-ac6f-a63a54536e33,2016.0,"def area(n):
    return 3.141 * n ** 2",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        temp = a[i]
        a[i] = a[p]
        a[p] = temp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[i]
        a[i] = a[p]
        a[p] = tmp
        i += 1
    return a",True
"def append2list(l1, l2=[]):
    l2 = []
    for i in l1:
        l2.append(i)
    return l2",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def swap_keys_values():
    {v: k for k, v in list(sys.argv[0].items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,794362b7-cbcd-4bea-bafb-7967c266e248,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            break
            print('True')
        else:
            print('False')
        i += 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        else:
            i = i + 1
    return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=0):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 1 / 2 < r1 + r2:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1 ** 2)) ** 1 / 2 < r1 + r2:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    rneg = r1 - r2
    if d == rpos:
        return True
    elif d == rneg:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    r = r1 + r2
    if True:
        0
    if d >= r:
        return False
    else:
        return True",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dc42d7ae-53d0-4b49-988b-c619edf38a77,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,6618fe7e-6fd3-499b-a742-8d68ec712ad3,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        j = i
        k = i + 1
        while k < len(a):
            if a[k] < a[j]:
                j = k
            k = k + 1
        tmp = a[j]
        a[j] = a[i]
        a[i] = tmp
        i = i + 1",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 <= sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2):
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,fc73b043-0c96-4ce3-8b8f-2c4c98785aa6,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def minimum(a, minimum=0):
    if not a:
        return minimum
    test = a.pop()
    if test < minimum or minimum == 0:
        return minimum(a, test)
    else:
        return minimum(a, minimum)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    if l[0] < l[-1]:
        return minimum(l[:-1])
    else:
        return minimum(l[1:])",True
"def count_letters(s):
    total = 0
    if s == '':
        return total
    total += 1
    s = s[:-1]
    print(s)
    return count_letters(s)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def count_letters(s):
    if s == '':
        return 0
    s = s[1:]
    return 1 + count_letters(s)",True
"def quicksort(a):
    less = []
    equal = []
    greater = []
    if len(a) > 1:
        pivot = a[0]
        for x in a:
            if x < pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x > pivot:
                greater.append(x)
        return sort(less) + equal + sort(greater)
    else:
        return a",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def quicksort(A, start, end):
    if True:
        0
    if end - start < 1:
        return
    i = j = start
    if True:
        while i <= end:
            if A[i] <= A[end]:
                A[i], A[j] = A[j], A[i]
                j += 1
            i += 1
        quicksort(A, start, j - 2)
        quicksort(A, j, end)
    else:
        0",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,3f0a2ff2-f068-43e9-9a21-42850d31b8d3,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    for c in str:
        if c == letter:
            return True
        else:
            return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,89186303-b7a8-4f4c-9627-06ba24e03bbb,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    return 1 if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,df8dd1dd-a7c8-46c0-b89f-ec170a81f08a,2016.0,"def circle_area(r):
    return r * r * 3.14",True
"def chksorted(a):
    for i in range(len(a) - 1):
        if not a[i] < a[i + 1]:
            return False
    return True


def selectionsort(array):

    def chksorted(a):
        for i in range(len(a) - 1):
            if not a[i] < a[i + 1]:
                return False
        return True
    m = min(array)
    mi = array.index(m)
    if not chksorted(array):
        f = array[0]
        array[0] = m
        array[mi] = f",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,,False
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap_unique_keys_values(d):
    print(d)
    print(list(d.values()))",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def selectionsort(a):
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            if a[i] > a[j]:
                a[i], a[j] = a[j], a[i]
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def selectionsort(array):
    for i in range(len(array)):
        for j in range(i, len(array)):
            if array[i] > array[j]:
                array[i], array[j] = array[j], array[i]",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p, j = i, i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[p], a[i] = a[i], a[p]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def swap_unique_keys_values(d):
    items = list(d.items())
    for w in items:
        if items.count(w) > 1:
            d.popitem(d[w])
            for s in items:
                if s == w:
                    d.popitem(d[s])
    d = {v: k for k, v in list(d.items())}
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(d):
    store = {}
    val = []
    va = list(d.values())
    for i in va:
        val.append(i)
    print(val)
    for k, v in list(d.items()):
        if val.count(v) == 1:
            store[k] = v
        if False:
            0
    return {v: k for k, v in list(store.items())}",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    if True:
        0
    return sum1",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,a2b86688-0a82-4779-8335-a584906257b0,2016.0,"def swap_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items())])
    return new_dict",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def sort(a):
    p = i
    j = i + 1
    i = 0
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if di[k] == d[key]:
                0
            else:
                store[k] = d[k]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
        return high",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0bbdcdf-7e56-44f5-b27d-7b9822c0a1d6,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    if letter in str:
        return 'True'.rstrip()
    else:
        return 'False'.rstrip()",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    r = r1 + r2
    if d < r:
        return 'True'
    else:
        return 'False'",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",True
"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,6ae36e81-5a79-4a87-a484-a86635591a14,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    i = 0
    while i < len(a):
        find_position_of_smallest.sort(a)
        swap.sort(a)
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,4b4cb32f-e677-40c7-8bdb-79ba1dd2a70b,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if q > a[mid]:
            assert a[low - 1] < q
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,f4380e0a-3bfd-44c6-b455-fe1018a45321,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def swap_keys_values(d):
    for key in d:
        d[key] = key
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def swap_keys_values(d):
    swapped_d = {}
    for key in d:
        swapped_d[d[key]] = key
    return swapped_d",True
"def swap_keys_values(d):
    new_dict = {v: k for k, v in list(d.items())}
    print(sorted(new_dict.items()))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def swap_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    print(sorted(new_dict.items()))
    return new_dict",True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        if l.count(c[1]) == 1:
            z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return x2 - x1 + (y2 - y1) ** 0.5 < r1 + r2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,32a14d12-9054-46cd-aa7e-4bf97d33fa10,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,156114dd-8a1c-4e95-a7b3-fb54488e2dcf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 0
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selection_sort(a):
    p = 0
    j = 0
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def square_area(n):
    sq = n * n
    return result",square_area,square_area,Return the area of a square.,assert square_area(0)==0 and square_area(21138)==446815044,False,5c105474-42d8-4a95-a311-034a93c693c8,2016.0,"def square_area(n):
    sq = n * n
    return sq",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if d.values.count(k) > 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,5cf0f5b5-a91e-4c33-8ac1-92aa868cd3b0,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def circumference(r):
    y = 2 * pi * r
    return y",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,"def circumference(r):
    y = 2 * 3.141 * r
    return y",True
"def swap_unique_keys_values(d):
    return set({v: k for k, v in d})",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",index_recur,index,"Recursively search for the position of letter in str, return -1 if it is not there.","assert index('','0',0)==-1 and index('0','0',0)==0 and index('a','8',0)==-1 and index('tV2','2',0)==2",False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def index(str, letter, num):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i += 1
    return -1",True
"def index(ls, letter):
    for item in ls:
        if item == -1:
            return ls",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,df44f889-e513-4dcf-9230-82eca3e43f36,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        i = i + 1
    return -1",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4e44ac28-c84a-43ee-9b95-c4270d7bb030,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    while i < len(a):
        p = find_position_of_smallest
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,2a1a0a7b-975b-4463-96bb-4f52900ce463,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,85db1d22-a87d-4132-bd9a-e07bf9282015,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return pi * r * 2",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def circumference(r):
    return 3.141 * r * 2",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = p + 1
    while i < len(a):
        if a[p] < a[j]:
            j = p
        i = i + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (x1 - x2) ** 2 + (y1 - y2) ** 2
    if (r1 + r2) ** 2 > distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dis = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    if r1 + r2 > dis:
        return True
    else:
        return False",True
"def search(str, letter):
    if letter in str:
        return 'True'
    else:
        return 'False'",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == n - 1 + (n - 2):
        return n
    else:
        fibonacci(n + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def search(str, letter):
    for item in str:
        if item == letter:
            return False
        else:
            return True",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        else:
            0
    return False",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            j = p
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def search(str, letter):
    if letter in str:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2015.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,dcc2a3d3-d90d-4640-9797-7d037bff9027,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    for i in a:
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    radii = r1 + r2
    return radii > dist",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    radii = r1 + r2
    return distance < radii",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    c = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if c > r1 and c > r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,f463a026-5eb4-4a39-a858-3a798215a4ee,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if True:
        0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    else:
        0
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = tmp
    return fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    a = pi * r * r
    return a",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,f0b2f578-ae0f-4ddc-94e9-204708d09f37,2016.0,"def area(r):
    s = 3.141 * r ** 2
    return s",True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(str(a[no]).count(lis))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = a[i]


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1
    return A",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def selectionsort(A):
    i = 0
    while i < len(A):
        p = i
        j = i + 1
        while j < len(A):
            if A[j] < A[p]:
                p = j
            j = j + 1
        tmp = A[p]
        A[p] = A[i]
        A[i] = tmp
        i = i + 1",True
"def search(str, letter):
    for item in str:
        if item == letter:
            return True
        return False",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,46396c6c-a25c-4fd6-ac1b-a1163f81f5f8,2016.0,"def search(str, letter):
    for item in str:
        if item == letter:
            return True
    return False",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(a[no])
    dir = {}
    for i in a:
        if a[no].count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.items()):
        if no.count(a) > 1:
            lis.append(no)
    print(lis)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    lis = []
    for no in list(a.values()):
        if list(a.values()).count(no) > 1:
            lis.append(no)
    dir = {}
    for i in a:
        if a[i] not in lis:
            dir[a[i]] = i
    return dir",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap_unique_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    new_dict.pop(7, None)
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,334b0f61-5fa3-43cf-8691-29f975dd7270,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(l):
    return l.sort()[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def minimum(l):
    return sorted(l)[0]",True
"def swap_keys_values(d):
    d = {'cat': 2, 'dog': 7, 'horse': 9, 'whale': 14}
    for key, value in d:
        {value: key for key, value in list(d.items())}
    print(swap_keys_values(d))",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_keys_values(d):
    dic = {}
    for key, value in list(d.items()):
        dic[value] = key
    return dic",True
"def fibonacci(a):
    if a == 0:
        return 1
    elif a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,477d4ab3-7007-4ba6-b1ff-797966495e9d,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_keys_values(k, v):
    print({v: k for k, v in list(d.items())})",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 2) + fibonacci(n - 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    list = set()
    for k, v in in_dict.items:
        if v in out_dict():
            list.append([v])
            del out_dict[v]
        elif v not in list:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0bd18cc-b8fa-4b4a-87c2-5e1043d7ff6c,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blacklist = set()
    for k, v in list(in_dict.items()):
        if v in out_dict:
            blacklist.update([v])
            del out_dict[v]
        elif v not in blacklist:
            out_dict[v] = k
    return out_dict",True
"def fibonacci(a, prev=0, curr=1):
    if a == 0:
        return 1
    prev = curr
    return 1 + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def reverse_list(l):
    if len(l) == 2:
        a = []
        a.append(l[1])
        a.append(l[0])
        return a
    return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[-1]
    l.pop()
    return [a] + reverse_list(l)",True
"def swap_unique_keys_values(d):
    print(list(d.keys()))
    for w in list(d.items()):
        if list(d.items()).count(w) > 1:
            d.popitem(d[w])
    return d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,b3fb7be5-b8f9-4b08-be4d-66eb3fcb7782,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def minimum(a):
    if len(a) == 1:
        return a
    b = max(a)
    a.replace(b, '')
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def minimum(a):
    if len(a) == 1:
        return a[0]
    b = max(a)
    a = [c for c in a if c != b]
    return minimum(a)",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,6668ebd6-a850-4666-b8cc-5c934a67601a,2015.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    elif len(l) == 1:
        return reverse_list(l[1:]).append(l[0])
    else:
        return reverse_list(l[1:]).append(l[0])",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    else:
        return [l[-1]] + reverse_list(l[:-1])",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2b5f9b04-bd61-4108-b289-84a2c1002a82,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_d = {}
    a = set(d.values()) | set(d.values())
    print(a)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n, first_number=0, second_number=1, counter=0):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    elif n == counter:
        return second_number
    else:
        holder = second_number
        second_number += first_number
        first_number = holder
        return fibonacci(n, first_number, second_number, counter + 1)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        return fibonacci(n - 2) + fibonacci(n - 1)",True
"def sort(a):
    i = 0
    p = 1
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,7c4a70b0-f238-44c3-98e9-fba759a5438b,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
    if a[mid] < q:
        low = mid + 1
        assert low == 0 or a[low - 1] < q
    else:
        high = mid
        assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7352a7ab-bc53-49d3-8ca7-32aa046fe82d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a) - 1
    mid = 0
    while low < len(a) and a[low] < q:
        mid = (high + low) // 2
        if False:
            0
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = SortedDict(d)
    print(d.items)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def fibonacci(n):
    i = 0
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def fibonacci(n):
    i = 2
    num = 1
    num1 = 1
    num2 = 1
    if n == 0:
        return 0
    elif n == 1:
        return 1
    while i < n:
        num = num2 + num1
        num1 = num2
        num2 = num
        i = i + 1
    if n != 0 and n != 1:
        return num",True
"def selection_sort(a):
    return a.sort()",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,bd03ecd6-cea3-4854-803a-b14d429489a7,2016.0,"def selection_sort(a):
    return sorted(a)",True
"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return False",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if str[i] == letter:
            return i
        i = i + 1
    return -1",True
"def selection_sort(a):
    i = 0
    j = i + 1
    while i < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
        j = j + 1
    i = i + 1
    return a",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,24b328b2-2b24-43bc-9468-d9ba1d7df521,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        if True:
            p = find_smallest_value(a, i)
            swap(a, i, p)
            i += 1
    return a",False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,46432289-e1c4-49da-8392-8dfa0d08a950,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2015.0,"def area(r):
    return 3.141 * r ** 2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def sort(a):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def area(r):
    return pi * (r * r)",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def index(s, letter):
    if letter in s:
        print(str.index(letter))
    else:
        print(-1)",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def index(s, letter):
    if letter in s:
        return s.index(letter)
    else:
        return -1",True
"def overlap(x1, y1, r1, x2, y2, r2):
    x1 = 0
    y1 = 0
    r1 = 1
    x2 = 0
    y2 = 0
    r2 = 1
    if r1 + r2 >= ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,5065a0ff-7a47-48ce-b85e-50368a79de61,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if r1 + r2 > ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,46954879-c4e4-4ce6-87d4-00184c62b522,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse_list(a, b=[]):
    if a == []:
        return b
    b.append(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return l
    return l[-1:] + reverse_list(l[:-1])",True
"def minimum(l):
    a = l[len(l) - 1]
    if len(l) == 1:
        return l[0]
    if a >= minimum(l):
        return minimum([j for j in l[:-1]])",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    smaller = minimum(l[1:])
    if l[0] < smaller:
        return l[0]
    return smaller",True
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,058b18f6-cf34-4afc-8b4e-0f7705be27f0,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        if a[i] < a[p]:
            tmp = a[p]
            a[p] = a[i]
            a[i] = tmp
        i = i + 1",True
"def swap_unique_keys_values(d):
    store = {}
    di = d
    for key in d:
        for k in di:
            if d[key] == di[k]:
                0
            else:
                store[key] = d[key]
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    l = []
    m = []
    for v in list(d.values()):
        if v in l:
            m.append(v)
        else:
            l.append(v)
    return {v: k for k, v in list(d.items()) if v not in m}",True
"def fibonacci(a, prev=1, curr=1):
    if a == 0:
        return prev
    tmp = curr
    curr += prev
    prev = curr
    return prev + fibonacci(a - 1, prev, curr)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    prev = 0
    cur = 1
    i = 0
    while i < n:
        tmp = cur
        cur = cur + prev
        prev = tmp
        i = i + 1
    return cur",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,88e97329-9c3f-4e1a-8643-1311f4e801a9,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        temp = a
        if True:
            a = b
            b = temp + b
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    mid = 0
    i = 0
    if q in a:
        while a[i] != q:
            i += 1
        print(i)
    else:
        while low != high:
            mid = (high + low) / 2
            if a[mid] < low:
                high = mid
            else:
                low = mid
            print(low)",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    if False:
        0
    if True:
        0
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, -i - 1)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,8fca450a-2117-453b-8f1b-f55a98c9bdb9,2016.0,,False
"def reverse_list(a, b=''):
    if a == []:
        return b.strip.split(' ')
    b += ' ' + str(a[-1])
    return reverse_list(a[:-1], b)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def reverse_list(l):
    if l == []:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,06043f63-bd06-4b6c-9b40-184b4eca2307,2016.0,,False
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,08b41ad4-ecde-43b9-b629-6ff77ac435fc,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def bsearch(a, q):
    high = len(a)
    low = 0
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b799d072-e18e-40e6-96cb-77c78c9e2a0f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def search(string, letter):
    if string[0] == letter:
        return True
        test = 1
    else:
        search(string[1:], letter)
    if test != 1:
        return False",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def search(string, letter):
    if letter in string:
        print('True')
    else:
        print('False')
    return 1",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    if letter in string:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,False
"def recursive_selectionsort(A, i):
    if i >= len(a) - 1:
        return
    else:
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        recursive_selectionsort(A, i + 1)


def selectionsort(A):
    recursive_selectionsort(A, 0)",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,9675c8b9-337a-4fd1-bb8f-8e3510c7f703,2016.0,,False
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i += 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def search(s, letter, pos):
    if pos == len(s):
        print('False')
    elif s[pos] == letter:
        print('True')
    else:
        return search(s, letter, pos + 1)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def reverse_list(n=[]):
    if len(n) == 1:
        return 0
    else:
        return reverse_list(n - 1)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def reverse_list(m):
    if len(m) == 0:
        return m
    else:
        return [m.pop()] + reverse_list(m)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,87fe2a11-c843-4db7-a092-fa2c47cf613f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,03ce4b42-26f0-456c-9d48-18c0d16bec55,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp
    return a


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,,False
"def count_letters(n):
    if len(n) == 1:
        return n[0]
    return 1 + count_letters(n[1:])",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,31fe4020-d4b7-4bf5-ac95-b28807a90ae8,2016.0,"def count_letters(s):
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    print(lis)
    for i in a:
        if lis.count(no) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def sort(a):
    i = 0
    while i < len(a):
        p = find_postion_of_smallest(a, i)
        swap(a, p, i)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,fd20892b-e35f-43bc-b82d-e6db9320b8ae,2016.0,,False
"def rectangle_perimeter(x1, y1):
    rectancle_perimeter = 2 * x1 * y1
    return rectangle_perimeter",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(length, width):
    rectper = (length + width) * 2
    return rectper",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_smallest_position(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = find_smallest_position(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,,False
"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if d.count(d.values) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def swap_unique_keys_values(d):
    store = {}
    for k, v in list(d.items()):
        if list(d.values()).count(v) == 1:
            store[k] = v
    return {v: k for k, v in list(store.items())}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    if a >= r1 + r2:
        return False
    else:
        return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,051d024e-69b1-48d1-ba77-a6f2d97a48bc,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    hypotenuse = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if hypotenuse >= r1 + r2:
        return False
    else:
        return True",True
"def fibonacci(n):
    if n <= 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,9550e418-a019-49c2-a2e9-8322a300fb6f,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        print(c)
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def count_letters(inputed, counter=0):
    if inputed[:-1] == '':
        return counter
    if counter == 0:
        counter += 1
    return count_letters(inputed[:-1], counter + 1)",count_letters,count_letters,Return the number of lettres in a string.,assert count_letters('')==0 and count_letters('0')==1 and count_letters('##')==2 and count_letters('t')==1 and count_letters('fqfseqfseqsse')==13,False,e36ebdf2-7cd7-440f-af8b-386d6e2d920f,2016.0,"def count_letters(s):
    if True:
        0
    if s == '':
        return 0
    return 1 + count_letters(s[1:])",True
"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.remove[-1]
        else:
            list.remove[0]
        return minmum(list)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a49f3af8-fb92-43d5-945c-abc11916e319,2016.0,"def minimum(list):
    if len(list) == 1:
        return list[0]
    else:
        if list[-1] < list[0]:
            list.pop(0)
        else:
            list.pop(-1)
        return minimum(list)",True
"def sort(p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0f1cbd69-016d-4739-b232-fed37e5676ad,2016.0,"def sort(a):
    i = 0",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    while fib[n]:
        if n == 0:
            num = fib[0]
        elif n == 1:
            num = fib[1]
        else:
            num = fib[n - 1] + fib[n - 2]
        return num",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    a = 1
    if True:
        b = 1
        if n != 0:
            for i in range(n - 1):
                a, b = b, a + b
        else:
            return 0
        return a",True
"def swap_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def swap_keys_values(d):
    return {value: key for key, value in list(d.items())}",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,c0d569cd-4374-4e65-8e98-e814031fb3ca,2016.0,,False
"def reverse(n):
    reverse = a[len(a) - i - 1]
    return reverse",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,6cfd63a4-4ae6-4e36-a1eb-a1b3142265bb,2016.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return r2 >= math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) + r1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r2 + r1",True
"def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
    i += 1
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def reverse_list(l):
    new = []
    i = 0
    while i < len(l):
        new.append(l[len(l) - i - 1])
        i += 1
    return new",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,573bd795-e55d-4f35-83cb-b4c309fb0d57,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        middle = (low + high) / 2
        if a[middle] < q:
            low = middle
            assert low == 0 or a[low - 1] < q
        else:
            high = middle
            assert high == len(a) or q <= a[high]",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,54e7d279-e8ef-49c1-8aea-de3ac0b230cf,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    for i in d:
        j[d[i]] = i
        return j",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,6668ebd6-a850-4666-b8cc-5c934a67601a,2016.0,"def swap_keys_values(d):
    new_dict = {}
    for k in d:
        new_dict[d[k]] = k
    return new_dict",True
"def bsearch(arr, tgt):
    lo = 0
    hi = len(arr)
    while lo <= hi and (lo + hi) / 2 < len(arr):
        mid = (lo + hi) / 2
        if arr[mid] < tgt:
            lo = mid + 1
        else:
            hi = mid - 1
    return (lo + hi) / 2 + 1",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c7fa847c-561b-4652-9a01-05f954e6c8df,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = math.sqrt((x2 - x1) ** 2 + (y2 + y1) ** 2)
    r = r1 + r2
    return d < r",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,3d19e1db-d496-420c-b077-41631364e4f7,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    rpos = r1 + r2
    return d < rpos",True
"def swap(a, i, j):
    tmp = a[j]
    a[j] = a[i]
    a[i] = tmp


def find_position_of_smallest(a, i):
    p = i
    while i < len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
    return p


def sort(a):
    i = 0
    j = 1
    while i < len(a):
        find_position_of_smallest(a, i)
        swap(a, i, j)
        i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,ce889881-69dd-4396-aceb-e6f7dddc2c14,2016.0,,False
"def swap(a, i, j):
    temp = a[i]
    a[i] = a[j]
    a[j] = temp


def reverse(a):
    i = 0
    j = len(a) - 1
    while i < len(a) / 2:
        swap(a, i, j)
        i += 1
        j -= 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,15c8870d-4f5a-4578-b0fb-4dd4a4402626,2016.0,,False
"def reverse(a):
    return a.reverse()",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,2157ade0-6890-435b-8669-a884e3233bc7,2015.0,"def reverse(a):
    return swap(a)",False
"def swap_keys_values(d):
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,3e9f1e04-e9fd-4164-8fa5-c7feb1dcc1f5,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    if n == 0:
        return '0'
    elif n == 1:
        return '1'
    else:
        n1 = 1
        n2 = 0
        i = 2
        while i <= n:
            sum1 = n1 + n2
            n2 = n1
            n1 = sum1
            i += 1
        return sum1",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,ead2ade9-6c50-44a4-98f3-1d781d45a0f5,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
    i = 2
    while i <= n:
        sum1 = a + b
        a = b
        b = sum1
        i += 1
    if True:
        0
    return sum1",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) < r1 + r2:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    if ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2:
        return True
    else:
        return False",True
"def selectionsort(l):
    i = 0
    while i < len(l):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = sqrt(x + y)
    return r1 + r2 < distance",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    return r1 + r2 > distance",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    if distance >= r1 + r2:
        return False
    return True",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,ac1dec5e-a5eb-4183-ba72-3b639e82db3c,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    if d < r1 + r2:
        return True
    return False",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,caddc359-e5b0-41d8-94ab-df712d5ea9ce,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def rectangle_perimeter(x1, y1, x2, y2):
    dx = x1 - x2
    dy = y1 - y2
    perimeter = dx * dy
    if 0 <= area:
        return area",rectangle_perimeter,rectangle_perimeter,Return the perimeter of a rectangle with the given coordinates.,"assert rectangle_perimeter(0,0)==0 and rectangle_perimeter(7968917888512863576,-18677)==15937835777025689798",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def rectangle_perimeter(l, w):
    if True:
        return 2 * (l + w)",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = a[i]


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp
    i = i + 1",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,9f673df6-fcfd-4d07-b0dd-1f553c38f25b,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,0964a543-93db-460b-a0c5-d0c94fea250f,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def double(n):
    m = n * 2",double,double,Double a number or a string.,assert double(0)==0 and double(-7601)==-15202,False,336d0cd0-002e-4296-ba45-582077aac4a4,2016.0,"def double(n):
    return n * 2",True
"def swap_keys_values(d):
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return {d[key]: key for key in d}",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def find_position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def sort(a):
    i = 0
    while i < len(a):
        p = find_position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1
    return p",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,e5f35cd7-8337-4a68-bda3-4164a982feae,2016.0,,False
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,daaef1e8-1fe4-4dc4-b002-6e89fad22a66,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid and mid < high
        if a[mid] < q:
            low = mid + 1
            assert a[low - 1] < q
        else:
            high = mid
            assert q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,d0e5b214-932e-4ec6-ae62-66baacab8b6c,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in set(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse_list(l):
    if l == []:
        return []
    new = l.append(l[0])
    return new",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,a6392e0c-005c-4131-a7bb-80cf6af877de,2016.0,"def reverse_list(l):
    if l == []:
        return []
    temp = reverse_list(l[1:])
    temp.append(l[0])
    return temp",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.keys())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,75a32f49-710d-463f-8fee-0ae9b91a3034,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        search(str[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,fc19956d-3237-43b9-841d-e5882c3359f1,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,07a2a74b-d2da-4f91-ba7e-5881b51fd5e4,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    for pairs in zip(list(d.values()), list(d.items())):
        print(pairs)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"_A = None


def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,427cdab9-477f-4fb3-92b0-bf5eef785c90,2016.0,"def overlap(x1=_A, y1=_A, r1=_A, x2=_A, y2=_A, r2=_A):
    if x1 is _A:
        x1 = 0
    if y1 is _A:
        y1 = 0
    if r1 is _A:
        r1 = 1
    if x2 is _A:
        x2 = 0
    if y2 is _A:
        y2 = 0
    if r2 is _A:
        r2 = 1
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5 < r1 + r2",False
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p <= dist_r:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=0):
    dist_p = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    dist_r = r1 + r2
    if dist_p < dist_r:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def reverse(a):
    i = 0
    while i < len(a) / 2:
        swap(a, i, len(a) - 1 - i)
        i += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,4a7eb3c1-23d7-4547-a3af-8d940245a9a3,2016.0,,False
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def area(r):
    return pi * r ** 2",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,fe81d9d2-29fa-4a6b-abc0-109c9697b557,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if 'a' not in list(d.items())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,9a05c20e-2fde-40c1-948b-649e25b30e6e,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def reverse_list(l):
    if len(l) == 1:
        return l
    return [l[-1]].extend(reverse_list(l[:-1]))",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    return [l[-1]] + reverse_list(l[:-1])",True
"def swap_keys_values(d):
    for c in d:
        tmp == d[key]
        d[key] == value
        value == tmp
    return d",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,5a6b9af4-c978-4326-ba5b-405c4a284f15,2016.0,"def swap_keys_values(d):
    new_dictionary = {}
    for x in d:
        key = x
        value = d[x]
        new_dictionary[value] = key
    return new_dictionary",True
"def selectionsort(l):
    N = len(l)
    p = 0
    j = 1
    while j < N:
        if l[j] < l[p]:
            p = j
        j += 1
    return p",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        j = 0
        while j < len(a):
            if a[j] > a[i]:
                a[i], a[j] = a[j], a[i]
            j += 1
        i += 1",True
"def selection_sort(a):
    i = 0
    j = 1
    while j < len(a):
        if a[j] < a[i]:
            tmp = a[j]
            a[j] = a[i]
            a[i] = tmp
            if i != 0:
                i -= 1
                j -= 1
        else:
            i += 1
            j += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,3328e1f8-ae85-4d26-8d1c-386e7e2467dc,2015.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        while j < len(a):
            if a[j] < a[i]:
                tmp = a[j]
                a[j] = a[i]
                a[i] = tmp
            j += 1
        i += 1
    return a",True
"def fibonacci(n):
    a = 0
    b = 1
    for i in range(1, n + 1):
        c = a + b
        return a
        a = b
        b = c",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    a = 1
    b = 1
    for i in range(n - 1):
        a, b = b, a + b
    return a",True
"def fibonacci(a):
    if a == 0 or a == 1:
        return 1
    return fibonacci(a - 1) + fibonacci(a - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,030c2a56-757a-4b4d-ac91-67aecc3d9b33,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8ed5ee6f-d6e7-4caf-8917-36bbe373ffac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def swap_unique_keys_values(d):
    l = Counter(list(d.values()))
    return {value: key for key, value in list(d.items()) if l[value] == 1}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def swap_unique_keys_values(d):
    values = list(d.values())
    return {v: k for k, v in list(d.items()) if values.count(v) < 2}",True
"def quicksort(a, p, r):
    if r <= p:
        return
    q = partition(a, p, r)
    quicksort(a, p, q - 1)
    quicksort(a, q + 1, r)


def minimum(a):
    quicksort(a, 0, len(a) - 1)
    return a[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,41c113b8-6f57-4003-bed3-3587b2376170,2016.0,,False
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,8d8fa15f-3f0d-4a69-849b-9b7da96123cd,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,01bd5698-d7fa-47db-8dec-ca4be1284feb,2016.0,"def fibonacci(n):
    a = 0
    b = 1
    for i in range(0, n):
        if True:
            temp = a
            a = b
            b = temp + b
    return a",True
"def my_function(a):
    return a[1]


def swap_keys_values(dict):
    l = []
    new_dict = {v: k for k, v in list(dict.items())}

    def my_function(a):
        return a[1]
    for k in new_dict:
        l.append('({}, : {})'.format(int(k), new_dict[k]))
    print('[' + ', '.join(sorted(l, key=itemgetter(-2))) + ']')",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,,False
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,3a3b6ee9-ae37-4d43-b10a-27ade2385dcd,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if v not in list(d.values())}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,66e06699-d10a-47f1-a343-55edd72e95d2,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    circles = (x2 - x1) ** 2 + (y2 - y1) ** 2
    distance = circles ** 1 / 2
    length = r1 + r2
    if distance < length:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,422fe752-ca84-4537-b250-7de556e6ee94,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** (1 / 2)
    circles = r1 + r2
    if distance < circles:
        return True
    else:
        return False",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        j = i + 1
        p = i
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        a[i], a[p] = a[p], a[i]
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += j
        a[p], a[i] = a[i], a[p]
        i += 1",True
"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if v not in newdick:
            newdick[v] = k
    return newdick",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,4b622395-1c2b-4a5d-ba03-c6e0e0ef2dd7,2016.0,"def swap_unique_keys_values(dick):
    newdick = {}
    for k, v in list(dick.items()):
        if list(dick.values()).count(v) == 1:
            newdick[v] = k
    return newdick",True
"def swap_unique_keys_values(d):
    c = {}
    e = {}
    r = {}
    seen = {}
    for value in list(d.values()):
        if value not in c:
            c[value] = 1
        else:
            c[value] = c[value] + 1
    for keys, values in list(c.items()):
        if values == 2:
            e.append(keys)
            del values
    for key in e:
        for value in list(d.items()):
            if key not in value:
                r[value[0]] = value[1]
    my_dict = r
    new_dict = {v: k for k, v in list(my_dict.items())}
    return new_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f5dc8223-cf9e-429f-aae8-350d82da1982,2016.0,"def swap_unique_keys_values(d):
    dictionary = {}
    counter = []
    new = []
    for k, v in list(d.items()):
        if False:
            0
        else:
            0
        counter.append(v)
    for c in counter:
        if counter.count(c) == 1:
            new.append(c)
    if True:
        for k, v in list(d.items()):
            if v in new:
                dictionary[v] = k
        return dictionary",True
"def circle_area(r):
    return pi * r * r",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,0fe97cdd-5534-49d7-8452-aaf0faff48ad,2015.0,"def circle_area(r):
    return r * r * 3.14",True
"def square_perimeter(r):
    sqaure_perimeter = r * r * r * r
    return square_perimeter",square_perimeter,square_perimeter,Returns the perimeter of a square.,assert square_perimeter(0)==0 and square_perimeter(-12684)==-50736,False,d6b9871a-67ab-4c5d-894e-eb5d53fae3d1,2016.0,"def square_perimeter(b):
    sp = b + b + b + b
    return sp",True
"def overlap(x1=0, y1=0, r1=0, x2=0, y2=0, r2=1):
    abs(r1 - r2) <= ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 <= (r1 + r2) ** 2",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,262b3841-5158-4b0c-be99-57281e73f267,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5
    return dist < r1 + r2",True
"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[-1]
    a.pop()
    return [a] + reverse_list(l)",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2016.0,"def reverse_list(l):
    if len(l) == 0:
        return []
    a = l[-1]
    l.pop()
    return [a] + reverse_list(l)",True
"def area(r):
    return pi * r * r",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def swap_keys_values():
    {v: k for k, v in list(d.items())}",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def swap_keys_values(d):
    return {v: k for k, v in list(d.items())}",True
"def fibonacci(n):
    fib = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    if n == 0:
        num = fib[0]
    elif n == 1:
        num = fib[1]
    else:
        num = fib[n - 1] + fib[n - 2]
    return num
    fibonacci()",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,2b978ca4-e1a6-4660-9bf9-39da09a92282,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50d273d2-c9d2-425d-a22d-cc7338b6bc3e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,b0c92748-3b02-4340-a9d8-2ebe9a693531,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,61b5b70e-4e9d-424d-ba4b-cab01b8c205f,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(d):
    dictionary = {}
    unique = []
    for k, v in list(d.items()):
        unique.append((k, v))
    for k, v in unique:
        if unique.count(v) > 1:
            del unique[k, v]
    print(unique)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
            assert low == 0 or a[low - 1] < q
        else:
            high = mid
            assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,587649dc-83bf-4c24-bb43-de304405f3b9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,50aef720-52de-4735-8874-78f5a311b939,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(l):
    if not l or len(l) == 1:
        return l
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def minimum(l):
    if len(l) == 1:
        return l[0]
    tail_min = minimum(l[1:])
    return l[0] if l[0] < tail_min else tail_min",True
"def fibonacci(n):
    if n <= 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,45fe5d71-35bd-4b87-b28c-71b204939543,2016.0,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(set(swap_me.keys())) if
            swap_me[key]}",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,d566071f-0679-42ce-9081-3fac29a67d21,2016.0,"def swap_unique_keys_values(swap_me):
    if swap_me is not None:
        return {swap_me[key]: key for key in list(swap_me.keys()) if list(
            swap_me.values()).count(swap_me[key]) == 1}",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        elif letter != string[-1]:
            return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,b9e7e608-6036-4d44-8770-a7036176b53c,2016.0,"def search(str, letter):
    A = False
    i = 0
    while i < len(str):
        if letter == str[i]:
            return True
        elif A:
            0
        i = i + 1
    return A",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    x = (x2 - x1) ** 2
    y = (y2 - y1) ** 2
    distance = (x + y) // 2
    if r1 + r2 == distance:
        return True
    elif r1 - r2 == distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,0473ca8a-3862-4046-a34c-16eb754fdfff,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    a = (x2 - x1) ** 2
    b = (y2 - y1) ** 2
    c = (a + b) ** 0.5
    total_r = r1 + r2
    if c < total_r:
        return True
    else:
        return False",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance and abs(r1 - r2) <= distance:
        return True
    else:
        return False",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,9e18f731-fa38-496b-927b-db0cd1aa3409,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    distance = (abs((x2 - x1) ** 2) + abs((y2 - y1) ** 2)) ** 0.5
    if r1 + r2 > distance:
        return True
    else:
        return False",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp
    return a


def reverse(a):
    k = 0
    while k < len(a) / 2:
        swap(a, k, len(a) - k - 1)
        k += 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,07676427-a705-4cb7-a5ef-6a1c3c67c950,2016.0,,False
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low != high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
        assert low == 0 or a[low - 1] < q
        assert high == len(a) or q <= a[high]
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,bb62ca90-d7ec-42bb-b255-0f55492691ea,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,e65c3029-39bf-4873-8e7a-599cb24be899,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        print(a[-1])
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",True
"def swap_keys_values(d):
    print([(4, 'a'), (7, 'b'), (10, 'c')])",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    return dict([(v, k) for k, v in list(d.items())])",True
"def search(s, letter):
    if letter in s:
        print(True)
    else:
        print(False)",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,aaa0b462-c89e-49f8-8886-ec2961496a19,2016.0,"def search(word, letter):
    if letter in word:
        return True
    else:
        return False",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    timp = a[p]
    a[p] = a[i]
    a[i] = temp
    i += 1",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,a379289f-2b57-4917-ac63-01ab37fb3785,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j += 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i += 1",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,621f49f9-6d90-49c2-ada6-2cb48080552a,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",True
"def swap_unique_keys_values(d):
    z = []
    for c in list(d.items()):
        z.append(c[1])
    d1 = {v: k for k, v in list(d.items()) if v in z}
    return d1",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,29883390-7aa0-4484-9f1e-6fd0c1c8c420,2016.0,"def swap_unique_keys_values(d):
    a = []
    for k, v in list(d.items()):
        a.append(v)
    b = [c for c in a if a.count(c) == 1]
    return {v: k for k, v in list(d.items()) if v in b}",True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,52070898-b2dd-4882-a9a9-65bd9d55725a,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def search(str, letter):
    if letter in str:
        print('True')
    else:
        print('False')",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,7761b9ac-f093-487b-8401-cf2d01636e78,2016.0,"def search(str, letter):
    if letter in str:
        return True
    else:
        return False",True
"def append2list(l1, l2=[]):
    l3 = []
    for i in l1:
        l3.append(i)
    return l3",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,11236dde-1cd4-4a17-af9c-b06843cf22cc,2016.0,"def append2list(l1, l2=[]):
    l = l2
    for i in l1:
        l.append(i)
    return l",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,16011fd4-f5e2-4c2c-b014-86692ff746d5,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    new_dict = sorted(list(d.items()), key=lambda t: t[0])
    return new_dict",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,4986b17f-a671-4d40-a5ca-1c65fd498cbf,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",True
"def minimum(l):
    l = sorted(minimum(l))
    return l[0]",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2016.0,"def minimum(l):
    l = sorted(l)
    return l[0]",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def smallest_element(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[p] < a[j]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = smallest_element(a, i)
        swap(a, i, j)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,da1464fe-2ccb-4c4e-b174-962f2177debd,2016.0,,False
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,431d0ef6-9edd-464b-a5fa-cccf8b152f4e,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,dcc424e7-96ab-4451-ad16-597d84c13c2e,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = low + (high - low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,c8ff27a3-b9c4-40dd-95d5-68feefbafff7,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    print(d)",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,c0a5d565-4fbf-4274-85af-71162f38b8d4,2016.0,"def swap_unique_keys_values(d):
    return {v: k for k, v in list(d.items()) if list(d.values()).count(v) == 1}",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,b46a0d8e-c049-41aa-b896-956cda3c8d13,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def fibonacci(n):
    i = 0
    while i < n:
        if n[i] == 0:
            return i
        i += 1
    return c
    c = i + 1",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,3db8d602-4800-4b13-9482-3fb9643a4588,2016.0,"def fibonacci(n):
    fib = [0, 1]
    i = 2
    while i < n + 1:
        if True:
            tmp = int(fib[i - 2]) + int(fib[i - 1])
            fib.append(tmp)
            i += 1
    return fib[n]",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        assert low <= mid < high
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,104b03f1-1241-495d-996a-ba8f4a26b8bc,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f56d6cc3-92a7-49e7-aa07-2e1c83caaabe,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        min_ind = i
        while j < len(a):
            if a[j] < a[min_ind]:
                min_ind = j
            j += 1
        tmp = a[i]
        a[i] = a[min_ind]
        a[min_ind] = tmp
        i += 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,733076ff-a42d-4d8b-82c9-5fbbffc0c400,2016.0,"def selection_sort(a):
    i = 0
    while i < len(a):
        j = i + 1
        minimum = i
        while j < len(a):
            if a[j] < a[minimum]:
                minimum = j
            j += 1
        tmp = a[minimum]
        a[minimum] = a[i]
        a[i] = tmp
        i += 1
    return a",True
"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,6f8302a0-5974-4b36-a8e9-6b3968a8fce1,2016.0,"def selectionsort(a):
    i = 0
    while i < len(a):
        p = i
        j = i + 1
        while j < len(a):
            if a[j] < a[p]:
                p = j
            j = j + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def reverse(lines):
    import sys
    lines = sys.stdin.readlines()
    return lines",reverse_iter,reverse,Iteratively reverse a list of elements.,"assert reverse([])==[] and reverse([20, 10, 0, -10, -20])==[-20, -10, 0, 10, 20] and reverse(['toto', True, [10, 0, 9], 12.8, 6])==[6, 12.8, [10, 0, 9], True, 'toto']",False,7761b9ac-f093-487b-8401-cf2d01636e78,2015.0,"def reverse(a):
    a = a[::-1]
    return a",True
"def search(s, letter):
    if len(s) == 0:
        return 'False'
    elif s[0] == letter:
        return 'True'
    else:
        return search(s[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,44c97823-e1ac-4434-b296-79fbeb51fa5a,2016.0,"def search(str, letter):
    if str == '':
        return False
    elif str[0] == letter:
        return True
    else:
        return search(str[1:], letter)",True
"def area(r):
    r * r * pi",area,area,Return the area of a circle with the given coordinates.,assert area(0)==0.0 and area(-14329)==644910876.981,False,2c7a8a81-53ed-42cc-bd4e-e268d1d767be,2016.0,"def area(r):
    return 3.141 * r ** 2",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,f6343d5f-9ee0-441c-a67c-781ee180947e,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def swap_unique_keys_values(a):
    lis = []
    for no in a:
        lis.append(no)
    dir = {}
    for i in a:
        if lis.count(no) > 1:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(d):
    new_dict = {}
    a = []
    for v in list(d.values()):
        a.append(v)
    for k in d:
        if a.count(d[k]) == 1:
            new_dict[d[k]] = k
    return new_dict",True
"def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp


def position_of_smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    return p


def selection_sort(a):
    i = 0
    while i < len(a):
        p = position_of_smallest(a, i)
        swap(a, i, p)
        i = i + 1",selection_sort,selection_sort,Sort a list by repeatedly move minimimum of remaining sublist to front.,"assert selection_sort([])==[] and selection_sort([0])==[0] and selection_sort([25204, -1, -18176])==[-18176, -1, 25204] and selection_sort([-18176, -1, 25204])==[-18176, -1, 25204]",False,4a1f2726-b713-40f0-b544-9de55d617a12,2016.0,,False
"def bsearch(a, q):
    start = 0
    end = len(a)
    while start < end:
        middle = (start + end) / 2
        if a[middle] < q:
            start = middle + 1
        else:
            end = middle
    return start",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_keys_values(d):
    d = dict((v, k) for k, v in list(d.items()))
    d = list(d.items())
    print(d)",swap_keys_values,swap_keys_values,Swap the keys of a dictionary with its values.,"assert swap_keys_values({})=={} and swap_keys_values({'1': 'a'})=={'a': '1'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'a': '3', 'b': '2'}",False,1a650795-f8bf-47db-90f0-c896555da6d7,2016.0,"def swap_keys_values(d):
    new_dict = dict((v, k) for k, v in list(d.items()))
    return new_dict",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while high != low:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,ba8a7560-aac9-45ef-b6fd-730b60e73e8c,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1",reverse_by_swap,reverse,Reverse a list of elements by swapping its elements.,"assert reverse([])==[] and reverse([0])==[0] and reverse([-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052])==[1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103] and reverse([-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052])==[1867157052, -70, 10933, 1867157052, 31758, 113466788817036974729578468346735566318, -103] and reverse([1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103])==[-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052] and reverse([1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103])==[-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052] and reverse([-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052])==[1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103] and reverse([[1]])==[[1]]",False,f98e9d61-9e86-4fed-86db-3cf718c5962d,2016.0,"def reverse(a):
    i = 0
    while i < len(a) / 2:
        tmp = a[i]
        a[i] = a[len(a) - i - 1]
        a[len(a) - i - 1] = tmp
        i = i + 1
    return a",True
"def append2list(l1, l2=[]):
    for i in l2[::-1]:
        l1.append(i)
    return l1",append2list,append2list,Appends elements of a list l1 at the end of the list l2. If l2 not supplied default to empty list.,"assert append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866],[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866])==[-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866] and append2list([-21267],[-21267, -21267])==[-21267, -21267, -21267]",False,932dfe81-cd49-4d41-8b87-456f3246e781,2016.0,"def append2list(l1, l2=[]):
    for i in l1:
        l2.append(i)
    return l2",True
"def circle_area(n):
    ca = 3.14 * n * n
    return ca",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,61140bd5-cdb2-4a78-b4a3-ad76b0ca223a,2016.0,"def circle_area(n):
    ca = 3.14 * (n * n)
    return ca",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,142cacda-ba1b-469c-9b25-8603a78324c9,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,7b8e2d7b-1f3a-4e34-b02c-e6ac46baa465,2015.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        search(string[1:], letter)",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(string, letter):
    if string == '':
        return False
    elif string[0] == letter:
        return True
    else:
        return search(string[1:], letter)",True
"def minimum(a):
    if a == []:
        return tmp
    if a.pop() < a[-1]:
        print(a.pop())
        tmp = a.pop()
    return minimum(a)",minimum,minimum,Return the minimum element in a list of numbers.,"assert minimum([0])==0 and minimum([2, 10, 23, 9, 187])==2 and minimum([-2, -26, 7, -123, -1236521])==-1236521 and minimum([3896, 3673, 45, 16715, 23673])==45",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def minimum(a, tmp=0):
    if a == []:
        return tmp
    if tmp == 0 or a[-1] < tmp:
        tmp = a[-1]
    return minimum(a[:-1], tmp)",True
"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return 'True'
        i = i + 1
    return 'False'",search_iter,search,Iteratively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def search(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return True
        i = i + 1
    return False",True
"def swap_unique_keys_values(a):
    lis = ''
    for no in a:
        lis += str(a[no])
    dir = {}
    print(lis)
    for i in a:
        print(lis.count(str(a[no])))
        if str(a[no]).count(lis) < 2:
            dir[a[i]] = i
    return dir",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,a48376ed-7138-4481-a4da-74490838ea3e,2016.0,"def swap_unique_keys_values(a):
    new_dict = {v: k for k, v in list(a.items())}
    l = []
    for i in a:
        l.append(a[i])
    for i in l:
        if l.count(i) > 1:
            del new_dict[i]
            break
    return new_dict
    return new_dict",True
"def circumference(r):
    return 2 * pi * r",circumference,circumference,Return the circumference of a circle.,assert circumference(0)==0.0 and circumference(-23091)==-145057.662,False,fa7e9f17-de07-4868-ab69-667438d7becd,2016.0,"def circumference(r):
    return 2 * 3.141 * r",True
"def search(string, *letter):
    i = 0
    if string[i] == letter[0]:
        return True
    else:
        count = i + 1
        search(string[count], letter[0])",search_recur,search,Recursively search for a letter in a string,"assert search('','0')==False and search('0','0')==True and search('ERFE0Rfsef','0')==True and search('ERFERfsef0','0')==True and search('','a')==False and search('cbzeycuzbvyzuvb','a')==False and search('cbsducsvdbcyts','c')==True and search('dbzeducvbzy','y')==True and search('xqvsgxcutvy','u')==True",False,e787ded7-43af-4b69-82c1-c646ab388711,2016.0,"def search(steve, letter):
    if letter in steve:
        return True
    else:
        return False",True
"def power(m, n):
    if m == 1:
        return m
    else:
        m = m ** n
        return power(m, n)",power,power,Raise m to the power of n.,"assert power(0,0)==1 and power(62,4)==14776336 and power(-14012,0)==1",False,a72d6534-1b96-4a41-95a5-f71f23e2bd99,2016.0,"def power(m, n):
    if n == 0:
        return 1
    else:
        return m ** n",True
"def smallest(a, i):
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j += 1
    return p


def swap(a, i, p):
    tmp = a[p]
    a[p] = a[i]
    a[i] = tmp


def selectionsort(a):
    i = 0
    while i < len(a):
        p = smallest(a, i)
        swap(a, i, p)
        i += 1
    return a",selectionsort,selectionsort,Sort a list by repeatedly move minimimum of remaining sublist to front.,assert selectionsort([])==None and selectionsort([])==None and selectionsort([0])==None and selectionsort([0])==None,False,98d44d17-92f8-4274-915e-b88bdd9dca26,2016.0,,False
"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([v])
            del out_dict[v]
        elif t not in blacklist:
            out_dict[v] = k
    return out_dict",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,11fcbbcf-716f-4e92-ab7c-407d4712c9e8,2016.0,"def swap_unique_keys_values(in_dict):
    out_dict = {}
    blist = set()
    for k, t in list(in_dict.items()):
        if t in out_dict:
            blist.update([t])
            del out_dict[t]
        elif t not in blist:
            out_dict[t] = k
    return out_dict",True
"def quicksort(l):
    if len(l) < 2:
        return l
    pivot = l[0]
    left = []
    right = []
    for n in l[1:]:
        if n < pivot:
            left.append(n)
        else:
            right.append(n)
    return quicksort(left) + [pivot] + quicksort(right)",quicksort,quicksort,Sort a list by recursively partitionioning list until sorted.,"assert quicksort([],0,0)==None and quicksort([],0,0)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 4, 3, 2, 1],0,4)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5, 5, 5, 5],0,3)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None and quicksort([5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986],0,8)==None",False,91bbbbbf-cad8-4507-9c4d-c7cfe0ebc210,2016.0,"def quicksort(a, start, end):
    if end - start < 1:
        return
    i = k = start
    while i <= end:
        if a[i] <= a[end]:
            a[i], a[k] = a[k], a[i]
            k = k + 1
        i = i + 1",True
"def fibonacci(n):
    if n == 0 or n == 1:
        return 1
    else:
        fibN_2 = 1
        fibN_1 = 1
        i = 2
        while i <= n:
            fibN = fibN_2 + fibN_1
            fibN_2 = fibN_1
            fibN_1 = fibN
            i = i + 1
        return fibN",fibonacci_iter,fibonacci,Iteratively compute the value of the fibonacci series at position n.,assert fibonacci(1)==1 and fibonacci(41)==165580141 and fibonacci(3)==2 and fibonacci(91)==4660046610375530309,False,94e64aae-7bb0-45bd-8969-e98b17d0a3da,2016.0,"def fibonacci(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    else:
        a = 0
        b = 1
        i = 2
        while i <= n:
            fib = a + b
            a = b
            b = fib
            i += 1
        return fib",True
"def reverse_list(ls):
    return ls.reverse()",reverse_recur,reverse_list,Recursively reverse a list of elements.,"assert reverse_list([])==[] and reverse_list([0])==[0] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3])==[-3, 787, -10050, -74, 85, -109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650] and reverse_list([0, 0])==[0, 0] and reverse_list([85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3])==[-3, -109345868112896702250879906349988323457, -1947378123, 12103, 9650, 787, -10050, -74, 85] and reverse_list([85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457])==[-109345868112896702250879906349988323457, -1947378123, 12103, 9650, -3, 787, -10050, -74, 85]",False,1c2a27a6-b2a2-47c9-b19f-39d39288a873,2016.0,"def reverse_list(ls):
    ls.reverse()
    return ls",True
"def index(str, letter):
    i = 0
    while i < len(str):
        i = i + 1
        if letter in str:
            return i
        else:
            return '-1'",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,80965c2d-45d9-440d-b3c3-403c112145e9,2016.0,"def index(str, letter):
    i = 0
    while i < len(str):
        if letter == str[i]:
            return i
        else:
            i = i + 1
    return -1",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,2eb2f93d-3491-4b0b-bad9-894c90595058,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid + 1] < q:
            assert low == 0 or a[low - 1] < q
            assert high == len(a) or q <= a[high]
        else:
            mid = low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,213d8254-d887-4b88-8234-2f2edbe536aa,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (high + low) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,7d992268-b79a-4106-8fbb-4f53742d117d,2016.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def swap_unique_keys_values(d):
    new_dict = dict([(v, k) for k, v in list(d.items()) if list(d.values())
        .count(v) == 1])",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,f1c26f39-fb4c-4010-aaa3-142fb52f57b9,2016.0,"def swap_unique_keys_values(d):
    return dict([(v, k) for k, v in list(d.items()) if list(d.values()).
        count(v) == 1])",True
"def sort(a):
    i = 0
    p = i
    j = i + 1
    while j < len(a):
        if a[j] < a[p]:
            p = j
        j = j + 1
    i = i + 1
    tmp = a[p]
    a[p] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,0ea9000e-74e5-4eea-8653-1bfeeae4aab1,2016.0,"def sort(a):
    i = 0
    p = 0
    while i > len(a):
        if a[i] < a[p]:
            p = i
        i = i + 1
        tmp = a[p]
        a[p] = a[i]
        a[i] = tmp
        i = i + 1",True
"def circle_area(n):
    cc = 2 * 3.14 * n
    return cc",circle_area,circle_area,Return the area of a circle.,assert circle_area(0)==0.0 and circle_area(-1160877629)==4.231579770269758e+18,False,762404df-24ca-44ff-9c98-3f841fa7faab,2016.0,"def circle_area(n):
    ans = n * n * 3.14
    return ans",True
"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if k in n_d:
            dup.append(k)
        n_d[d[k]] = k
    print(dup)
    for d in dup:
        n_d.pop(d)
    return n_d",swap_unique_keys_values,swap_unique_keys_values,Swap the keys of a dictionary with its unique values.,"assert swap_unique_keys_values({})=={} and swap_unique_keys_values({'1': 'a'})=={'a': '1'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'c', '4': 'd'})=={'a': '1', 'b': '2', 'c': '3', 'd': '4'} and swap_unique_keys_values({'1': 'a', '2': 'b', '3': 'a'})=={'b': '2'}",False,420bf3b7-f5e7-4d7a-9cbb-fd46a8b4e956,2016.0,"def swap_unique_keys_values(d):
    print(d)
    n_d = {}
    dup = []
    for k in d:
        if d[k] in n_d:
            dup.append(d[k])
        n_d[d[k]] = k
    print(dup)
    for x in dup:
        n_d.pop(x)
    return n_d",True
"def sort(a):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp",sort,sort,Sort a list by repeatedly moving the minimimum of the remaining sublist to the front.,"assert sort([0])==None and sort([0])==None and sort([])==None and sort([])==None and sort([' '])==None and sort([' '])==None and sort([70, 339305549])==None and sort([70, 339305549])==None",False,99d129a4-97af-42ac-a543-23b9157331f8,2016.0,"def sort(a):
    i = 0",True
"def fibonacci(n):
    if n == 1 or n == 0:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,99a8a900-efcf-4a9e-86ba-fdd0df4312d3,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)",True
"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i = i + 1",index_iter,index,"Iteratively search for the position of letter in str, return -1 if it is not there.","assert index('','0')==-1 and index('0','0')==0 and index('11','1')==0",False,8b835803-8982-477e-b017-9d6fc24a47d0,2016.0,"def index(string, letter):
    i = 0
    while i < len(string):
        if letter == string[i]:
            return i
        i += 1
    return -1",True
"def fibonacci(n):
    a = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
    return a[n]",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,662f087e-9c5b-47c6-8644-ba7525600aac,2016.0,"def fibonacci(n):
    return n if n < 2 else fibonacci(n - 2) + fibonacci(n - 1)",True
"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) / 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",bsearch,bsearch,Search for element q in the sorted array a.,"assert bsearch([],12)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],5)==4 and bsearch([1, 2, 3, 4, 6, 7, 8],1)==0 and bsearch([1, 2, 3, 4, 6, 7, 8],4)==3",False,a58f503b-2a5d-430c-aea3-11134a0daeb8,2015.0,"def bsearch(a, q):
    low = 0
    high = len(a)
    while low < high:
        mid = (low + high) // 2
        if a[mid] < q:
            low = mid + 1
        else:
            high = mid
    return low",True
"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return abs(r1 - r2) <= dist <= abs(r1 + r2) and (r1 > dist + r2 or r2 >
        dist + r1)",overlap,overlap,Test if two circles overlap.,"assert overlap(12,-6058,21436,-3483096651887624530,24,31017)==False and overlap(-30592,-26624,-11905,1,2,30134)==False and overlap(0,0,0,0,0,0)==False and overlap(5128,-8635,-28938,25,-31295,-21637807133189218411179185993653430151)==False and overlap(-16348,-2218,2871,-15155,-83,24475)==True and overlap(4807,1216206119,8753907074291481720,-19844,-26061,-15639)==True and overlap(1348593950,19232,-10923,20,2259187900768772679,-5343103208648864320)==False and overlap(8410739119977124611,9995,83,8410739119977124611,19348,21604)==True",False,59b507a0-b0a2-42b7-a6af-736ab71c8fe1,2016.0,"def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):
    dist = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
    return dist < r1 + r2",False
"def fibonacci(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    return fibonacci(n - 1) + fibonacci(n - 2)",fibonacci_recur,fibonacci,Recursively compute the value of the fibonacci series at position n.,assert fibonacci(0)==0 and fibonacci(1)==1 and fibonacci(2)==1 and fibonacci(10)==55 and fibonacci(23)==28657,False,fccb16a1-abd7-4ee8-a2c6-5b7653d7a7dc,2016.0,"def fibonacci(n):
    l = []
    if n <= 1:
        return n
    elif False:
        0
    return fibonacci(n - 1) + fibonacci(n - 2)",True
